<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[rafageist]]> | rafageist</title><description><![CDATA[Obsidian digital garden]]></description><link>https://rafageist.com/</link><image><url>https://rafageist.com/lib/media/favicon.png</url><title>rafageist | rafageist</title><link>https://rafageist.com/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 02 Feb 2025 15:43:11 GMT</lastBuildDate><atom:link href="https://rafageist.com/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 02 Feb 2025 15:42:46 GMT</pubDate><copyright><![CDATA[Rafa Rodriguez]]></copyright><ttl>60</ttl><dc:creator>Rafa Rodriguez</dc:creator><item><title><![CDATA[The Strength of Unity: A Natural Gift]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:Reflections" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Reflections</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:Reflections" class="tag" target="_blank" rel="noopener nofollow">#Reflections</a> <br><img alt="The Strength of Unity.webp" src="https://rafageist.com/lib/media/the-strength-of-unity.webp"><br>If you believe that nature has made us weak as individuals, it is because it has granted us strength when we are united.<br>In contemplating the vast and intricate web of nature, it is not uncommon to feel a sense of awe at the power and resilience that pervades the natural world. However, an observation that might initially appear as a paradox emerges when we consider the individual constituents of these robust systems: on their own, many creatures and elements in nature are remarkably fragile. This observation leads us to a profound realization — if nature has made us weak as individuals, it is precisely because it has endowed us with a greater strength, one that is realized in unity.<br>This principle of collective strength can be observed across various ecosystems. Take, for instance, the humble ant. Individually, an ant is vulnerable and limited in capacity. Yet, when united with its colony, it performs architectural feats, sustains complex societies, and ensures survival through impeccable teamwork. Similarly, a single honeybee, while an important part of the ecosystem, achieves its true potential as part of a hive — collaborating to create intricate structures and sustain a complex societal hierarchy that supports the entire colony.<br>Translating this observation to human society, the message becomes even more compelling. History is replete with examples where unity has been the cornerstone of resilience and strength. From movements that have toppled oppressive regimes to innovations born from collaborative efforts, the collective power of humans is undeniable. This is not merely a social strategy but a fundamental principle embedded in the fabric of life, as intended by nature.<br>Why, then, does nature endow individual weakness and collective strength? The answer may lie in the inherent benefits of interdependence. By necessitating cooperation, nature drives diverse organisms to form ecosystems where the survival of one is linked to the wellbeing of others. This interdependence fosters a rich biodiversity and maintains the balance necessary for the health of the planet.<br>Moreover, in human contexts, this design encourages compassion, understanding, and mutual support — qualities that are essential for the survival of any community. In times of crisis, these qualities manifest vividly, demonstrating how adversity often leads to strengthened communal ties and renewed cooperation.<br>This principle has practical implications for how we address contemporary challenges. In an era marked by global issues such as climate change, pandemics, and widespread inequality, the need for unified action has never been more critical. These challenges are too complex and interconnected to be tackled by individuals or even single nations alone. They require a collective response, a unification of skills, resources, and willpower.<br>In conclusion, while nature may have made us weak as individuals, this weakness is a veiled strength, pushing us towards unity. It is a reminder that our greatest challenges can also be our most significant opportunities for collaboration. As we move forward, let this understanding guide us not only in survival but in striving for a thriving, harmonious existence on this planet we share. Embracing our interdependence is not just a necessity but a profound strength that nature has wisely ingrained in us.]]></description><link>https://rafageist.com/blog/en/2023/the-strength-of-unity-a-natural-gift.html</link><guid isPermaLink="false">Blog/en/2023/The Strength of Unity - A Natural Gift.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 23 Jun 2024 15:28:58 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/the-strength-of-unity.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/the-strength-of-unity.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[War harms those who do not want it]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:War" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#War</a> <a class="tag" href="https://rafageist.com/?query=tag:Reflections" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Reflections</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:War" class="tag" target="_blank" rel="noopener nofollow">#War</a> <a href="https://rafageist.com?query=tag:Reflections" class="tag" target="_blank" rel="noopener nofollow">#Reflections</a> <br><img alt="War harms those who do not want it.webp" src="https://rafageist.com/lib/media/war-harms-those-who-do-not-want-it.webp"><br>
In the narrative of war, much is said about the warriors and the battlegrounds. However, the impact on those who neither choose nor desire conflict is often a footnote, overshadowed by the drama of military strategy and national pride. War, in its essence, is a disruptor of life and peace, affecting countless innocent lives who find themselves caught in the crossfire of ideologies and ambitions.<br>At the heart of every war are the civilians, who bear the brunt of the suffering. These are individuals who have not enlisted in a cause but find their daily lives upturned by it. The destruction of infrastructure—schools, hospitals, and homes—creates a cascade of crises, from education interruptions to healthcare emergencies. The physical landscape of a city can be rebuilt, but the psychological scars carried by its residents often persist, manifesting as trauma that can span generations.<br>Economically, war instigates a downturn that affects the livelihoods of ordinary people. Market instability and the destruction of local businesses force economic migration, pushing individuals and families into uncertainty. Social structures are disrupted, communities are displaced, and the fabric of society is torn apart. The war might be political, but its consequences are deeply personal, affecting the stability of family units and community connections.<br>War does not discriminate against nature. The environmental impact of military operations—from deforestation to water contamination—can degrade the very resources upon which civilians depend for survival. Additionally, cultural heritage, often targeted or collateral in conflicts, represents an irreplaceable loss of identity and history for many communities.<br>This leads us to a critical consideration: the moral responsibility of those who initiate and engage in conflicts. It is essential to remember that behind the abstract discussions of military tactics and political gains are real human lives—lives that do not wish for war but are forced to endure its consequences. Leaders and decision-makers must thus consider not just the immediate objectives but the long-term human costs of war.<br>"War harms those who do not want it" is not merely a statement; it is a reality experienced by millions who find themselves in war zones without a choice. As global citizens, it is our responsibility to advocate for peaceful resolutions and support mechanisms that protect and uplift the innocent. Understanding the depth of war's impact can help foster a more empathetic and proactive approach to conflict resolution, where the voices of the most affected are heard and heeded.]]></description><link>https://rafageist.com/blog/en/2023/war-harms-those-who-do-not-want-it.html</link><guid isPermaLink="false">Blog/en/2023/War harms those who do not want it.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 23 Jun 2024 15:29:05 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/war-harms-those-who-do-not-want-it.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/war-harms-those-who-do-not-want-it.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Beyond the Basics: A Dive into Elegant JavaScript Solutions for Time-Based Greetings]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:JavaScript" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JavaScript</a> <a class="tag" href="https://rafageist.com/?query=tag:Challenges" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Challenges</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:JavaScript" class="tag" target="_blank" rel="noopener nofollow">#JavaScript</a> <a href="https://rafageist.com?query=tag:Challenges" class="tag" target="_blank" rel="noopener nofollow">#Challenges</a><br>In the ever-evolving world of software development, sometimes a simple problem can spark a lively discussion among developers. This was exactly the case when a tweet from Flavio Corpa asked the JavaScript community for a more elegant solution to determine greetings based on the time of day.<br><br><a data-tooltip-position="top" aria-label="https://x.com/FlavioCorpa/status/1726899445504106668" rel="noopener nofollow" class="external-link" href="https://x.com/FlavioCorpa/status/1726899445504106668" target="_blank">The initial problem</a> was straightforward: based on the current hour, a greeting (such as "Good Morning" or "Good Evening") should be displayed. <a data-tooltip-position="top" aria-label="https://x.com/FlavioCorpa" rel="noopener nofollow" class="external-link" href="https://x.com/FlavioCorpa" target="_blank">Flavio</a> presented a solution using a combination of Object.fromEntries() and multiple ranges, which, while functional, felt cumbersome to some.<br>const hi = () =&gt; {
  const greetings = Object.fromEntries([
    ...range(20, 24).map((h) =&gt; [h, t('greetGoodNight')]),
    ...range(14, 20).map((h) =&gt; [h, t('greetGoodEvening')]),
    ...range(9, 14).map((h) =&gt; [h, t('greetGoodMorning')]),
    ...range(5, 9).map((h) =&gt; [h, t('greetWakingUp')]),
    ...range(0, 5).map((h) =&gt; [h, t('greetGoingToSleep')]),
  ])
  return greetings[new Date().getHours()] // always a number between 0-23
}
<br><br>Several developers chimed in with their takes:<br><a data-tooltip-position="top" aria-label="https://x.com/OmgImAlexis/status/1727207912286847362" rel="noopener nofollow" class="external-link" href="https://x.com/OmgImAlexis/status/1727207912286847362" target="_blank">Luna's Array-based Solution</a>: Suggested simplifying the approach by creating an array pre-filled with greetings for each hour. This solution minimized the code but included conditional checks within an array mapping, which, while cleaner, still didn't hit the mark on elegance for everyone.<br>const greetings = Array.from({ length: 24 }).map((hour) =&gt; {
  if (hour &lt; 12) return 'Good morning';
  if (hour &lt; 18) return 'Good afternoon';
  return 'Good evening';
});

const greeting = greetings[new Date().getHours()];
<br><a data-tooltip-position="top" aria-label="https://x.com/antoniosarosi/status/1726964885308010594" rel="noopener nofollow" class="external-link" href="https://x.com/antoniosarosi/status/1726964885308010594" target="_blank">Antonio Sarosi's Traditional Approach</a>: Proposed sticking to basic if-else statements. This old-school method is clear and direct but can be verbose, especially with multiple conditions.<br>
TypeScript Enhancements: Another developer suggested using TypeScript to enforce type safety and clarity, adding a layer of sophistication and robustness to the solution.<br>const hi = () =&gt; {
  const hour = new Date().getHours();
  if (hour &lt;= 5) return t("greetGoingToSleep");
  if (hour &lt;= 9) return t("greetWakingUp");
  if (hour &lt;= 14) return t("greetGoodMorning");
  if (hour &lt;= 20) return t("greetEvening");
  return t("greetGoodNight");
}

<br>The <a data-tooltip-position="top" aria-label="https://x.com/vvarhand/status/1727124111800046045" rel="noopener nofollow" class="external-link" href="https://x.com/vvarhand/status/1727124111800046045" target="_blank">vvarhand's solution</a> simplifies the problem quite a bit by using a different strategy. I like this solution, although it can be improved.<br><br><a data-tooltip-position="top" aria-label="https://x.com/rafageist/status/1805089706306101737" rel="noopener nofollow" class="external-link" href="https://x.com/rafageist/status/1805089706306101737" target="_blank">In response</a> to the varied proposals, I aimed to distill the essence of the task into something both minimalistic and elegant. Here’s how I approached it:<br>const hi = () =&gt; {
	
	const messages = {
		S: 'greetGoingToSleep',
		W: 'greetWakingUp',
		M: 'greetGoodMorning',
		E: 'greetGoodEvening',
		N: 'greetGoodNight'
	};

	//                 012345678901234567890123
	const greetings = 'SSSSSSWWWWMMMMMEEEEEENNN';
	const now = new Date().getHours();
	
	return t(messages[greetings[now]]);
}

<br>This solution involves creating a string where each character represents a specific greeting associated with a range of hours. The elegance here lies in the direct indexing provided by the string—no need for complex conditionals or extensive mappings. This makes the function extremely fast and easy to manage, as changing the greeting for a particular hour range is as simple as adjusting a single character in the string.<br>Of course, this can be more compact, but perhaps it is not necessary to exaggerate so much:<br>const hi = () =&gt; t({
	S: 'greetGoingToSleep',
	W: 'greetWakingUp',
	M: 'greetGoodMorning',
	E: 'greetGoodEvening',
	N: 'greetGoodNight'
}[('SSSSSSWWWWMMMMMEEEEEENNN')[new Date().getHours()]]);
<br><br>While the initial solution worked beautifully for a singular cultural context, the real world often demands more flexibility. Thus, I extended the idea to cater to different cultural norms, which is crucial in a globally connected digital environment.<br>const hi = (culture = 'default') =&gt; {
    const configurations = {
        default: {
            messages: {
                S: 'greetGoingToSleep',
                W: 'greetWakingUp',
                M: 'greetGoodMorning',
                E: 'greetGoodEvening',
                N: 'greetGoodNight'
            },
            greetings: 'SSSSSSWWWWMMMMMEEEEEENNN'
        },
        spain: {
            messages: {
                S: 'saludoNocturno',
                W: 'saludoDespertar',
                M: 'buenosDias',
                E: 'buenasTardes',
                N: 'buenasNoches'
            },
            greetings: 'SSSSSSWWWWWMMMMEEEENNNNN'
        },
        japan: {
            messages: {
                S: 'oyasuminasai',
                W: 'ohayouGozaimasu',
                M: 'konnichiwa',
                E: 'konbanwa',
                N: 'oyasumi'
            },
            greetings: 'SSSSSSWWWWMMMMMEEEENNNNN'
        },
        /* ... */
    };

    const config = configurations[culture] || configurations['default'];
	const messages = config.messages;
	const greetings = config.greetings;
    const now = new Date().getHours();
    
    return t(messages[greetings[now]]);
};

<br>In this extended version, the function not only adapts to the hour but also to cultural variations in greeting times and phrases. This adaptability allows the function to be more universally applicable, addressing the nuances of international usage.<br>My journey through this challenge illustrates the power of simple yet smart coding practices that are scalable and adaptable. By starting with a minimalist approach and then expanding to accommodate multicultural needs, the solution demonstrates how software development can and should adapt to a broad spectrum of user requirements.<br>This solution leverages a configuration object that maps each hour to a specific greeting based on the cultural context. It reduces the need for multiple condition checks and makes it incredibly easy to adapt the function for different cultural norms by simply changing or adding to the configuration object.<br><br>The thread highlighted the diversity of thought within the programming community. From traditionalists who favor clarity and simplicity to innovators seeking to reduce redundancy and improve maintainability, each solution offers unique insights.<br>As developers, our job is not just to write code, but to craft solutions that are efficient, understandable, and maintainable. This discussion was a beautiful reminder of how community input can lead to better solutions and how sometimes, stepping beyond the first intuitive approach can yield surprisingly elegant results.]]></description><link>https://rafageist.com/blog/en/2024/elegant-javascript-solutions-for-time-based-greetings.html</link><guid isPermaLink="false">Blog/en/2024/Elegant JavaScript Solutions for Time-Based Greetings.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 29 Jun 2024 01:48:43 GMT</pubDate></item><item><title><![CDATA[Celebrating Recognition in the PHP Innovation Awards January 2024]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:PHP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PHP</a> <a class="tag" href="https://rafageist.com/?query=tag:Award" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Award</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:PHP" class="tag" target="_blank" rel="noopener nofollow">#PHP</a> <a href="https://rafageist.com?query=tag:Award" class="tag" target="_blank" rel="noopener nofollow">#Award</a><br>I am thrilled to share the exciting news that my project <a data-tooltip-position="top" aria-label="https://github.com/divengine/matrix" rel="noopener nofollow" class="external-link" href="https://github.com/divengine/matrix" target="_blank">Div PHP Matrix</a>, part of <a data-href="Divengine Open Source Ecosystem" href="https://rafageist.com/projects/divengine-open-source-ecosystem.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiOrganizationChart" aria-label="RiOrganizationChart" data-icon="RiOrganizationChart" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M15 3C15.5523 3 16 3.44772 16 4V8C16 8.55228 15.5523 9 15 9H13V11H17C17.5523 11 18 11.4477 18 12V15H20C20.5523 15 21 15.4477 21 16V20C21 20.5523 20.5523 21 20 21H14C13.4477 21 13 20.5523 13 20V16C13 15.4477 13.4477 15 14 15H16V13H8V15H10C10.5523 15 11 15.4477 11 16V20C11 20.5523 10.5523 21 10 21H4C3.44772 21 3 20.5523 3 20V16C3 15.4477 3.44772 15 4 15H6V12C6 11.4477 6.44772 11 7 11H11V9H9C8.44772 9 8 8.55228 8 8V4C8 3.44772 8.44772 3 9 3H15ZM9 17H5V19H9V17ZM19 17H15V19H19V17ZM14 5H10V7H14V5Z"></path></svg></span>Divengine Open Source Ecosystem</a>, has been honored in the January 2024 edition of the PHP Innovation Awards on PHPClasses.org. I am delighted to receive the Certificate of Recognition, acknowledging our outstanding position as number 6 in this prestigious competition.<br>
<br><a data-tooltip-position="top" aria-label="https://www.phpclasses.org/certificate/package/13115.pdf" rel="noopener nofollow" class="external-link" href="https://www.phpclasses.org/certificate/package/13115.pdf" target="_blank">Certificate</a> 
<br><a data-href="PHP Innovation Adward January 2024.pdf" href="https://rafageist.com/resources/php-innovation-adward-january-2024.pdf" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiFilePaper2Line" aria-label="RiFilePaper2Line" data-icon="RiFilePaper2Line" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M20 2C21.6569 2 23 3.34315 23 5V7H21V19C21 20.6569 19.6569 22 18 22H4C2.34315 22 1 20.6569 1 19V17H17V19C17 19.5128 17.386 19.9355 17.8834 19.9933L18 20C18.5128 20 18.9355 19.614 18.9933 19.1166L19 19V4H6C5.48716 4 5.06449 4.38604 5.00673 4.88338L5 5V15H3V5C3 3.34315 4.34315 2 6 2H20Z"></path></svg></span>PHP Innovation Adward January 2024.pdf</a>
<br>We thank PHPClasses.org for this honor and all users who have supported our project! This achievement motivates us to continue working on innovative solutions and constantly improving.<br>You can verify the results and learn more about our package at the following link: <a data-tooltip-position="top" aria-label="https://www.phpclasses.org/package/13115" rel="noopener nofollow" class="external-link" href="https://www.phpclasses.org/package/13115" target="_blank">Div PHP Matrix Library on PHPClasses.org</a><br>Thank you for being part of our journey!<br><img alt="Pasted image 20240310185330.png" src="https://rafageist.com/lib/media/pasted-image-20240310185330.png">]]></description><link>https://rafageist.com/blog/en/2024/celebrating-recognition-in-the-php-innovation-awards-january-2024.html</link><guid isPermaLink="false">Blog/en/2024/Celebrating Recognition in the PHP Innovation Awards January 2024.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 16 Mar 2024 03:18:53 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/pasted-image-20240310185330.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/pasted-image-20240310185330.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Conditional Logic in PHP with Short-Circuiting for Clean Code]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:Programming" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Programming</a> <a class="tag" href="https://rafageist.com/?query=tag:PHP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PHP</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:Programming" class="tag" target="_blank" rel="noopener nofollow">#Programming</a> <a href="https://rafageist.com?query=tag:PHP" class="tag" target="_blank" rel="noopener nofollow">#PHP</a><br><br>Traditionally, managing conditional logic in PHP often involves lengthy if-else or switch constructs, which can clutter code and reduce readability. However, by leveraging short-circuiting with logical operators, such as or and ||, developers can streamline their code and make it more concise. Let's explore how short-circuiting compares to conventional if-else logic with an example:<br>Short-circuiting is a behavior exhibited by logical operators such as or and ||. When evaluating a logical expression, PHP stops as soon as the result is determined. This means that if the outcome of an expression can be determined early based on the left-hand side of the expression, the right-hand side is not evaluated.<br>Consider the following example:<br>$isLoggedIn = true;
$userRole = "admin";

$isLoggedIn or throw new Exception("User is not logged in");
$userRole === "admin" or throw new Exception("User is not an admin");
<br>In this example, exceptions will occur if the conditions are true. Also the second expression ($userRole === "admin") will only be evaluated if the first expression ($isLoggedIn) is false. This prevents unnecessary evaluation and enhances performance.<br><br>The following is a conventional code using if-then-else:<br>if (isLoggedIn())
{
    if (isAdmin()) 
    {
        performAdminActions();
    }
    else 
    {
	    performUserActions();
    }
} 
else 
{
    handleUnauthorizedAccess();
}
<br>Now let's use the short circuit variant<br>isLoggedIn() and isAdmin() and performAdminActions();
isLoggedIn() and !isAdmin() and performAdminActions();
!isLoggedIn() and handleUnauthorizedAccess();
<br>In this short-circuiting approach, the performAdminActions() function is only called if the user is logged in and is an admin, resulting in cleaner and more expressive code. But, maybe the functions are expensive. Let's use some variables:<br>$isLoggedIn = isLoggedIn();
$isAdminLoggedIn = $isLoggedIn and isAdmin();
$isUserLoggedIn = $isLoggedIn and !$isAdminLoggedIn;
$isAdminLoggedIn and performAdminActions();
$isUserLoggedIn and performAdminActions();
!$isLoggedIn and handleUnauthorizedAccess();
<br>
For complete reference about logical operator in PHP, see the online manual: <a rel="noopener nofollow" class="external-link" href="https://www.php.net/manual/en/language.operators.logical.php" target="_blank">https://www.php.net/manual/en/language.operators.logical.php</a>
<br><br>
<br>Conciseness: Short-circuiting reduces the need for nested if-else constructs, resulting in more concise code.
<br>Expressiveness: By using short-circuiting, code becomes more expressive and semantically clear, improving readability.
<br>Modularity: Short-circuiting encourages modularization of code, allowing parts of expressions to be extracted into functions, methods, or local variables, enhancing maintainability and reusability.
<br>Clean Code: By eliminating unnecessary nesting, short-circuiting promotes clean code practices, making the codebase easier to understand and maintain.
<br><br>
<br>Overuse: While short-circuiting can be beneficial, overuse or abuse of this technique can lead to overly complex and hard-to-read code.
<br>Potential Confusion: Developers unfamiliar with short-circuiting may find it confusing, especially in more complex expressions.
<br>Debugging Challenges: In some cases, short-circuiting may obscure the flow of execution, making debugging more challenging.
<br><br>To address the debugging challenge posed by short-circuiting, developers can adopt good practices for modularizing expressions. Let's compare the conventional approach with modularization:<br>isUserLoggedIn() and isAdmin() and isPremiumUser() and performPremiumActions();
<br>In this scenario, placing a breakpoint within the conditional expression can be challenging, as the logic is tightly integrated into a single line. So, create a new function:<br>function isUserAllowed() {
    return isUserLoggedIn() &amp;&amp; isAdmin() &amp;&amp; isPremiumUser();
}
<br>By modularizing the logic into separate functions, such as isUserAllowed() and performPremiumActions(), developers can easily place breakpoints within these functions. <br>isUserAllowed() and performPremiumActions();
<br>With modularization, each function serves as a unit of code that can be individually tested and debugged. Developers can place breakpoints within these functions, inspect variables, and trace the flow of execution more effectively. <br>Additionally, modularization enhances testability through unit tests, as each function can be isolated and tested independently. This approach not only simplifies debugging but also promotes code maintainability and reusability.<br><br>
<br>Multiple Conditions: Short-circuiting allows for chaining multiple conditions in a single line, improving code readability and conciseness.
<br>$isLoggedIn or isAllowed() or throw new Exception("Unauthorized");
<br>
<br>Function Calls: While short-circuiting can be used with function calls, it's essential to ensure that these functions have no side effects, as they may not be called in certain scenarios.
<br><br>Short-circuiting is a powerful technique in PHP for streamlining conditional logic and writing cleaner, more expressive code. By leveraging logical operators such as or and ||, developers can simplify their code, improve readability, and enhance maintainability. However, it's crucial to use short-circuiting judiciously and consider its potential impact on code clarity and understandability.<br>By incorporating short-circuiting into your PHP development workflow, you can write more efficient and elegant code that is easier to maintain and understand for both yourself and other developers.]]></description><link>https://rafageist.com/blog/en/2024/conditional-logic-in-php-with-short-circuiting-for-clean-code.html</link><guid isPermaLink="false">Blog/en/2024/Conditional Logic in PHP with Short-Circuiting for Clean Code.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Fri, 15 Mar 2024 01:30:59 GMT</pubDate></item><item><title><![CDATA[Converting SQL WHERE Clauses to Prisma Queries Using TypeScript and Jison]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:TypeScript" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#TypeScript</a> <a class="tag" href="https://rafageist.com/?query=tag:Prisma" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Prisma</a> <a class="tag" href="https://rafageist.com/?query=tag:ORM" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#ORM</a> <a class="tag" href="https://rafageist.com/?query=tag:Challenges" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Challenges</a> <a class="tag" href="https://rafageist.com/?query=tag:Jison" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Jison</a> <a class="tag" href="https://rafageist.com/?query=tag:Parsers" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Parsers</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:TypeScript" class="tag" target="_blank" rel="noopener nofollow">#TypeScript</a> <a href="https://rafageist.com?query=tag:Prisma" class="tag" target="_blank" rel="noopener nofollow">#Prisma</a> <a href="https://rafageist.com?query=tag:ORM" class="tag" target="_blank" rel="noopener nofollow">#ORM</a> <a href="https://rafageist.com?query=tag:Challenges" class="tag" target="_blank" rel="noopener nofollow">#Challenges</a> <a href="https://rafageist.com?query=tag:Jison" class="tag" target="_blank" rel="noopener nofollow">#Jison</a> <a href="https://rafageist.com?query=tag:Parsers" class="tag" target="_blank" rel="noopener nofollow">#Parsers</a><br><br>In this article, I will explore how to convert <a data-tooltip-position="top" aria-label="https://blog.ansi.org/sql-standard-iso-iec-9075-2023-ansi-x3-135/" rel="noopener nofollow" class="external-link" href="https://blog.ansi.org/sql-standard-iso-iec-9075-2023-ansi-x3-135/" target="_blank">SQL</a> WHERE clauses into Prisma queries using <a data-tooltip-position="top" aria-label="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html" rel="noopener nofollow" class="external-link" href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html" target="_blank">TypeScript</a> and <a data-tooltip-position="top" aria-label="https://gerhobbelt.github.io/jison/docs/" rel="noopener nofollow" class="external-link" href="https://gerhobbelt.github.io/jison/docs/" target="_blank">Jison</a>. <a data-tooltip-position="top" aria-label="https://www.prisma.io/docs" rel="noopener nofollow" class="external-link" href="https://www.prisma.io/docs" target="_blank">Prisma</a> is a powerful <a data-tooltip-position="top" aria-label="https://www.freecodecamp.org/news/what-is-an-orm-the-meaning-of-object-relational-mapping-database-tools/" rel="noopener nofollow" class="external-link" href="https://www.freecodecamp.org/news/what-is-an-orm-the-meaning-of-object-relational-mapping-database-tools/" target="_blank">ORM</a> tool for <a data-tooltip-position="top" aria-label="https://nodejs.org/docs/latest/api/" rel="noopener nofollow" class="external-link" href="https://nodejs.org/docs/latest/api/" target="_blank">Node.js</a> and TypeScript, and converting <a data-tooltip-position="top" aria-label="https://www.ibm.com/docs/en/iotdmfz/11.3?topic=criteria-sql-where-clause-specifications" rel="noopener nofollow" class="external-link" href="https://www.ibm.com/docs/en/iotdmfz/11.3?topic=criteria-sql-where-clause-specifications" target="_blank">SQL WHERE</a> clauses to its format can be very useful. We will use Jison to create a parser that performs this conversion efficiently.<br><br>The challenge is to convert an SQL WHERE query string into a Prisma-compatible object. The queries can have an infinite level of nesting and must handle common operators like =, !=, &lt;&gt;, LIKE, AND, OR, NOT, &gt;, &lt;, &gt;=, and &lt;=.<br><br>We will use Jison to create a parser that converts these SQL WHERE clauses into Prisma format.<br><br>First, install Jison globally on your system:<br>npm install -g jison
<br>Second, a recommendation:<br>npm install --save-dev @types/node
<br><br>Create a file named where_condition.jison with the following content:<br>%lex

%options case-insensitive

%%

\s+                            /* skip whitespace */
"("                            return '('
")"                            return ')'
"="                            return '='
"!="                           return '!='
"&lt;&gt;"                           return '!='
"&gt;="                           return '&gt;='
"&lt;="                           return '&lt;='
"&gt;"                            return '&gt;'
"&lt;"                            return '&lt;'
"AND"                          return 'AND'
"OR"                           return 'OR'
"NOT"                          return 'NOT'
"LIKE"                         return 'LIKE'
[-]?([0-9]+([.][0-9]*)?|[.][0-9]+) return 'NUMBER'
\"([^\\\"]|\\.)*\"             return 'IDENTIFIER'
\'([^\\\']|\\.)*\'             return 'STRING'
[0-9]+                         return 'NUMBER'
[a-zA-Z_][a-zA-Z0-9_]*         return 'IDENTIFIER'
&lt;&lt;EOF&gt;&gt;                        return 'EOF'
.                              return 'INVALID'

/lex

%start conditions

%%

conditions
  : expression EOF { return $1; }
  ;

expression
  : term
  | expression AND term { $$ = { type: 'AndExpression', left: $1, right: $3 }; }
  | expression OR term { $$ = { type: 'OrExpression', left: $1, right: $3 }; }
  ;

term
  : factor
  | NOT factor { $$ = { type: 'NotExpression', value: $2 }; }
  ;

factor
  : primary
  | '(' expression ')' { $$ = $2; }
  ;

primary
  : IDENTIFIER operator value { $$ = { type: 'Condition', left: $1, operator: $2, right: $3 }; }
  ;

operator
  : '=' { $$ = $1; }
  | '!=' { $$ = $1; }
  | '&gt;=' { $$ = $1; }
  | '&lt;=' { $$ = $1; }
  | '&gt;' { $$ = $1; }
  | '&lt;' { $$ = $1; }
  | LIKE { $$ = $1; }
  ;

value
  : STRING { $$ = $1; }
  | NUMBER { $$ = $1; }
  ;

<br><br>Generate the parser using Jison:<br>jison where_condition.jison
<br>This will generate a where_condition.js file that contains the parser.<br><br>Create a TypeScript file prisma.ts to use the generated parser:<br>const parser = require('./where_condition');

interface PrismaWhereInput {
  AND?: PrismaWhereInput | PrismaWhereInput[];
  OR?: PrismaWhereInput | PrismaWhereInput[];
  NOT?: PrismaWhereInput | PrismaWhereInput[];
  [key: string]: any;
}

const convertSQLToPrisma = (query: string): PrismaWhereInput =&gt; {
  const ast = parser.parse(query);
  console.log(`AST: ${JSON.stringify(ast, null, 2)}\n`);

  const parseCondition = (condition: any): PrismaWhereInput =&gt; {
    const { left, operator, right } = condition;
    const prismaOperator = operator === '&lt;&gt;' ? '!=' : operator;
    return { [left.replace(/["]/g, '')]: { [prismaOperator]: right.replace(/['"]/g, '') } };
  };

  const convertAstToPrisma = (node: any): PrismaWhereInput =&gt; {
    if (node.type === 'AndExpression') {
      return { AND: [convertAstToPrisma(node.left), convertAstToPrisma(node.right)] };
    }
    if (node.type === 'OrExpression') {
      return { OR: [convertAstToPrisma(node.left), convertAstToPrisma(node.right)] };
    }
    if (node.type === 'NotExpression') {
      return { NOT: [convertAstToPrisma(node.value)] };
    }
    return parseCondition(node);
  };

  return convertAstToPrisma(ast);
};

// test some queries
const testQueries = [
  `("name" like '%Car%' AND "date" &gt; '2024-08-03')`,
  `("name" = 'Car' OR "date" &lt; '2024-08-03' AND "categoryId" = '9')`,
  `("name" = 'Car' AND ("date" &gt; '2024-08-03' OR "categoryId" = '9'))`,
  `("name" = 'Car' AND ("date" &gt; '2024-08-03' AND "categoryId" = '9'))`,
  `("name" &lt;&gt; 'Car' OR ("date" &lt; '2024-08-03' AND "categoryId" != '9'))`,
  `("name" = 'Car' AND "date" &gt; '2024-08-03' AND "amount" &lt; '123' AND "merchantId" = '44')`,
  `(("name" = 'Car' AND "date" &gt; '2024-08-03') OR ("categoryId" = '9' AND "amount" &gt; '123'))`,
  `(("name" like '%Car%' OR "categoryId" = '9') AND ("amount" &gt;= '123' AND "merchantId" &lt;&gt; '44'))`,
  `("name" = 'Car' AND ("date" &gt; '2024-08-03' OR ("categoryId" = '9' AND "amount" &gt; '123')))`,
  `("name" like '%Car%' OR "date" &gt; '2024-08-03' OR "categoryId" = '9' OR ("amount" &gt; '123' AND "categoryId" != '19'))`,
  `(("name" = 'Car' AND ("date" &gt; '2024-08-03' OR "categoryId" = '9')) OR ("amount" &gt; '123' AND "categoryId" != '19'))`
];

testQueries.forEach((query, index) =&gt; {
  console.log(`\nTest Query ${index + 1}: ${query}\n`);
  const prismaQuery = convertSQLToPrisma(query);
  console.log(JSON.stringify(prismaQuery, null, 2));
});

<br><br>{
  "compilerOptions": {
    "target": "ES2016",
    "module": "commonjs",
    "lib": ["ES2016", "DOM"],
    "esModuleInterop": true
  }
}
<br><br>tsc prisma.ts
node prisma.js
<br><br>The output of the program should correctly reflect the parsed and combined conditions for all provided query variants, including those using the &lt;&gt; operator and nested parentheses.<br>
Test Query 1: ("name" like '%Car%' AND "date" &gt; '2024-08-03')

AST: {
  "type": "AndExpression",
  "left": {
    "type": "Condition",
    "left": "\"name\"",
    "operator": "like",
    "right": "'%Car%'"
  },
  "right": {
    "type": "Condition",
    "left": "\"date\"",
    "operator": "&gt;",
    "right": "'2024-08-03'"
  }
}

{
  "AND": [
    {
      "name": {
        "like": "%Car%"
      }
    },
    {
      "date": {
        "&gt;": "2024-08-03"
      }
    }
  ]
}

Test Query 2: ("name" = 'Car' OR "date" &lt; '2024-08-03' AND "categoryId" = '9')

AST: {
  "type": "AndExpression",
  "left": {
    "type": "OrExpression",
    "left": {
      "type": "Condition",
      "left": "\"name\"",
      "operator": "=",
      "right": "'Car'"
    },
    "right": {
      "type": "Condition",
      "left": "\"date\"",
      "operator": "&lt;",
      "right": "'2024-08-03'"
    }
  },
  "right": {
    "type": "Condition",
    "left": "\"categoryId\"",
    "operator": "=",
    "right": "'9'"
  }
}

{
  "AND": [
    {
      "OR": [
        {
          "name": {
            "=": "Car"
          }
        },
        {
          "date": {
            "&lt;": "2024-08-03"
          }
        }
      ]
    },
    {
      "categoryId": {
        "=": "9"
      }
    }
  ]
}

Test Query 3: ("name" = 'Car' AND ("date" &gt; '2024-08-03' OR "categoryId" = '9'))

AST: {
  "type": "AndExpression",
  "left": {
    "type": "Condition",
    "left": "\"name\"",
    "operator": "=",
    "right": "'Car'"
  },
  "right": {
    "type": "OrExpression",
    "left": {
      "type": "Condition",
      "left": "\"date\"",
      "operator": "&gt;",
      "right": "'2024-08-03'"
    },
    "right": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "=",
      "right": "'9'"
    }
  }
}

{
  "AND": [
    {
      "name": {
        "=": "Car"
      }
    },
    {
      "OR": [
        {
          "date": {
            "&gt;": "2024-08-03"
          }
        },
        {
          "categoryId": {
            "=": "9"
          }
        }
      ]
    }
  ]
}

Test Query 4: ("name" = 'Car' AND ("date" &gt; '2024-08-03' AND "categoryId" = '9'))

AST: {
  "type": "AndExpression",
  "left": {
    "type": "Condition",
    "left": "\"name\"",
    "operator": "=",
    "right": "'Car'"
  },
  "right": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"date\"",
      "operator": "&gt;",
      "right": "'2024-08-03'"
    },
    "right": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "=",
      "right": "'9'"
    }
  }
}

{
  "AND": [
    {
      "name": {
        "=": "Car"
      }
    },
    {
      "AND": [
        {
          "date": {
            "&gt;": "2024-08-03"
          }
        },
        {
          "categoryId": {
            "=": "9"
          }
        }
      ]
    }
  ]
}

Test Query 5: ("name" &lt;&gt; 'Car' OR ("date" &lt; '2024-08-03' AND "categoryId" != '9'))

AST: {
  "type": "OrExpression",
  "left": {
    "type": "Condition",
    "left": "\"name\"",
    "operator": "&lt;&gt;",
    "right": "'Car'"
  },
  "right": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"date\"",
      "operator": "&lt;",
      "right": "'2024-08-03'"
    },
    "right": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "!=",
      "right": "'9'"
    }
  }
}

{
  "OR": [
    {
      "name": {
        "!=": "Car"
      }
    },
    {
      "AND": [
        {
          "date": {
            "&lt;": "2024-08-03"
          }
        },
        {
          "categoryId": {
            "!=": "9"
          }
        }
      ]
    }
  ]
}

Test Query 6: ("name" = 'Car' AND "date" &gt; '2024-08-03' AND "amount" &lt; '123' AND "merchantId" = '44')

AST: {
  "type": "AndExpression",
  "left": {
    "type": "AndExpression",
    "left": {
      "type": "AndExpression",
      "left": {
        "type": "Condition",
        "left": "\"name\"",
        "operator": "=",
        "right": "'Car'"
      },
      "right": {
        "type": "Condition",
        "left": "\"date\"",
        "operator": "&gt;",
        "right": "'2024-08-03'"
      }
    },
    "right": {
      "type": "Condition",
      "left": "\"amount\"",
      "operator": "&lt;",
      "right": "'123'"
    }
  },
  "right": {
    "type": "Condition",
    "left": "\"merchantId\"",
    "operator": "=",
    "right": "'44'"
  }
}

{
  "AND": [
    {
      "AND": [
        {
          "AND": [
            {
              "name": {
                "=": "Car"
              }
            },
            {
              "date": {
                "&gt;": "2024-08-03"
              }
            }
          ]
        },
        {
          "amount": {
            "&lt;": "123"
          }
        }
      ]
    },
    {
      "merchantId": {
        "=": "44"
      }
    }
  ]
}

Test Query 7: (("name" = 'Car' AND "date" &gt; '2024-08-03') OR ("categoryId" = '9' AND "amount" &gt; '123'))

AST: {
  "type": "OrExpression",
  "left": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"name\"",
      "operator": "=",
      "right": "'Car'"
    },
    "right": {
      "type": "Condition",
      "left": "\"date\"",
      "operator": "&gt;",
      "right": "'2024-08-03'"
    }
  },
  "right": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "=",
      "right": "'9'"
    },
    "right": {
      "type": "Condition",
      "left": "\"amount\"",
      "operator": "&gt;",
      "right": "'123'"
    }
  }
}

{
  "OR": [
    {
      "AND": [
        {
          "name": {
            "=": "Car"
          }
        },
        {
          "date": {
            "&gt;": "2024-08-03"
          }
        }
      ]
    },
    {
      "AND": [
        {
          "categoryId": {
            "=": "9"
          }
        },
        {
          "amount": {
            "&gt;": "123"
          }
        }
      ]
    }
  ]
}

Test Query 8: (("name" like '%Car%' OR "categoryId" = '9') AND ("amount" &gt;= '123' AND "merchantId" &lt;&gt; '44'))

AST: {
  "type": "AndExpression",
  "left": {
    "type": "OrExpression",
    "left": {
      "type": "Condition",
      "left": "\"name\"",
      "operator": "like",
      "right": "'%Car%'"
    },
    "right": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "=",
      "right": "'9'"
    }
  },
  "right": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"amount\"",
      "operator": "&gt;=",
      "right": "'123'"
    },
    "right": {
      "type": "Condition",
      "left": "\"merchantId\"",
      "operator": "&lt;&gt;",
      "right": "'44'"
    }
  }
}

{
  "AND": [
    {
      "OR": [
        {
          "name": {
            "like": "%Car%"
          }
        },
        {
          "categoryId": {
            "=": "9"
          }
        }
      ]
    },
    {
      "AND": [
        {
          "amount": {
            "&gt;=": "123"
          }
        },
        {
          "merchantId": {
            "!=": "44"
          }
        }
      ]
    }
  ]
}

Test Query 9: ("name" = 'Car' AND ("date" &gt; '2024-08-03' OR ("categoryId" = '9' AND "amount" &gt; '123')))

AST: {
  "type": "AndExpression",
  "left": {
    "type": "Condition",
    "left": "\"name\"",
    "operator": "=",
    "right": "'Car'"
  },
  "right": {
    "type": "OrExpression",
    "left": {
      "type": "Condition",
      "left": "\"date\"",
      "operator": "&gt;",
      "right": "'2024-08-03'"
    },
    "right": {
      "type": "AndExpression",
      "left": {
        "type": "Condition",
        "left": "\"categoryId\"",
        "operator": "=",
        "right": "'9'"
      },
      "right": {
        "type": "Condition",
        "left": "\"amount\"",
        "operator": "&gt;",
        "right": "'123'"
      }
    }
  }
}

{
  "AND": [
    {
      "name": {
        "=": "Car"
      }
    },
    {
      "OR": [
        {
          "date": {
            "&gt;": "2024-08-03"
          }
        },
        {
          "AND": [
            {
              "categoryId": {
                "=": "9"
              }
            },
            {
              "amount": {
                "&gt;": "123"
              }
            }
          ]
        }
      ]
    }
  ]
}

Test Query 10: ("name" like '%Car%' OR "date" &gt; '2024-08-03' OR "categoryId" = '9' OR ("amount" &gt; '123' AND "categoryId" != '19'))

AST: {
  "type": "OrExpression",
  "left": {
    "type": "OrExpression",
    "left": {
      "type": "OrExpression",
      "left": {
        "type": "Condition",
        "left": "\"name\"",
        "operator": "like",
        "right": "'%Car%'"
      },
      "right": {
        "type": "Condition",
        "left": "\"date\"",
        "operator": "&gt;",
        "right": "'2024-08-03'"
      }
    },
    "right": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "=",
      "right": "'9'"
    }
  },
  "right": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"amount\"",
      "operator": "&gt;",
      "right": "'123'"
    },
    "right": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "!=",
      "right": "'19'"
    }
  }
}

{
  "OR": [
    {
      "OR": [
        {
          "OR": [
            {
              "name": {
                "like": "%Car%"
              }
            },
            {
              "date": {
                "&gt;": "2024-08-03"
              }
            }
          ]
        },
        {
          "categoryId": {
            "=": "9"
          }
        }
      ]
    },
    {
      "AND": [
        {
          "amount": {
            "&gt;": "123"
          }
        },
        {
          "categoryId": {
            "!=": "19"
          }
        }
      ]
    }
  ]
}

Test Query 11: (("name" = 'Car' AND ("date" &gt; '2024-08-03' OR "categoryId" = '9')) OR ("amount" &gt; '123' AND "categoryId" != '19'))

AST: {
  "type": "OrExpression",
  "left": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"name\"",
      "operator": "=",
      "right": "'Car'"
    },
    "right": {
      "type": "OrExpression",
      "left": {
        "type": "Condition",
        "left": "\"date\"",
        "operator": "&gt;",
        "right": "'2024-08-03'"
      },
      "right": {
        "type": "Condition",
        "left": "\"categoryId\"",
        "operator": "=",
        "right": "'9'"
      }
    }
  },
  "right": {
    "type": "AndExpression",
    "left": {
      "type": "Condition",
      "left": "\"amount\"",
      "operator": "&gt;",
      "right": "'123'"
    },
    "right": {
      "type": "Condition",
      "left": "\"categoryId\"",
      "operator": "!=",
      "right": "'19'"
    }
  }
}

{
  "OR": [
    {
      "AND": [
        {
          "name": {
            "=": "Car"
          }
        },
        {
          "OR": [
            {
              "date": {
                "&gt;": "2024-08-03"
              }
            },
            {
              "categoryId": {
                "=": "9"
              }
            }
          ]
        }
      ]
    },
    {
      "AND": [
        {
          "amount": {
            "&gt;": "123"
          }
        },
        {
          "categoryId": {
            "!=": "19"
          }
        }
      ]
    }
  ]
}
<br><br>By using Jison to create a custom parser, we can efficiently convert SQL WHERE clauses into Prisma queries. This approach ensures that complex SQL expressions are accurately translated, making it easier to work with Prisma in a TypeScript environment.<br><br>
<br><a rel="noopener nofollow" class="external-link" href="https://www.prisma.io/docs/getting-started/quickstart" target="_blank">https://www.prisma.io/docs/getting-started/quickstart</a>
<br><a rel="noopener nofollow" class="external-link" href="https://gerhobbelt.github.io/jison/docs/" target="_blank">https://gerhobbelt.github.io/jison/docs/</a>
<br><a rel="noopener nofollow" class="external-link" href="https://www.typescriptlang.org/docs/" target="_blank">https://www.typescriptlang.org/docs/</a>
<br><a rel="noopener nofollow" class="external-link" href="https://nodejs.org/docs/latest/api/" target="_blank">https://nodejs.org/docs/latest/api/</a>
<br><a rel="noopener nofollow" class="external-link" href="https://blog.ansi.org/sql-standard-iso-iec-9075-2023-ansi-x3-135/" target="_blank">https://blog.ansi.org/sql-standard-iso-iec-9075-2023-ansi-x3-135/</a>
]]></description><link>https://rafageist.com/blog/en/2024/converting-sql-where-clauses-to-prisma-queries-using-typescript-and-jison.html</link><guid isPermaLink="false">Blog/en/2024/Converting SQL WHERE Clauses to Prisma Queries Using TypeScript and Jison.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Wed, 07 Aug 2024 00:19:42 GMT</pubDate></item><item><title><![CDATA[Data Composition Made Easy with cop in Div PHP Template Engine]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:PHP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PHP</a> <a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:JSON" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JSON</a> <a class="tag" href="https://rafageist.com/?query=tag:Data/Transformation" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Data/Transformation</a> 
 <br><a href="https://rafageist.com?query=tag:PHP" class="tag" target="_blank" rel="noopener nofollow">#PHP</a> <a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:JSON" class="tag" target="_blank" rel="noopener nofollow">#JSON</a> <a href="https://rafageist.com?query=tag:Data/Transformation" class="tag" target="_blank" rel="noopener nofollow">#Data/Transformation</a> <br>​<img alt="Populate from JSON using the  Compose Object Properties function  of Div PHP Template Engine.png" src="https://rafageist.com/lib/media/populate-from-json-using-the-compose-object-properties-function-of-div-php-template-engine.png"><br>Let's kick off with a simple yet powerful use case of the cop function within <a data-tooltip-position="top" aria-label="https://divengine.org/documentation/div-php-template-engine/div-php-template-engine.html" rel="noopener nofollow" class="external-link" href="https://divengine.org/documentation/div-php-template-engine/div-php-template-engine.html" target="_blank">Div PHP Template Engine</a>, part of <a data-href="Divengine Open Source Ecosystem" href="https://rafageist.com/projects/divengine-open-source-ecosystem.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiOrganizationChart" aria-label="RiOrganizationChart" data-icon="RiOrganizationChart" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M15 3C15.5523 3 16 3.44772 16 4V8C16 8.55228 15.5523 9 15 9H13V11H17C17.5523 11 18 11.4477 18 12V15H20C20.5523 15 21 15.4477 21 16V20C21 20.5523 20.5523 21 20 21H14C13.4477 21 13 20.5523 13 20V16C13 15.4477 13.4477 15 14 15H16V13H8V15H10C10.5523 15 11 15.4477 11 16V20C11 20.5523 10.5523 21 10 21H4C3.44772 21 3 20.5523 3 20V16C3 15.4477 3.44772 15 4 15H6V12C6 11.4477 6.44772 11 7 11H11V9H9C8.44772 9 8 8.55228 8 8V4C8 3.44772 8.44772 3 9 3H15ZM9 17H5V19H9V17ZM19 17H15V19H19V17ZM14 5H10V7H14V5Z"></path></svg></span>Divengine Open Source Ecosystem</a>. Consider a straightforward scenario where you have two PHP arrays, and you want to effortlessly copy data from one to another.<br>Example: Suppose we have two arrays representing user data:<br>&lt;?php

// Source array

$sourceData = [
  'id' =&gt; 1, 
  'name' =&gt; 
  'John Doe',
  'email' =&gt; 'john.doe@example.com'
];

// Destination array with default values

$destinationData = [ 
  'id' =&gt; 0, 
  'name' =&gt; '', 
  'email' =&gt; ''
];
<br>Now, let's use the cop function to copy data from the source array to the destination array:<br>use divengine\div;

include "vendor/autoload.php";

// Using cop to copy data

div::cop($destinationData, $sourceData);

// Output the updated destination array

var_dump($destinationData);
<br>In this example, cop effortlessly copies data from the source array to the destination array, ensuring that the destination array now reflects the values from the source array.<br>Now, let's take it a step further and explore how cop seamlessly handles data from different sources, including JSON.<br>JSON (JavaScript Object Notation) is just one way to store and transport data. Div PHP Template Engine simplifies the process of loading data from JSON using either PHP's built-in functions or the static method div::jsonDecode().<br>Suppose we have a JSON payload.&nbsp;Now, let's load this JSON data into a PHP array using div::jsonDecode() and then use cop to update our destination array:<br>// JSON payload

$jsonPayload = '{ "id": 2, "name": "Jane Doe", "email": "jane.doe@example.com" }';

// Loading JSON data into a PHP array

$jsonData = div::jsonDecode($jsonPayload, true);

// Using cop to update the destination array

div::cop($destinationData, $jsonData);

// Output the updated destination array

var_dump($destinationData);
<br>This showcases the versatility of cop in seamlessly handling data from various sources, making data composition a breeze within Div PHP Template Engine.<br>Now look at the following complex example:<br>&lt;?php

class Geo
{
    public float $lat;
    public float $lng;
}

class Address
{
    public string $street;
    public string $suite;
    public string $city;
    public string $zipcode;

    public Geo $geo;
}

class User
{
    public int $id;
    public string $name;
    public string $username;

    /** @var array&lt;Address&gt; */
    public array $addresses;
}

$rawJson = '{
	"id": 1,
	"name": "John Doe",
	"username": "johndoe",
	"addresses": [
		{
			"street": "Kulas Light",
			"suite": "Apt. 556",
			"city": "Gwenborough",
			"zipcode": "92998-3874",
			"geo": {
				"lat": -37.3159,
				"lng": 81.1496
			}
		},
		{
			"street": "Sunset Boulevard",
			"suite": "Apt. 123",
			"city": "Los Angeles",
			"zipcode": "90210",
			"geo": {
				"lat": 34.0522,
				"lng": -118.2437
			}
		}
	]
}';

$u = new User;
$jsonObject = json_decode($rawJson);
div::cop($u, $jsonObject, strict: false);
print_r($u);
<br>As you can see, the cop function was responsible for recognizing the classes, arrays and other elements and placing each data in its place.<br>User Object
(
    [id] =&gt; 1
    [name] =&gt; John Doe
    [username] =&gt; johndoe
    [addresses] =&gt; Array
        (
            [0] =&gt; Address Object
                (
                    [street] =&gt; Kulas Light
                    [suite] =&gt; Apt. 556
                    [city] =&gt; Gwenborough
                    [zipcode] =&gt; 92998-3874
                    [geo] =&gt; Geo Object
                        (
                            [lat] =&gt; -37.3159
                            [lng] =&gt; 81.1496
                        )

                )

            [1] =&gt; Address Object
                (
                    [street] =&gt; Sunset Boulevard
                    [suite] =&gt; Apt. 123
                    [city] =&gt; Los Angeles
                    [zipcode] =&gt; 90210
                    [geo] =&gt; Geo Object
                        (
                            [lat] =&gt; 34.0522
                            [lng] =&gt; -118.2437
                        )

                )

        )

)
<br>​]]></description><link>https://rafageist.com/blog/en/2024/data-composition-made-easy-with-cop-in-div-php-template-engine.html</link><guid isPermaLink="false">Blog/en/2024/Data Composition Made Easy with cop in Div PHP Template Engine.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 16 Mar 2024 18:00:04 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/populate-from-json-using-the-compose-object-properties-function-of-div-php-template-engine.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/populate-from-json-using-the-compose-object-properties-function-of-div-php-template-engine.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[JavaScript - Implementing Safe Assignment Without new Operator]]> | rafageist</title><description><![CDATA[ 
 <br>First of all, I appreciate the effort and thought that has gone into the proposal for the ?= operator. It's clear that the intention is to simplify and standardize error handling in JavaScript, which is an important goal.<br>However, I believe that this proposal might not be necessary given that we can achieve similar results using existing JavaScript features. Specifically, we can handle errors and return results in a concise and readable way by using simple wrapper functions. Here's an example of how this can be done:<br>const synco = (operation) =&gt; {
   let result = null;
   let error = null;

   try {
      result = operation(); 
   } catch(err) {
      error = err;
   }

   return [error, result];
};

const asynco = async (operation) =&gt; {
   let result = null;
   let error = null;

   try {
      result = await operation();
   } catch(err) {
      error = err;
   }

   return [error, result];
};

<br>Moreover, if we use our imagination, we can extend these functions to return not just tuples, but also objects or any other robust structures that might suit the specific needs of a given application. This flexibility allows developers to tailor their error handling to the exact requirements of their projects, without being constrained to a single approach. For example, we could return an object with additional metadata, logs, or context about the error and the operation, providing a more comprehensive solution.<br>Sync example<br>// Operation to be executed synchronously
const parseJson = () =&gt; {
   const data = JSON.parse('{"key": "value"}'); // Example of a potentially error-prone operation
   return data.key;
};

// Execute the operation using synco
const [error, result] = synco(parseJson);

if (error) {
   console.error('An error occurred:', error.message);
} else {
   console.log('Result:', result); // Output: "Result: value"
}
<br>Async example<br>// Operation to be executed asynchronously
const fetchData = async () =&gt; {
   const response = await fetch('https://api.example.com/data');
   const data = await response.json();
   return data.key;
};

// Execute the operation using asynco
const [error, result] = await asynco(fetchData);

if (error) {
   console.error('An error occurred:', error.message);
} else {
   console.log('Result:', result); // Output: the value of data.key if successful
}
<br>Key Points:<br>
<br>Simplicity: These functions encapsulate the try-catch logic, returning an error-result tuple similar to what the ?= operator aims to achieve.
<br>Compatibility: Both sync and async operations are handled in a clean and straightforward manner.
<br>No Language Changes Needed: This approach doesn't require any changes to the JavaScript language, and it can be easily implemented today without waiting for language updates.
<br>Conclusion:<br>While the ?= operator is an interesting idea, it's important to consider whether introducing a new operator is justified when we can already accomplish the same goals with existing language features. The above functions provide a simple, readable, and effective way to handle errors without adding complexity to the language.<br>I'd love to hear thoughts from the community on this approach and whether it might be a sufficient alternative to the proposed operator.<br>Thanks for considering my input!]]></description><link>https://rafageist.com/blog/en/2024/javascript-implementing-safe-assignment-without-new-operator.html</link><guid isPermaLink="false">Blog/en/2024/JavaScript - Implementing Safe Assignment Without new Operator.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 14 Sep 2024 17:54:04 GMT</pubDate></item><item><title><![CDATA[Legacy Bytes' strategy to pay off technical debt]]> | rafageist</title><description><![CDATA[ 
 <br><img alt="Legacy bytes.png" src="https://rafageist.com/lib/media/legacy-bytes.png"><br>
Technical debt is a recurring concept in software development, but it is not always easy to identify and even less clear how to define a strategy to tackle it. In this article, we will explore how to detect technical debt, the steps to address it, and the importance of measuring our progress with a strategy based on "legacy bytes".<br><br>The first step in dealing with technical debt is to detect its symptoms. Technical debt is not always evident, but certain signs indicate its presence. These signs include code that is difficult to understand, functionalities that are hard to modify without causing errors, outdated architectures, or designs that no longer adhere to best practices. In short, any part of the software that creates difficulties, risks, or high costs when attempting to make changes can be considered technical debt.<br><br>Once we have identified the symptoms, the next step is to understand what has been done and how it is implemented. This means taking an inventory of the current system: analyzing the code, architecture, dependencies, and any other relevant pieces. This inventory is crucial to understanding the terrain we need to navigate. Then, we must define the ideal target, whether it is a new design, a renewed architecture, or a cleaner and more modular code structure. This definition must be concrete and physically represented in a new part of the project or even in a parallel project.<br><br>To measure the progress of addressing technical debt, I propose using a metric called "legacy bytes". The idea is to measure how many bytes of the inherited system remain as we advance in the refactoring process. This includes not only code but also resources, assets, configurations, etc., excluding third-party frameworks and libraries. Although other indicators could be used, such as the number of files, classes, or methods, I prefer bytes because technical debt can manifest in many forms—from unnecessary keywords to poorly used operators. We could even measure the size of files in bytes, as every detail counts when it comes to technical debt.<br><br>There are several ways to tackle technical debt: we could start from scratch, patch the code, refactor parts, or use what I call "remanufacturing", which is the strategy I propose. This strategy involves gradually moving code from the legacy project to the new structure. It is not about copying and pasting but about moving code to its new place in an organized way, applying refactoring and improvements at each step. This involves adopting best practices, such as following SOLID principles (which include the separation of responsibilities) and ensuring automated tests for every change.<br>Each movement involves constant testing and the iterative release of improved versions. It is important to emphasize that this process is physical: the code is moved from one structure to another, which may require temporary implementations to keep the system running. This is similar to what happens in many labor jobs, such as construction or plumbing, where an old part of the structure is sometimes abandoned or destroyed and replaced with a new one, although the old one may still be used temporarily until it is no longer needed. In this context, it is important to distinguish between patching, refactoring, and remanufacturing: a patch is generally a piece of code added to make something work; refactoring involves modifying an existing part of the code to improve it without changing its functionality; while remanufacturing is like a version from scratch but done gradually and can coexist with the old code if necessary. By moving and transforming the code, we also test whether the new design is viable and works in practice, something that is not as easy if we decide to rebuild everything from scratch.<br><br>As we move the code, we measure the size of the remaining legacy code and compare it to the original size. This gives us a quantitative measure of the progress made and how much work remains to be done.<br>Team collaboration is essential in this process. This includes documenting each advance, holding regular meetings to discuss progress, and ensuring that each piece moved or refactored is well-tested. Involving the most experienced team members and ensuring they lead the process is also key to making the transition with the proper knowledge and without risking the system's functionality.<br><br>Tackling technical debt is not an easy task, but with a well-defined strategy and a remanufacturing approach, it is possible to move forward in an orderly manner, minimizing risks, and ensuring that each step has a positive impact. Moving code consciously, measuring progress, and working collaboratively allows us to improve our systems without needing to start from scratch. Ultimately, it is about working with what we have, improving it, and making it sustainable in the long term.]]></description><link>https://rafageist.com/blog/en/2024/legacy-bytes'-strategy-to-pay-off-technical-debt.html</link><guid isPermaLink="false">Blog/en/2024/Legacy Bytes' strategy to pay off technical debt.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:42:50 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/legacy-bytes.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/legacy-bytes.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Optimizing Symfony UUIDv4 Generator]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:Programming" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Programming</a> <a class="tag" href="https://rafageist.com/?query=tag:PHP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PHP</a> <a class="tag" href="https://rafageist.com/?query=tag:Optimization" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Optimization</a> <a class="tag" href="https://rafageist.com/?query=tag:Symfony" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Symfony</a> <a class="tag" href="https://rafageist.com/?query=tag:UUID" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#UUID</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:Programming" class="tag" target="_blank" rel="noopener nofollow">#Programming</a> <a href="https://rafageist.com?query=tag:PHP" class="tag" target="_blank" rel="noopener nofollow">#PHP</a> <a href="https://rafageist.com?query=tag:Optimization" class="tag" target="_blank" rel="noopener nofollow">#Optimization</a> <a href="https://rafageist.com?query=tag:Symfony" class="tag" target="_blank" rel="noopener nofollow">#Symfony</a> <a href="https://rafageist.com?query=tag:UUID" class="tag" target="_blank" rel="noopener nofollow">#UUID</a><br><br>The UUIDv4 generation algorithm implemented in Symfony's Variant 1 involves the creation of a complete UUID string with subsequent replacements of specific positions. This process is designed to replace the 19th character based on a predetermined value. However, a potential area for improvement lies in the generation of the entire string, introducing redundancy. Let's delve into the algorithm and subsequently discuss the specific challenge associated with replacing the 19th character.<br><a rel="noopener nofollow" class="external-link" href="https://github.com/symfony/symfony/pull/53963" target="_blank">https://github.com/symfony/symfony/pull/53963</a><br>
// Generate 36 random hex characters (144 bits) 
$uuid = bin2hex(random_bytes(18)); 

// Insert dashes to match the UUID format 
$uuid[8] = $uuid[13] = $uuid[18] = $uuid[23] = '-'; 

// Set the UUID version to 4 
$uuid[14] = '4'; 

// Set the UUID variant: the 19th char must be in [8, 9, a, b] 
$uuid[19] = ['8', '9', 'a', 'b', '8', '9', 
			 'a', 'b', 'c' =&gt; '8', 'd' =&gt; '9', 
			 'e' =&gt; 'a', 'f' =&gt; 'b'][$uuid[19]] ?? $uuid[19];
<br><br>
<br>
Redundant Character Generation: The process generates characters that are later replaced, introducing unnecessary computation.

<br>
Randomness Reduction: The current variant employs a deterministic assignment based on a character mapping. This results in a loss of randomness in the generation of the 19th character since it is conditioned by its original value.

<br>
Array Access and Null Coalescing: Array access and the null coalescing operator (??) are used to assign a new value to the 19th character. However, this may introduce some complexity and impact performance, especially if the mapping array is extensive.

<br><br>
<br>Explore Strategies without Direct Mapping: Consider alternatives that don't rely on direct mapping, such as arithmetic operations or logical combinations to determine the new value of the 19th character.
<br>Reduce Secondary Actions: The insertion of dashes and the assignment of the version number could also be areas for improvement to optimize performance.
<br>Eliminate Null Coalescing: Evaluate whether the null coalescing operator is necessary or if the assignment can be simplified without the need for a null coalescing operator.
<br>Maintain Randomness: Look for methods that preserve randomness in the generation, even when making specific adjustments.
<br>Generate Characters Once: Explore strategies to generate each character only once, eliminating the need for subsequent replacements.
<br>Optimize Dash Insertion: Evaluate if there are more efficient ways to insert dashes and set the version number without requiring replacements.
<br>Streamline the Process: Consider streamlining the overall process to minimize computational overhead and enhance performance.
<br>By addressing these aspects, we aim to not only improve the efficiency of the UUIDv4 generation but also ensure that each character is generated with purpose, avoiding unnecessary computations and replacements. This optimization becomes crucial when dealing with a high volume of UUID generation requests.<br>These suggestions are intended to encourage reflection on the current implementation and explore approaches that may enhance both performance and randomness in UUIDv4 generation.<br><br>The original implementation relied on random_bytes followed by bin2hex, proving to be computationally expensive. The immediate target was to alleviate the bottleneck caused by hex conversion while preserving the uniqueness of generated UUIDs.<br>The original implementation used:<br>$uuid = bin2hex(random_bytes(18));
<br>Efforts were made to optimize this process due to its computational cost. Various strategies were explored to generate the required 36 characters without relying on hex conversion. The goal was to find a faster alternative to random_bytes followed by bin2hex while preserving the uniqueness of the generated UUIDs.<br>Attempts included bitwise operations, mathematical transformations, and random selection. However, none of these strategies proved more efficient than the current implementation. The efficiency of generating 36 characters from the set [0-9a-f] and subsequently replacing specific positions remained a challenge to surpass.<br>While exploring alternatives, the focus shifted to eliminating unnecessary character generation and finding a more direct method without compromising randomness or uniqueness. The discussion on this topic involves various strategies and considerations made in the pursuit of optimizing this crucial aspect of UUIDv4 generation.<br>The investigation also delved into the possibility of directly working with buffers or memory, akin to C++, to enhance efficiency. However, limitations within PHP and the need for cross-platform compatibility presented obstacles.<br><br>In my quest to enhance Symfony's UUIDv4 generation, one significant hurdle lies in the hex conversion process. Converting the binary data produced by random_bytes into a hexadecimal representation using bin2hex introduces a notable overhead. This seemingly innocent step consumes a considerable chunk of the overall processing time, potentially surpassing 50%.<br>Despite my endeavors to explore alternative methods—experimenting with bitwise operations, mathematical transformations, and various strategies—the elusive breakthrough to sidestep this hex conversion cost remains elusive.<br>The challenge of hex conversion persists, demanding further exploration to discover potential innovations in this crucial aspect of optimizing UUIDv4 generation.<br><br><br>Uses the least significant 2 bits of the first character to select the 19th character replacement. The first character's 2 least significant bits determine the replacement.<br>$uuid[19] = ['8', '9', 'a', 'b'][ord($uuid[0]) &amp; 0x3];
<br><br>Utilizes mathematical operations on the ASCII value of the 19th character for replacement. The ASCII value undergoes transformations based on a specific formula.<br>$o = ord($uuid[19]);

$c = ((int)(($o + 3) / 100)) * 41 + (($o % 97) % 2) + 56;

$uuid[19] = chr($c);
<br><br>Applies bitwise and mathematical operations to the ASCII value of the 19th character for replacement. Complex bitwise operations and mathematical transformations are employed.<br>$o = ord($uuid[19]) &amp; 0x3;

$x = (($o + 10) % 12);

$uuid[19] = chr($x + 31 * ((int)($x / 10)) + 56);
<br><br>Randomly selects a replacement for the 19th character. A replacement is chosen randomly from available options.<br>$uuid[19] = ['8', '9', 'a', 'b'][random_int(0, 3)];
<br><br>Uses the current timestamp modulo 4 to determine the 19th character replacement. The timestamp remainder after division by 4 selects the replacement.<br>$uuid[19] = ['8', '9', 'a', 'b'][(int) (time() % 4)];
<br><br>Incorporates the Process ID (PID) to determine the 19th character replacement. The PID is used for selecting the replacement from the array.<br> $uuid[19] = ['8', '9', 'a', 'b'][getmypid() % 4)];
<br><br>Despite initial consideration, Variant 7, which involved the Process ID (PID), faced challenges related to predictability and potential loss of randomness. The PID's incorporation raised concerns about its suitability for a truly random selection process, leading to its eventual exclusion.<br>See discussion: <a rel="noopener nofollow" class="external-link" href="https://github.com/symfony/symfony/pull/54027" target="_blank">https://github.com/symfony/symfony/pull/54027</a><br><br>The optimization journey emphasized the importance of balancing randomness and performance in UUIDv4 generation. While certain variants showcased improvements, challenges persisted in achieving the optimal assignment of the 19th character. Ongoing efforts will focus on refining the process to strike the perfect balance between speed and unpredictability.<br>As I delved into the intricacies of Symfony's UUIDv4 generation, it became evident that certain challenges transcend the capabilities of PHP at its current abstraction level. The bottleneck posed by hex conversion in the generation process exposes a limitation in the language's efficiency for such critical tasks.<br>While Symfony provides a solid foundation, the quest for optimal UUIDv4 generation leads beyond PHP's realm, pointing towards potential enhancements at a lower level. The intricacies of binary data manipulation and random byte generation necessitate a closer integration with the core of PHP or its standard libraries.<br>In conclusion, the journey to optimize UUIDv4 generation extends beyond Symfony, calling for collaboration and innovation at the foundational layers of PHP to address these performance bottlenecks more effectively. This exploration prompts a broader conversation about potential improvements to the language itself, highlighting the evolving landscape of PHP development.]]></description><link>https://rafageist.com/blog/en/2024/optimizing-symfony-uuidv4-generator.html</link><guid isPermaLink="false">Blog/en/2024/Optimizing Symfony UUIDv4 Generator.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Fri, 23 Feb 2024 22:54:07 GMT</pubDate></item><item><title><![CDATA[Reconsidering the Need for a New Operator in Error Handling Proposals]]> | rafageist</title><description><![CDATA[ 
 <br>I’ve been following the discussion around the introduction of the ?= operator and the alternative try keyword proposal for error handling in JavaScript. While I still consider it unnecessary (#24) and appreciate the effort to improve error handling, I think both approaches may introduce more complexity than necessary, and I'd like to share my thoughts on why we should reconsider these changes.<br>The survey #4 results align with what is commonly accepted in the theory and practice of building interpreters and compilers: error handling is better managed through explicit keywords like try, rather than overloading an assignment operator with additional responsibilities. This approach keeps the language clean, maintainable, and intuitive, ensuring that error handling remains clear and effective.<br><br>The conversation around simplifying error handling with a one-liner like try-catch in JavaScript has been ongoing since at least 2019, as seen in this <a data-tooltip-position="top" aria-label="https://es.discourse.group/t/try-catch-oneliner/107/62" rel="noopener nofollow" class="external-link" href="https://es.discourse.group/t/try-catch-oneliner/107/62" target="_blank">Discourse thread</a>. This history highlights that while there is a desire within the community for more concise error handling, it's also a topic that has generated significant debate.<br>The fact that similar ideas have been proposed and discussed for several years without being adopted into the language suggests that there are valid concerns and complexities involved. Key issues include:<br>
<br>Balance Between Brevity and Clarity: The desire for a one-liner often conflicts with the need for explicit and clear error handling, which is crucial in JavaScript's dynamic environment.
<br>Consistency with Language Philosophy: JavaScript has traditionally favored explicit and readable code over syntactic shortcuts that could obscure meaning. This is a principle that has kept the language accessible and understandable to a broad range of developers.
<br>Community Feedback: The ongoing discussion also demonstrates that any changes to error handling need to be carefully considered, with input from the community and a thorough evaluation of the potential trade-offs.
<br>Given this context, it's important to approach any new proposals with a full understanding of the history and the reasons why previous attempts at similar changes were not adopted. This should inform whether new syntax or operators are truly necessary or if they simply reintroduce the same unresolved issues.<br><br>Firstly, it’s important to consider the principles of compiler and interpreter design. In "Compilers: Principles, Techniques, and Tools" by Aho, Sethi, and Ullman, a clear separation of concerns is emphasized. The idea is that language constructs should be as clear and focused as possible, with specific constructs like operators and keywords serving distinct purposes. Introducing a new operator like ?= for error handling, or even modifying the use of try, blurs the lines between error handling and value assignment, potentially complicating both the language and its interpretation.<br><br>One of the critical assumptions in the proposal for the ?= operator and the try keyword modification is that exceptions primarily occur in operations that return values. However, this is not always the case. In many scenarios, exceptions can arise in functions or operations that execute tasks without returning a value, such as:<br>
<br>Void Functions: Functions that perform actions like modifying a global state, writing to a file, or sending a network request may throw exceptions without returning any value. An operator like ?= or a one-liner try would be ill-suited for these cases, as there would be no value to assign or capture.
<br>Asynchronous Side Effects: In asynchronous operations, exceptions can occur at various points that are not directly tied to value-returning expressions. For example, a background task might fail due to network issues or file system errors, and these exceptions need to be handled explicitly, often without a direct return value.
<br>Event Handling and Callbacks: In event-driven programming, exceptions can occur within event handlers or callbacks that are meant to trigger certain actions rather than return values. In these cases, structured error handling via try-catch is essential to ensure that exceptions are properly managed without relying on value assignment.
<br>These examples highlight that error handling in JavaScript is a broader and more complex problem than just managing exceptions in value-returning functions. A one-size-fits-all solution like ?= or a compact try expression might overlook these nuances, leading to incomplete or inadequate error management strategies.<br>While the proposal aims to streamline error handling, it overlooks the diversity of scenarios where exceptions can occur. Error handling needs to be flexible enough to accommodate both value-returning and non-value-returning operations. This reinforces the importance of explicit and comprehensive mechanisms like try-catch, which can handle a wide range of error situations in a clear and consistent manner.<br><br>One of the underlying motivations for the ?= operator and the try keyword proposal seems to be the desire to reduce the amount of code required for error handling. While it's true that shorter code can sometimes improve readability, it’s important to remember that brevity should not come at the cost of clarity, maintainability, or correctness.<br>In language design, the goal is not just to reduce the number of lines of code but to ensure that the code is intuitive, expressive, and easy to reason about. Explicit error handling mechanisms like try-catch serve these purposes well because they clearly delineate where and how exceptions are managed. Introducing shortcuts or more compact syntax, such as an assignment operator that also handles errors, could obscure the logic, making it harder for developers to understand and maintain the code.<br>Moreover, shorter syntax doesn’t necessarily result in better performance or fewer errors. In fact, it can introduce new complexities for the language interpreter and make debugging more challenging. The focus should be on writing clear, explicit code that accurately reflects the developer's intent, rather than simply aiming to reduce the number of characters typed.<br>So, while the proposal aims to make error handling more concise, it's essential to consider whether this truly leads to better code. Sometimes, more code—if it's clearer and more explicit—can be the better approach.<br><br>JavaScript already provides powerful tools for error handling through the try-catch mechanism. While try-catch can sometimes lead to nested code or less elegant syntax, the clarity and explicit nature of this approach ensure that developers are fully aware of when and how errors are being handled. This explicitness is crucial, as it reduces the likelihood of accidentally ignoring or mishandling exceptions.<br>For example, consider the following traditional error handling approach:<br>async function getData() {
    try {
        const response = await fetch("https://api.example.com/data");
        const json = await response.json();
        return validationSchema.parse(json);
    } catch (error) {
        handleError(error);
    }
}
<br>This structure is clear in its intent and allows for robust handling of different error types. Introducing [error, data] = try doSome(); or [error, data] ?= expression; might reduce the lines of code, but it could also obscure the error handling logic, making it less obvious to those reading or maintaining the code.<br><br>It’s also essential to distinguish between different types of errors. Syntax errors, caught at compile-time by the interpreter, are different from runtime exceptions that occur during the execution of the program. JavaScript’s current error handling mechanisms are well-suited to managing runtime errors explicitly. Delegating this responsibility to an operator or integrating it into a simplified assignment could result in subtle bugs or missed error handling opportunities.<br><br>Upon reviewing the README of the proposal, it becomes clear that while it identifies some real challenges with error handling in JavaScript, it does not sufficiently justify why a new operator like ?= or even the alternative try syntax is necessary or superior to existing methods.<br>The proposal mentions the potential for simplifying error handling and reducing code nesting, but it doesn't provide concrete evidence that these benefits outweigh the downsides of introducing new language features. For instance:<br>
<br>Compatibility and Complexity: Introducing a new operator or keyword would increase the language's complexity, requiring developers to learn and adapt to new syntax, potentially leading to confusion or misuse.
<br>Existing Mechanisms: JavaScript's current error handling mechanisms, while sometimes verbose, are explicit and clear. They ensure that developers consciously manage errors, which is crucial for maintaining robust code.
<br>Ambiguity and Readability: The proposal risks making error handling less explicit by integrating it into an assignment operator or simplifying it into a one-liner with try. This could lead to errors being overlooked or improperly handled, reducing the overall readability and maintainability of the code.
<br>The proposal does not convincingly argue that these changes would result in a net benefit for the language. The introduction of such features should be carefully considered, especially when existing solutions are already well-understood and effective.<br><br>Using try as a keyword instead of an operator like ?= might be a more acceptable alternative, as it would be more consistent with existing practices in JavaScript. However, even this modification raises some questions and challenges:<br>
<br>Consistency with try Semantics: Using try in this way would be a significant change to current JavaScript semantics. Currently, try is used to start a block that may contain exceptions, followed by catch to handle them. Introducing try as part of an assignment expression like [error, result] = try doSome(); might confuse developers who are already familiar with traditional try-catch usage.
<br>Explicit vs. Implicit: Using try in an assignment might make exception handling less explicit. One of the strengths of try-catch is that it makes it clear that a potential exception is being handled, whereas introducing try in an assignment might make error handling more inconspicuous, potentially leading to errors of omission.
<br>Exception Handling and Control Flow: try-catch allows for fine-grained handling of control flow, including the possibility of multiple catch and finally blocks. Using try in an assignment limits these capabilities and might require additional handling if different types of errors need to be caught and handled.
<br>Compatibility and Learning Curve: While it might seem simpler at first glance, this new form of try would add a new syntax to the language, requiring developers to learn and understand its nuances. It could also have implications for backward compatibility, and for tools that parse or process JavaScript.
<br>In short, while using try instead of an operator might be a less invasive approach, it is still a significant modification that introduces new semantic considerations and potential points of confusion. It is crucial to assess whether the benefits of this new syntax outweigh the potential drawbacks and whether it actually addresses a critical enough problem to warrant the change in the language.<br><br>Before making such significant changes to the language, it’s worth revisiting foundational texts like "Compilers: Principles, Techniques, and Tools" and "JavaScript: The Definitive Guide" by David Flanagan. These resources underscore the importance of keeping language features both powerful and clear, without overloading them with additional responsibilities that might compromise their original purpose.<br><br>While the intent behind the proposal is commendable, the addition of the ?= operator or a modified try keyword for error handling may not be the best path forward. JavaScript’s existing error handling mechanisms, though sometimes verbose, offer a level of clarity and explicitness that is crucial for maintaining robust and understandable code. I would urge the committee to consider whether these proposed changes truly solve a critical problem or if they risk introducing unnecessary complexity into the language.<br>Thank you for considering my input.<br>Question: Does the proposed operator control flow?<br>
Answer: Yes!<br>Exceptions are meant for handling unexpected situations that a function cannot control, such as missing dependencies, network errors, .... An assignment operator should not be responsible for controlling the flow of exceptions—that’s what structures like try-catch are designed for. Mixing assignment with flow control can blur the lines between different responsibilities in the code, leading to confusing and error-prone practices.<br>In the proposal, when you write ...<br>let foo ?= bar()
<br>... and an exception occurs in bar(), the operator is capturing that exception, acting like a hidden try-catch. This means the operator is controlling the flow of the program, which is not the purpose of an assignment operator. This can lead to unclear code and bad practices by making exceptions less explicit and harder to manage.<br>By embedding exception handling directly into an assignment operator, the proposal risks confusing the role of assignment versus flow control, potentially leading to less readable and maintainable code.<br><img src="https://www.plantuml.com/plantuml/png/DOvT2i8m48JV0xd3FAPNQ14h8dYDQ3Tj8DqjoORgxUqFlWtCDtnZJL_KPwrpikP8rhI95444rmjUFhkcioO6kCVdJOj6OKG-YmOw4SDzgJJM0EtJyv08z2Ut9QL2S2mdS2ibZenCfIQ5okxP8HvYsCntOOrS2MlK2KkMCViP8SdQxVTaiQRVsEFj3m00" usemap="#DOvT2i8m48JV0xd3FAPNQ14h8dYDQ3Tj8DqjoORgxUqFlWtCDtnZJL_KPwrpikP8rhI95444rmjUFhkcioO6kCVdJOj6OKG-YmOw4SDzgJJM0EtJyv08z2Ut9QL2S2mdS2ibZenCfIQ5okxP8HvYsCntOOrS2MlK2KkMCViP8SdQxVTaiQRVsEFj3m00"><br>Here's how the steps compare between a traditional try-catch block and the proposed ?= operator:<br><br>
<br>Start capturing exceptions: The try block begins, which prepares the program to catch any exceptions that may be thrown within its scope.
<br>Execute code: The program executes the code inside the try block.
<br>Stop capturing exceptions: The try block ends, and control is handed to the catch block if an exception occurs.
<br>Exception handling:

<br>Yes: If an exception occurs, it is passed to the catch block, where it can be handled explicitly.
<br>No: If no exception occurs, the program skips the catch block and continues with the next line after the try-catch.


<br>Continue program flow: The program continues executing normally after the try-catch.
<br><br>
<br>Prepare memory zone: Allocate memory to store either the result or an error.
<br>Operator starts capturing exceptions: The ?= operator prepares to intercept any exceptions that may occur during the execution of the function.
<br>Execute code: The function is executed.
<br>Operator stops capturing exceptions: The operator ends its interception.
<br>Exception handling:

<br>Yes: If an exception occurs, the operator stores the exception in the prepared memory zone.
<br>No: If no exception occurs, the operator stores the function's result in the memory zone.


<br>Continue program flow: The program continues executing after the operation, with the memory zone now containing either the result or the exception.
<br><br>
<br>Explicit vs. Implicit Control: In the traditional method, control flow is explicit and visible in the code. The try-catch block clearly shows where exceptions are handled. In the proposed method, the control flow is implicit within the operator, which could make it harder to understand at a glance how exceptions are being handled.
<br>Flexibility: The traditional try-catch allows for more complex and fine-grained control over how different types of exceptions are handled. The proposed operator simplifies error handling but at the cost of flexibility and clarity.
<br>Code Readability: The traditional method maintains clear separation between normal code execution and error handling. The proposed operator blurs this line, potentially making the code less readable and maintainable.
]]></description><link>https://rafageist.com/blog/en/2024/reconsidering-the-need-for-a-new-operator-in-error-handling-proposals.html</link><guid isPermaLink="false">Blog/en/2024/Reconsidering the Need for a New Operator in Error Handling Proposals.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 14 Sep 2024 17:54:05 GMT</pubDate><enclosure url="https://www.plantuml.com/plantuml/png/DOvT2i8m48JV0xd3FAPNQ14h8dYDQ3Tj8DqjoORgxUqFlWtCDtnZJL_KPwrpikP8rhI95444rmjUFhkcioO6kCVdJOj6OKG-YmOw4SDzgJJM0EtJyv08z2Ut9QL2S2mdS2ibZenCfIQ5okxP8HvYsCntOOrS2MlK2KkMCViP8SdQxVTaiQRVsEFj3m00" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://www.plantuml.com/plantuml/png/DOvT2i8m48JV0xd3FAPNQ14h8dYDQ3Tj8DqjoORgxUqFlWtCDtnZJL_KPwrpikP8rhI95444rmjUFhkcioO6kCVdJOj6OKG-YmOw4SDzgJJM0EtJyv08z2Ut9QL2S2mdS2ibZenCfIQ5okxP8HvYsCntOOrS2MlK2KkMCViP8SdQxVTaiQRVsEFj3m00"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Rejecting the notion of Most Important Programming Language]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:Article" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Article</a> <a class="tag" href="https://rafageist.com/?query=tag:Opinion" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Opinion</a> <a class="tag" href="https://rafageist.com/?query=tag:Programming" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Programming</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:Article" class="tag" target="_blank" rel="noopener nofollow">#Article</a> <a href="https://rafageist.com?query=tag:Opinion" class="tag" target="_blank" rel="noopener nofollow">#Opinion</a> <a href="https://rafageist.com?query=tag:Programming" class="tag" target="_blank" rel="noopener nofollow">#Programming</a><br>In my recent exploration of programming tutorials, I stumbled upon a thought-provoking video on David Bombal's channel. The video, titled <a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=6uqgiFhW0Fs" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=6uqgiFhW0Fs" target="_blank">"Free Complete Course: You need to learn this programming language to be a senior developer!"</a> featuring Dr. Chuck, sparked a riveting discussion about the universal importance of a particular programming language, particularly C.<br>I want to be upfront about my perspective: the importance of things, including programming languages, is inherently subjective and relative. This viewpoint extends beyond the realm of coding to encompass various facets of life. It's rooted in the understanding that evaluations are not inherent properties of objects but rather subjective information held by the individuals or groups making those assessments.<br>The video boldly declares that C is universally the 'most important' language and a prerequisite for achieving senior developer status. However, my perspective challenges this assertion, recognizing the subjectivity of importance. The significance of a programming language is intricately tied to the goals, context, and preferences of the developer or group involved.<br>Embracing subjectivity, the choice of learning C or any other programming language should be guided by the concrete requirements of a project and the principles deemed important by the individual or team. Subjectivity lies in acknowledging that the importance of a programming language is contingent on a set of criteria established by the subject engaging with it.<br>As I reflect on the video's key points, my goal is to shed light on the subjective nature of programming language importance (as the rest of the things). I invite you to explore if the path to senior developer status truly depends on mastering a specific language or if success lies in adopting a tailored, context-driven approach.]]></description><link>https://rafageist.com/blog/en/2024/rejecting-the-notion-of-'most-important'-programming-language.html</link><guid isPermaLink="false">Blog/en/2024/Rejecting the notion of 'Most Important' Programming Language.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Fri, 23 Feb 2024 22:54:07 GMT</pubDate></item><item><title><![CDATA[Solving ListView Issues in MAUI]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:Article" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Article</a> <a class="tag" href="https://rafageist.com/?query=tag:NET" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#NET</a> <a class="tag" href="https://rafageist.com/?query=tag:MAUI" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#MAUI</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:Article" class="tag" target="_blank" rel="noopener nofollow">#Article</a> <a href="https://rafageist.com?query=tag:NET" class="tag" target="_blank" rel="noopener nofollow">#NET</a> <a href="https://rafageist.com?query=tag:MAUI" class="tag" target="_blank" rel="noopener nofollow">#MAUI</a><br>In a recent project using .NET MAUI, we faced a significant challenge with the ListView on Android. The issue was that items would become invisible when an item was removed from an ObservableCollection. This blog post documents the problem, the analysis, and the solution we implemented.<br><br>When removing an item from an ObservableCollection bound to a ListView, we observed that some items would disappear, leaving gaps. The problem was reported in the .NET MAUI GitHub repository (<a data-tooltip-position="top" aria-label="https://github.com/dotnet/maui/issues/16137" rel="noopener nofollow" class="external-link" href="https://github.com/dotnet/maui/issues/16137" target="_blank">Issue #16137</a>), and the provided code for removing items looked like this:<br>public void RemoveArtikel(Artikel artikel) 
{
    var art = voorraadkasten.FirstOrDefault(k =&gt; k.KastId == artikel.KastId);

    if (art != null)
    {
        art.Artikelen.Remove(artikel);

        if (art.Artikelen.Count == 0)
        {
            voorraadkasten.Remove(art);
        }
    }
}

<br><br>To address the issue, I modified the method to recreate the ObservableCollection after removing an item, forcing the ListView to update correctly:<br>public void RemoveArtikel(Artikel artikel) 
{
    var art = voorraadkasten.FirstOrDefault(k =&gt; k.KastId == artikel.KastId);

    if (art != null)
    {
        art.Artikelen.Remove(artikel);
        art.Artikelen = new ObservableCollection&lt;Artikel&gt;(art.Artikelen);

        if (art.Artikelen.Count == 0)
        {
            voorraadkasten.Remove(art);
        }
    }

    gescandItems.ItemsSource = art.Artikelen;
}

<br><br>Initially, there were concerns that recreating the collection could affect performance, especially with large lists. However, tests showed that the performance was actually better when the ItemsSource was set on the main thread using Dispatcher.Dispatch:<br>public void RemoveArtikel(Artikel artikel) 
{
    Debug.WriteLine("Removing artikel");
    
    var art = voorraadkasten.FirstOrDefault(k =&gt; k.KastId == artikel.KastId);

    if (art != null)
    {
        art.Artikelen.Remove(artikel);
        art.Artikelen = new ObservableCollection&lt;Artikel&gt;(art.Artikelen);

        if (art.Artikelen.Count == 0)
        {
            voorraadkasten.Remove(art);
        }
    }

    Dispatcher.Dispatch(() =&gt; {
        gescandItems.ItemsSource = art.Artikelen;
    });

    Debug.WriteLine("Artikel removed");
}

<br><br>Ensuring thread safety is crucial, especially when dealing with UI updates. To handle concurrent access safely, we used BindingBase.EnableCollectionSynchronization:<br>private readonly object _lock = new object();

// ...

voorraadkasten = new ObservableCollection&lt;VoorraadKast&gt;();

BindingBase.EnableCollectionSynchronization(voorraadkasten, _lock, ObservableCollectionCallback);

// ...

private void ObservableCollectionCallback(IEnumerable collection, object context, Action accessMethod, bool writeAccess)
{
    lock (context)
    {
        accessMethod();
    }
}

<br><br>Through testing and adjustments, we confirmed that updating the ItemsSource on the main thread not only resolved the visibility issue but also improved performance significantly. This experience underscores the importance of thread safety and performance considerations in UI development.]]></description><link>https://rafageist.com/blog/en/2024/solving-listview-issues-in-maui.html</link><guid isPermaLink="false">Blog/en/2024/Solving ListView Issues in MAUI.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 27 Jul 2024 04:34:50 GMT</pubDate></item><item><title><![CDATA[Structuring PHP Projects - Approaches and Practices without Frameworks]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:PHP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PHP</a> <a class="tag" href="https://rafageist.com/?query=tag:GoodPractices" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#GoodPractices</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:PHP" class="tag" target="_blank" rel="noopener nofollow">#PHP</a> <a href="https://rafageist.com?query=tag:GoodPractices" class="tag" target="_blank" rel="noopener nofollow">#GoodPractices</a><br><br>In software development, especially in projects involving extensive code and collaboration among several developers, good organization of folders and files is crucial. In PHP, where projects can often start as simple scripts and grow in complexity, defining a clear structure from the beginning is essential for maintaining scalability and maintainability. This article explores various ways to structure PHP projects without relying on specific frameworks, using Composer for third-party package management.<br><br>project-root/
|-- assets/ # CSS, images, JavaScripts, etc.
|-- app/
| |-- Controllers/ # Controllers
| |-- Models/ # Models
| |-- Views/ # Views
|-- config/ # Configurations
|-- public/ # Publicly accessible folder
| |-- index.php # Entry point
|-- lib/ # Libraries and helpers
|-- logs/ # Log files
|-- tests/ # Tests
|-- vendor/ # Composer dependencies
<br><br>The Model-View-Controller (MVC) pattern is one of the most common approaches in web development. In this pattern, Model represents business logic and data manipulation, View is responsible for presenting information to the user, and Controller acts as an intermediary between Model and View, managing user input and system responses.<br><br>
<br>Clear separation of responsibilities: Each component has a clear responsibility, which facilitates the organization of the code and its subsequent maintenance.
<br>Ease of management: It is easier for new developers to understand the structure of the project and quickly find the necessary files.
<br><br>
<br>Rigidity: For very large projects, the MVC pattern can become rigid and less efficient, especially if the models are very interdependent.
<br>Code duplication: There can be duplication of code, especially in views that share common elements.
<br><br>project-root/
|-- assets/
|-- modules/ # Independent modules
| |-- User/
| | |-- Controllers/
| | |-- Models/
| | |-- Views/
| |-- Product/
| |-- Controllers/
| |-- Models/
| |-- Views/
|-- config/
|-- public/
| |-- index.php
|-- lib/
|-- logs/
|-- tests/
|-- vendor/
<br><br>In module-based organization, the project is divided into several independent modules, each with its own set of views, controllers, and models. This allows work on one module without directly affecting others.<br><br>
<br>Encapsulation: Improves the modularity of the project, making each module independent and easy to update or modify.
<br>Scalability: It is easier to add new functionalities as independent modules without altering the operation of existing modules.
<br><br>
<br>Complexity: It can be challenging for new developers to understand how different modules interact.
<br>Initial planning: Requires good planning to avoid unwanted interdependencies between modules.
<br><br>project-root/
|-- assets/
|-- src/
| |-- Domain/ # Domain entities and logic
| | |-- User/
| | | |-- User.php # User entity
| | | |-- UserRepository.php
| | |-- Product/
| | |-- Product.php
| | |-- ProductRepository.php
| |-- Application/ # Use cases, commands, events
| |-- Infrastructure/ # Data access implementation, email, etc.
|-- config/
|-- public/
| |-- index.php
|-- lib/
|-- logs/
|-- tests/
|-- vendor/
<br><br>Domain-Driven Design (DDD) is an approach that focuses on the complexity of applications and their domains. The project structure closely aligns with the business domain, integrating business logic and rules into the architecture.<br><br>
<br>Cohesion: High cohesion by organizing code around domain entities.
<br>Collaboration: Facilitates collaboration between developers and domain experts by accurately reflecting business needs.
<br><br>
<br>Learning curve: Requires a deep understanding of the domain, which can be a barrier for new developers.
<br>Architecture complexity: Can result in a more complex structure, especially if the domain itself is complex.
<br><br>Choosing a folder structure for PHP projects should be based on various factors, including the nature of the project, the size of the development team, and long-term growth perspectives. Each approach has its advantages and limitations, and the best choice will depend on the specific needs of the project and the team.<br><br>
<br><a data-tooltip-position="top" aria-label="https://phptherightway.com/" rel="noopener nofollow" class="external-link" href="https://phptherightway.com/" target="_blank">PHP: The Right Way</a>
<br><a data-tooltip-position="top" aria-label="https://www.sitepoint.com/pds-skeleton-2017/" rel="noopener nofollow" class="external-link" href="https://www.sitepoint.com/pds-skeleton-2017/" target="_blank">SitePoint PDS Skeleton</a>
<br><a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/11939226/php-directory-structure-best-practices" rel="noopener nofollow" class="external-link" href="https://stackoverflow.com/questions/11939226/php-directory-structure-best-practices" target="_blank">Stack Overflow PHP Structure</a>
<br><a data-tooltip-position="top" aria-label="https://docs.php.earth/docs/php/structure.html" rel="noopener nofollow" class="external-link" href="https://docs.php.earth/docs/php/structure.html" target="_blank">PHP.Earth Directory Structure</a>
<br><a data-tooltip-position="top" aria-label="https://getcomposer.org/" rel="noopener nofollow" class="external-link" href="https://getcomposer.org/" target="_blank">Composer Official Site</a>
<br><br>
<br>Spanish version: <a data-href="Enfoques y Prácticas para estructurar proyectos PHP sin Frameworks" href="https://rafageist.com/blog/es/2024/enfoques-y-prácticas-para-estructurar-proyectos-php-sin-frameworks.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Enfoques y Prácticas para estructurar proyectos PHP sin Frameworks</a>
]]></description><link>https://rafageist.com/blog/en/2024/structuring-php-projects-approaches-and-practices-without-frameworks.html</link><guid isPermaLink="false">Blog/en/2024/Structuring PHP Projects - Approaches and Practices without Frameworks.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 29 Sep 2024 03:07:35 GMT</pubDate></item><item><title><![CDATA[The Myth of "Less Code is Better" in Programming Languages]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <br>In the world of programming, many developers compare Python to other languages, often highlighting the advantage that Python allows you to "write less code." While this may sound appealing, it’s essential to understand that writing less code does not inherently make a language better or easier to read.<br>One common point of comparison is the use of semicolons to terminate statements. Languages like Java and C# require a semicolon at the end of each statement, while Python does not. At first glance, it might seem like Python is simpler because it has fewer syntactical requirements. However, the absence of semicolons doesn't necessarily make Python objectively easier to read. In both cases, the programmer needs to be aware of where a statement ends—whether it’s marked by a semicolon or a newline character. The cognitive load is similar; it's just a different convention.<br>The idea that writing less code is always better sounds appealing but can sometimes be a sign of laziness. If the syntax is sufficiently descriptive, the length of the code should not matter. Consider reading books or poems: a concise news summary might be ideal for those who want to quickly get the gist of current events, but a novel requires detailed descriptions to immerse the reader in the story. Similarly, in programming, clarity and descriptiveness are often more important than brevity.<br>There's a misconception, especially among beginner programmers, that writing less, using indentation, and avoiding semicolons is universally better. This belief ignores the complexity and richness that detailed and descriptive code can offer.<br>Moreover, Python is not the only language that doesn’t require semicolons. Several other languages, such as Ruby and Swift, also omit this requirement, proving that the absence of semicolons is not a unique advantage of Python but rather a design choice present in various programming languages.<br>So, while Python's syntax can indeed be more concise, it's important to understand that brevity is not the ultimate measure of a language's readability or effectiveness. The key is to write clear, descriptive code, regardless of its length or the presence of semicolons. This approach not only improves readability but also ensures that the code is maintainable and understandable by others in the long run.<br><br>To illustrate the differences in verbosity and syntax, let's look at some examples of the same functionality implemented in Python, C#, and C++.<br><br>Python:<br>print("Hello, World!")
<br>C#:<br>using System;  class Program {     static void Main()     {         Console.WriteLine("Hello, World!");     } }
<br>C++:<br>cpp<br>Copy code<br>#include &lt;iostream&gt;  int main() {     std::cout &lt;&lt; "Hello, World!" &lt;&lt; std::endl;     return 0; }<br>In this example, Python is more concise, but the added verbosity in C# and C++ includes more context about namespaces, classes, and methods, which can be helpful for understanding larger programs.<br><br>Python:<br>python<br>Copy code<br>with open('file.txt', 'r') as file:     content = file.read()     print(content)<br>C#:<br>csharp<br>Copy code<br>using System; using System.IO;  class Program {     static void Main()     {         using (StreamReader sr = new StreamReader("file.txt"))         {             string content = sr.ReadToEnd();             Console.WriteLine(content);         }     } }<br>C++:<br>cpp<br>Copy code<br>#include &lt;iostream&gt; #include &lt;fstream&gt; #include &lt;string&gt;  int main() {     std::ifstream file("file.txt");     std::string content((std::istreambuf_iterator&lt;char&gt;(file)),                          std::istreambuf_iterator&lt;char&gt;());     std::cout &lt;&lt; content &lt;&lt; std::endl;     return 0; }<br>Again, Python is more concise, but C# and C++ provide more explicit information about resource management (e.g., using statements, stream handling).<br><br>Python:<br>python<br>Copy code<br>class Animal:     def __init__(self, name):         self.name = name      def speak(self):         return f"{self.name} makes a sound"  dog = Animal("Dog") print(dog.speak())<br>C#:<br>csharp<br>Copy code<br>using System;  class Animal {     public string Name { get; set; }      public Animal(string name)     {         Name = name;     }      public string Speak()     {         return $"{Name} makes a sound";     } }  class Program {     static void Main()     {         Animal dog = new Animal("Dog");         Console.WriteLine(dog.Speak());     } }<br>C++:<br>cpp<br>Copy code<br>#include &lt;iostream&gt; #include &lt;string&gt;  class Animal { public:     Animal(const std::string &amp;name) : name(name) {}     std::string speak() const {         return name + " makes a sound";     } private:     std::string name; };  int main() {     Animal dog("Dog");     std::cout &lt;&lt; dog.speak() &lt;&lt; std::endl;     return 0; }<br>Python's syntax is indeed more concise, but the additional structure in C# and C++ can make the code clearer in terms of object-oriented programming concepts, such as properties and access modifiers.<br><br>While Python's syntax is more concise and may appear simpler, the verbosity in languages like C# and C++ provides additional context and structure that can be beneficial in understanding and maintaining code. Writing less code is not inherently better; what matters more is the clarity and descriptiveness of the code. This ensures that it is readable, maintainable, and understandable by others, ultimately leading to better software development practices.]]></description><link>https://rafageist.com/blog/en/2024/the-myth-of-less-code-is-better-in-programming-languages.html</link><guid isPermaLink="false">Blog/en/2024/The Myth of -Less Code is Better- in Programming Languages.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 22 Sep 2024 03:18:26 GMT</pubDate></item><item><title><![CDATA[2023]]> | rafageist</title><description><![CDATA[ 
 <br><br>
<br><a data-href="The Strength of Unity - A Natural Gift" href="https://rafageist.com/blog/en/2023/the-strength-of-unity-a-natural-gift.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>The Strength of Unity - A Natural Gift</a>
<br><a data-href="War harms those who do not want it" href="https://rafageist.com/blog/en/2023/war-harms-those-who-do-not-want-it.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>War harms those who do not want it</a>
]]></description><link>https://rafageist.com/blog/en/2023.html</link><guid isPermaLink="false">Blog/en/2023.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Wed, 03 Jul 2024 19:45:07 GMT</pubDate></item><item><title><![CDATA[2024 Blog]]> | rafageist</title><description><![CDATA[ 
 <br><br>
<br><a data-href="The Myth of -Less Code is Better- in Programming Languages" href="https://rafageist.com/blog/en/2024/the-myth-of-less-code-is-better-in-programming-languages.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>The Myth of -Less Code is Better- in Programming Languages</a>
<br><br>
<br> <a data-href="Solving ListView Issues in MAUI" href="https://rafageist.com/blog/en/2024/solving-listview-issues-in-maui.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Solving ListView Issues in MAUI</a>
<br><a data-href="Converting SQL WHERE Clauses to Prisma Queries Using TypeScript and Jison" href="https://rafageist.com/blog/en/2024/converting-sql-where-clauses-to-prisma-queries-using-typescript-and-jison.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Converting SQL WHERE Clauses to Prisma Queries Using TypeScript and Jison</a>
<br><br>
<br><a data-href="Elegant JavaScript Solutions for Time-Based Greetings" href="https://rafageist.com/blog/en/2024/elegant-javascript-solutions-for-time-based-greetings.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Elegant JavaScript Solutions for Time-Based Greetings</a>
<br><br>
<br><a data-href="Celebrating Recognition in the PHP Innovation Awards January 2024" href="https://rafageist.com/blog/en/2024/celebrating-recognition-in-the-php-innovation-awards-january-2024.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Celebrating Recognition in the PHP Innovation Awards January 2024</a>
<br><a data-href="Conditional Logic in PHP with Short-Circuiting for Clean Code" href="https://rafageist.com/blog/en/2024/conditional-logic-in-php-with-short-circuiting-for-clean-code.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Conditional Logic in PHP with Short-Circuiting for Clean Code</a>
<br><br>
<br><a data-href="Rejecting the notion of 'Most Important' Programming Language" href="https://rafageist.com/blog/en/2024/rejecting-the-notion-of-'most-important'-programming-language.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Rejecting the notion of 'Most Important' Programming Language</a>
<br><a data-href="Optimizing Symfony UUIDv4 Generator" href="https://rafageist.com/blog/en/2024/optimizing-symfony-uuidv4-generator.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Optimizing Symfony UUIDv4 Generator</a>
<br><br>
<br><a data-href="Data Composition Made Easy with cop in Div PHP Template Engine" href="https://rafageist.com/blog/en/2024/data-composition-made-easy-with-cop-in-div-php-template-engine.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Data Composition Made Easy with cop in Div PHP Template Engine</a>
]]></description><link>https://rafageist.com/blog/en/2024.html</link><guid isPermaLink="false">Blog/en/2024.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 22 Sep 2024 03:19:37 GMT</pubDate></item><item><title><![CDATA[Enfoques y Prácticas para estructurar proyectos PHP sin Frameworks]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Blog</a> <a class="tag" href="https://rafageist.com/?query=tag:PHP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PHP</a> <a class="tag" href="https://rafageist.com/?query=tag:GoodPractices" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#GoodPractices</a> 
 <br><a href="https://rafageist.com?query=tag:Blog" class="tag" target="_blank" rel="noopener nofollow">#Blog</a> <a href="https://rafageist.com?query=tag:PHP" class="tag" target="_blank" rel="noopener nofollow">#PHP</a> <a href="https://rafageist.com?query=tag:GoodPractices" class="tag" target="_blank" rel="noopener nofollow">#GoodPractices</a> <br><br>En el desarrollo de software, especialmente en proyectos que involucran código extenso y colaboración entre varios desarrolladores, una buena organización de carpetas y archivos es crucial. En PHP, donde los proyectos pueden comenzar como simples scripts y aumentar en complejidad, definir una estructura clara desde el principio es esencial para mantener la escalabilidad y la mantenibilidad. Este artículo explora varias formas de estructurar proyectos PHP sin depender de frameworks específicos, utilizando Composer para la gestión de paquetes de terceros.<br><br>project-root/
|-- assets/ # CSS, imágenes, JavaScripts, etc.
|-- app/
| |-- Controllers/ # Controladores
| |-- Models/ # Modelos
| |-- Views/ # Vistas
|-- config/ # Configuraciones
|-- public/ # Carpeta pública accesible
| |-- index.php # Punto de entrada
|-- lib/ # Bibliotecas y helpers
|-- logs/ # Archivos de log
|-- tests/ # Pruebas
|-- vendor/ # Dependencias de Composer
<br><br>El patrón Modelo-Vista-Controlador (MVC) es uno de los enfoques más comunes en el desarrollo web. En este patrón, Modelo representa la lógica de negocio y la manipulación de datos, Vista se encarga de presentar información al usuario y Controlador actúa como intermediario entre el Modelo y la Vista, gestionando la entrada del usuario y las respuestas del sistema.<br><br>
<br>Separación clara de responsabilidades: Cada componente tiene una responsabilidad clara, lo que facilita la organización del código y su mantenimiento posterior.
<br>Facilidad de manejo: Es más fácil para los desarrolladores nuevos entender la estructura del proyecto y encontrar rápidamente los archivos necesarios.
<br><br>
<br>Rigidez: Para proyectos muy grandes, el patrón MVC puede volverse rígido y menos eficiente, especialmente si los modelos son muy interdependientes.
<br>Duplicación de código: Puede ocurrir duplicación de código, especialmente en las vistas que comparten elementos comunes.
<br><br>project-root/
|-- assets/
|-- modules/ # Módulos independientes
| |-- User/
| | |-- Controllers/
| | |-- Models/
| | |-- Views/
| |-- Product/
| |-- Controllers/
| |-- Models/
| |-- Views/
|-- config/
|-- public/
| |-- index.php
|-- lib/
|-- logs/
|-- tests/
|-- vendor/
<br><br>En la organización basada en módulos, el proyecto se divide en varios módulos independientes, cada uno con su propio conjunto de vistas, controladores y modelos. Esto permite trabajar en un módulo sin afectar directamente a los demás.<br><br>
<br>Encapsulamiento: Mejora la modularidad del proyecto, haciendo que cada módulo sea independiente y fácil de actualizar o modificar.
<br>Escalabilidad: Es más fácil añadir nuevas funcionalidades como módulos independientes sin alterar el funcionamiento de los módulos existentes.
<br><br>
<br>Complejidad: Puede ser desafiante para los desarrolladores nuevos comprender cómo interactúan los diferentes módulos.
<br>Planificación inicial: Requiere una buena planificación para evitar interdependencias no deseadas entre módulos.
<br><br>project-root/
|-- assets/
|-- src/
| |-- Domain/ # Entidades y lógica de dominio
| | |-- User/
| | | |-- User.php # Entidad usuario
| | | |-- UserRepository.php
| | |-- Product/
| | |-- Product.php
| | |-- ProductRepository.php
| |-- Application/ # Casos de uso, comandos, eventos
| |-- Infrastructure/ # Implementación de acceso a datos, correo, etc.
|-- config/
|-- public/
| |-- index.php
|-- lib/
|-- logs/
|-- tests/
|-- vendor/
<br><br>El Diseño Dirigido por el Dominio (DDD) es un enfoque que se centra en la complejidad de las aplicaciones y sus dominios. La estructura del proyecto se alinea estrechamente con el dominio del negocio, integrando la lógica y las reglas de negocio en la arquitectura.<br><br>
<br>Cohesión: Alta cohesión al organizar el código alrededor de las entidades del dominio.
<br>Colaboración: Facilita la colaboración entre los desarrolladores y los expertos del dominio al reflejar fielmente las necesidades del negocio.
<br><br>
<br>Curva de aprendizaje: Requiere un entendimiento profundo del dominio, lo que puede ser una barrera para los desarrolladores nuevos.
<br>Complejidad de la arquitectura: Puede resultar en una estructura más compleja, especialmente si el dominio es en sí mismo complejo.
<br><br>La elección de una estructura de carpetas para proyectos PHP debe basarse en varios factores, incluyendo la naturaleza del proyecto, el tamaño del equipo de desarrollo y las perspectivas de crecimiento a largo plazo. Cada enfoque tiene sus ventajas y limitaciones, y la mejor elección dependerá de las necesidades específicas del proyecto y del equipo.<br><br>
<br><a data-tooltip-position="top" aria-label="https://phptherightway.com/" rel="noopener nofollow" class="external-link" href="https://phptherightway.com/" target="_blank">PHP: The Right Way</a>
<br><a data-tooltip-position="top" aria-label="https://www.sitepoint.com/pds-skeleton-2017/" rel="noopener nofollow" class="external-link" href="https://www.sitepoint.com/pds-skeleton-2017/" target="_blank">SitePoint PDS Skeleton</a>
<br><a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/11939226/php-directory-structure-best-practices" rel="noopener nofollow" class="external-link" href="https://stackoverflow.com/questions/11939226/php-directory-structure-best-practices" target="_blank">Stack Overflow PHP Structure</a>
<br><a data-tooltip-position="top" aria-label="https://docs.php.earth/docs/php/structure.html" rel="noopener nofollow" class="external-link" href="https://docs.php.earth/docs/php/structure.html" target="_blank">PHP.Earth Directory Structure</a>
<br><a data-tooltip-position="top" aria-label="https://getcomposer.org/" rel="noopener nofollow" class="external-link" href="https://getcomposer.org/" target="_blank">Composer Official Site</a>
<br><br>
<br>English version: <a data-href="Structuring PHP Projects - Approaches and Practices without Frameworks" href="https://rafageist.com/blog/en/2024/structuring-php-projects-approaches-and-practices-without-frameworks.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Structuring PHP Projects - Approaches and Practices without Frameworks</a>
]]></description><link>https://rafageist.com/blog/es/2024/enfoques-y-prácticas-para-estructurar-proyectos-php-sin-frameworks.html</link><guid isPermaLink="false">Blog/es/2024/Enfoques y Prácticas para estructurar proyectos PHP sin Frameworks.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 29 Sep 2024 03:01:43 GMT</pubDate></item><item><title><![CDATA[2024 Blog]]> | rafageist</title><description><![CDATA[ 
 <br><br>
<br><a data-href="Enfoques y Prácticas para estructurar proyectos PHP sin Frameworks" href="https://rafageist.com/blog/es/2024/enfoques-y-prácticas-para-estructurar-proyectos-php-sin-frameworks.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocument" aria-label="IbDocument" data-icon="IbDocument" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path></svg></span>Enfoques y Prácticas para estructurar proyectos PHP sin Frameworks</a>
]]></description><link>https://rafageist.com/blog/es/2024.html</link><guid isPermaLink="false">Blog/es/2024.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Wed, 03 Jul 2024 19:45:07 GMT</pubDate></item><item><title><![CDATA[Divide and conquer with the existing is a clean alternative to the proposed HTTP QUERY method]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:HTTP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#HTTP</a> <a class="tag" href="https://rafageist.com/?query=tag:Proposal" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Proposal</a> <a class="tag" href="https://rafageist.com/?query=tag:Analysis" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Analysis</a> 
 <br><a href="https://rafageist.com?query=tag:HTTP" class="tag" target="_blank" rel="noopener nofollow">#HTTP</a> <a href="https://rafageist.com?query=tag:Proposal" class="tag" target="_blank" rel="noopener nofollow">#Proposal</a> <a href="https://rafageist.com?query=tag:Analysis" class="tag" target="_blank" rel="noopener nofollow">#Analysis</a><br><a rel="noopener nofollow" class="external-link" href="https://github.com/httpwg/http-extensions/issues/2904" target="_blank">https://github.com/httpwg/http-extensions/issues/2904</a><br>Instead of introducing the QUERY method for complex queries, I propose a divide-and-conquer strategy using existing methods. This allows handling complex payloads without introducing new HTTP methods.<br>Important
Complex queries are intended for sophisticated backend systems capable of processing and storing such requests. Both the proposed QUERY method and my example are meant for advanced scenarios, not simple use cases. So we are talking about the same context, the same problem and different solutions.
<br>Here is the approach with a hypothetical example:<br>Warning
You don't need to make 2 requests for each query, the first time is enough if you get creative. The example sends a query template that dynamically generates a URL for subsequent queries, allowing you to reuse the query results efficiently.
<br><br>You can optionally tell it which path you want to consume or return a UUID.<br>Request:<br>POST /query
{
  "desiredUrl": "/productos/stock/dell-apple-hp/laptops-500-1500/ratings-4plus-ram-8GB-16GB/{{page}}",
  "page": "{{page}}"
  "filters": {
    "category": "electronics",
    "subCategory": "laptops",
    "priceRange": {
      "min": 500,
      "max": 1500
    },
    "availability": "in_stock",
    "brands": ["Dell", "Apple", "HP"],
    "sort": {
      "field": "ratings",
      "order": "desc"
    },
    "attributes": {
      "screenSize": ["13-inch", "15-inch"],
      "processorType": ["Intel", "AMD"],
      "ram": ["8GB", "16GB"]
    }
  }
}
<br>Response:<br>Content-type: application/json

{
  "query_uuid": "89fbf974-4565-4bf6-8e9e-e1fd8585a0dc"
}
<br><br>Request:<br>GET /productos/stock/dell-apple-hp/laptops-500-1500/ratings-4plus-ram-8GB-16GB/1
<br>Response:<br>Content-type: application/json

{
  "totalPages": 100,
  "page": 1,
  "products": [
    {
      "id": 101,
      "name": "Dell XPS 13",
      "category": "laptops",
      "price": 1200,
      "availability": "in_stock",
      "brand": "Dell",
      "rating": 4.5,
      "attributes": {
        "screenSize": "13-inch",
        "processorType": "Intel Core i7",
        "ram": "16GB",
        "storage": "512GB SSD"
      }
    },
    {
      "id": 102,
      "name": "Apple MacBook Air",
      "category": "laptops",
      "price": 1500,
      "availability": "in_stock",
      "brand": "Apple",
      "rating": 4.7,
      "attributes": {
        "screenSize": "13-inch",
        "processorType": "M1",
        "ram": "16GB",
        "storage": "512GB SSD"
      }
    },
    {
      "id": 103,
      "name": "HP Spectre x360",
      "category": "laptops",
      "price": 1400,
      "availability": "in_stock",
      "brand": "HP",
      "rating": 4.3,
      "attributes": {
        "screenSize": "15-inch",
        "processorType": "Intel Core i5",
        "ram": "8GB",
        "storage": "256GB SSD"
      }
    }
  ]
}
<br>I hope these examples have clarified how complex queries can be effectively handled using existing methods. This method offers flexibility to handle sophisticated queries on advanced backends, requests that can be pre-processed, optimized, cached, return an early error, reused, etc.<br>I welcome any comments and feedback from the community. Thank you for considering my idea and I hope it has contributed to the ongoing discussion.]]></description><link>https://rafageist.com/contributions/2024/divide-and-conquer-with-the-existing-is-a-clean-alternative-to-the-proposed-http-query-method.html</link><guid isPermaLink="false">Contributions/2024/Divide and conquer with the existing is a clean alternative to the proposed HTTP QUERY method.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:42:50 GMT</pubDate></item><item><title><![CDATA[Universal and Flexible Error Handling in ECMAScript]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Contribution" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Contribution</a> <a class="tag" href="https://rafageist.com/?query=tag:JavaScript" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JavaScript</a> <a class="tag" href="https://rafageist.com/?query=tag:Proposal" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Proposal</a> <a class="tag" href="https://rafageist.com/?query=tag:TC39" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#TC39</a> 
 <br><a href="https://rafageist.com?query=tag:Contribution" class="tag" target="_blank" rel="noopener nofollow">#Contribution</a> <a href="https://rafageist.com?query=tag:JavaScript" class="tag" target="_blank" rel="noopener nofollow">#JavaScript</a> <a href="https://rafageist.com?query=tag:Proposal" class="tag" target="_blank" rel="noopener nofollow">#Proposal</a> <a href="https://rafageist.com?query=tag:TC39" class="tag" target="_blank" rel="noopener nofollow">#TC39</a><br><img alt="Pasted image 20240914184950.png" src="https://rafageist.com/lib/media/pasted-image-20240914184950.png"><br>
<img alt="Captura de pantalla 2024-09-15 112016.png" src="https://rafageist.com/lib/media/captura-de-pantalla-2024-09-15-112016.png"><br><br><br>
<br><a class="internal-link" data-href="#universal-and-flexible-error-handling-in-ecmascript" href="https://rafageist.com/about:blank#universal-and-flexible-error-handling-in-ecmascript" target="_self" rel="noopener nofollow">Universal and Flexible Error Handling in ECMAScript</a>

<br><a class="internal-link" data-href="#table-of-contents" href="https://rafageist.com/about:blank#table-of-contents" target="_self" rel="noopener nofollow">Table of Contents</a>
<br><a class="internal-link" data-href="#introduction" href="https://rafageist.com/about:blank#introduction" target="_self" rel="noopener nofollow">Introduction</a>

<br><a class="internal-link" data-href="#key-concepts" href="https://rafageist.com/about:blank#key-concepts" target="_self" rel="noopener nofollow">Key Concepts</a>
<br><a class="internal-link" data-href="#engagement" href="https://rafageist.com/about:blank#engagement" target="_self" rel="noopener nofollow">Engagement</a>
<br><a class="internal-link" data-href="#benefits" href="https://rafageist.com/about:blank#benefits" target="_self" rel="noopener nofollow">Benefits</a>


<br><a class="internal-link" data-href="#the-proposal" href="https://rafageist.com/about:blank#the-proposal" target="_self" rel="noopener nofollow">The proposal</a>

<br><a class="internal-link" data-href="#proposed-syntax" href="https://rafageist.com/about:blank#proposed-syntax" target="_self" rel="noopener nofollow">Proposed Syntax</a>
<br><a class="internal-link" data-href="#grammar" href="https://rafageist.com/about:blank#grammar" target="_self" rel="noopener nofollow">Grammar</a>
<br><a class="internal-link" data-href="#static-semantics-early-errors" href="https://rafageist.com/about:blank#static-semantics-early-errors" target="_self" rel="noopener nofollow">Static Semantics: Early Errors</a>
<br><a class="internal-link" data-href="#runtime-semantics-catchclauseevaluation" href="https://rafageist.com/about:blank#runtime-semantics-catchclauseevaluation" target="_self" rel="noopener nofollow">Runtime Semantics: CatchClauseEvaluation</a>
<br><a class="internal-link" data-href="#runtime-semantics-block-evaluation" href="https://rafageist.com/about:blank#runtime-semantics-block-evaluation" target="_self" rel="noopener nofollow">Runtime Semantics: Block Evaluation</a>
<br><a class="internal-link" data-href="#comparison-with-existing-syntax" href="https://rafageist.com/about:blank#comparison-with-existing-syntax" target="_self" rel="noopener nofollow">Comparison with Existing Syntax</a>

<br><a class="internal-link" data-href="#current" href="https://rafageist.com/about:blank#current" target="_self" rel="noopener nofollow">Current</a>
<br><a class="internal-link" data-href="#proposed" href="https://rafageist.com/about:blank#proposed" target="_self" rel="noopener nofollow">Proposed</a>




<br><a class="internal-link" data-href="#examples" href="https://rafageist.com/about:blank#examples" target="_self" rel="noopener nofollow">Examples</a>

<br><a class="internal-link" data-href="#try-catch-the-current-specification" href="https://rafageist.com/about:blank#try-catch-the-current-specification" target="_self" rel="noopener nofollow"><code></code> (the current specification)</a>try-catch
<br><a class="internal-link" data-href="#try-catch-with-when-clause" href="https://rafageist.com/about:blank#try-catch-with-when-clause" target="_self" rel="noopener nofollow"><code></code> with <code></code> clause</a>try-catchwhen
<br><a class="internal-link" data-href="#anonymous-catch-no-try-block" href="https://rafageist.com/about:blank#anonymous-catch-no-try-block" target="_self" rel="noopener nofollow"><code></code> (no <code></code> block)</a>anonymous-catchtry
<br><a class="internal-link" data-href="#if-catch" href="https://rafageist.com/about:blank#if-catch" target="_self" rel="noopener nofollow"><code></code></a>if-catch
<br><a class="internal-link" data-href="#if-catch-with-when-clause" href="https://rafageist.com/about:blank#if-catch-with-when-clause" target="_self" rel="noopener nofollow"><code></code> with <code></code> Clause</a>if-catchwhen
<br><a class="internal-link" data-href="#for-catch" href="https://rafageist.com/about:blank#for-catch" target="_self" rel="noopener nofollow"><code></code></a>for-catch
<br><a class="internal-link" data-href="#while-catch" href="https://rafageist.com/about:blank#while-catch" target="_self" rel="noopener nofollow"><code></code></a>while-catch
<br><a class="internal-link" data-href="#function-catch" href="https://rafageist.com/about:blank#function-catch" target="_self" rel="noopener nofollow"><code></code></a>function-catch
<br><a class="internal-link" data-href="#catch-catch" href="https://rafageist.com/about:blank#catch-catch" target="_self" rel="noopener nofollow"><code></code></a>catch-catch
<br><a class="internal-link" data-href="#do-catch" href="https://rafageist.com/about:blank#do-catch" target="_self" rel="noopener nofollow"><code></code></a>do-catch
<br><a class="internal-link" data-href="#finally-catch" href="https://rafageist.com/about:blank#finally-catch" target="_self" rel="noopener nofollow"><code></code></a>finally-catch
<br><a class="internal-link" data-href="#try-catch-throw-catch" href="https://rafageist.com/about:blank#try-catch-throw-catch" target="_self" rel="noopener nofollow"><code></code></a>try-catch-throw-catch
<br><a class="internal-link" data-href="#try-cath-with-if-catch-when-inside" href="https://rafageist.com/about:blank#try-cath-with-if-catch-when-inside" target="_self" rel="noopener nofollow"><code></code> with <code></code> inside</a>try-cathif-catch-when
<br><a class="internal-link" data-href="#case-body-catch" href="https://rafageist.com/about:blank#case-body-catch" target="_self" rel="noopener nofollow"><code></code></a>case-body-catch


<br><a class="internal-link" data-href="#list-of-combinations" href="https://rafageist.com/about:blank#list-of-combinations" target="_self" rel="noopener nofollow">List of combinations</a>
<br><a class="internal-link" data-href="#analysis" href="https://rafageist.com/about:blank#analysis" target="_self" rel="noopener nofollow">Analysis</a>

<br><a class="internal-link" data-href="#alignment-with-current-exception-handling" href="https://rafageist.com/about:blank#alignment-with-current-exception-handling" target="_self" rel="noopener nofollow">Alignment with Current Exception Handling</a>
<br><a class="internal-link" data-href="#importance-of-braces-" href="https://rafageist.com/about:blank#importance-of-braces-" target="_self" rel="noopener nofollow">Importance of braces <code></code></a>{}
<br><a class="internal-link" data-href="#importance-of-semi-colons" href="https://rafageist.com/about:blank#importance-of-semi-colons" target="_self" rel="noopener nofollow">Importance of semi-colons</a>
<br><a class="internal-link" data-href="#control-flow-integrity" href="https://rafageist.com/about:blank#control-flow-integrity" target="_self" rel="noopener nofollow">Control flow integrity</a>
<br><a class="internal-link" data-href="#avoiding-redundant-constructs" href="https://rafageist.com/about:blank#avoiding-redundant-constructs" target="_self" rel="noopener nofollow">Avoiding redundant constructs</a>
<br><a class="internal-link" data-href="#a-structural-solution-to-a-structural-problem" href="https://rafageist.com/about:blank#a-structural-solution-to-a-structural-problem" target="_self" rel="noopener nofollow">A structural solution to a structural problem</a>


<br><a class="internal-link" data-href="#motivation-and-inspiration" href="https://rafageist.com/about:blank#motivation-and-inspiration" target="_self" rel="noopener nofollow">Motivation and inspiration</a>
<br><a class="internal-link" data-href="#references" href="https://rafageist.com/about:blank#references" target="_self" rel="noopener nofollow">References</a>
<br><a class="internal-link" data-href="#author" href="https://rafageist.com/about:blank#author" target="_self" rel="noopener nofollow">Author</a>
<br><a class="internal-link" data-href="#license" href="https://rafageist.com/about:blank#license" target="_self" rel="noopener nofollow">License</a>


<br><br>JavaScript's try-catch structure is a fundamental tool for error handling, but it can be enhanced for greater flexibility and clarity. This proposal introduces the concept of allowing any block of statements, not just try blocks, to have associated catch blocks. Furthermore, each catch block can have a when clause to conditionally handle specific errors, providing a more controlled and expressive approach to managing exceptions.<br>Important
This proposal retains the integrity of JavaScript's control flow while offering developers a more intuitive and streamlined way to handle errors, without introducing unnecessary complexity.
<br>{ /* ...*/ } catch (e) when (true || false) { /* ... */}
<br>This proposal expands JavaScript’s error handling capabilities by allowing any block of statements to have its own catch block, with the option to conditionally execute those blocks using the when keyword. This enhancement provides developers with more control, clarity, and flexibility while maintaining compatibility with existing JavaScript syntax.<br><br>
<br>Universal catch blocks: Any block of statements, including functions, loops, and even other catch blocks, can have its own catch statement.
<br>Nested catch blocks: Since a catch block is just another block of code, it can also have its own catch to handle errors within error-handling logic.
<br>Conditional catch with when: The when clause allows for conditional execution of catch blocks, improving the readability and control of error handling.
<br>Conditional catch body: If the body of the catch block is missing, the error variable is still available in the same scope as the catch block, allowing for more precise error handling.
<br><br>JavaScript developers often encounter situations where they need to handle errors in specific ways based on the type of error or other conditions. The current try-catch structure can be limiting in these scenarios, leading to complex nested conditions or multiple try-catch blocks. By allowing catch blocks to be attached to any block of statements, developers can handle errors more precisely and maintain a cleaner code structure.<br>Language as Go and Rust, allow to catch errors inline, but catch is for control flow, and is important keep this principle. To maintain the control flow, the catch block in this proposal is optional, and the error variable is available in the same scope as the catch block. With this proposal the following code is possible:<br>{ var a = 1 } catch (e);

console.log(a);
if (e) console.log(e);
<br>In the previous example you are seeing the combination of an anonymous block with a catch without a body. If you want to do the same in actual JavaScript, you will need an additional block and variable:<br>try { var a = 1 } catch (e) { var err = e; }

console.log(a);
if (e) console.log(err);
<br><br>
<br>Precision: Handle specific error types or conditions directly.
<br>Clarity: The when clause makes the error-handling logic clear and concise.
<br>Simplicity: Reduces the need for complex nested conditions within catch blocks.
<br>Expressiveness: Offers a more powerful way to handle different error scenarios.
<br><br><br>The proposed syntax allows for catch blocks to be attached to any code block and for those blocks to conditionally execute based on the when clause:<br>/* 
any block of statements: try, anonymous, functions, 
if, do, catch, finally, ... 
*/ 

{
    // Code that may throw an error
    // ...
} 
catch (e) when (false || true) 
{
    // Error-handling logic
    // ...
    // catch is also a block!
}
catch (e) when (false || true) 
{
    // Error-handling logic
    // ...
}
finally 
{
    // Cleanup code, executed regardless of success or failure

    // ... but finally is also a block!
} 
catch (e) when (false || true) 
{
    // Error-handling logic
    // ...
}
catch (e);

{/* ... */ } catch when (false || true);

{ /* ... */} catch;
...
<br><br>The proposed changes to the ECMAScript grammar are as follows:<br>14.2 Block 

Syntax 

    Block[Yield, Await, Return] :
        { StatementList[?Yield, ?Await, ?Return] opt } Catch[?Yield, ?Await, ?Return]? Finally[?Yield, ?Await, ?Return]?

    Catch[Yield, Await, Return] :
        catch ( CatchParameter[?Yield, ?Await] ) when ( Expression ) Block[?Yield, ?Await, ?Return]
        catch ( CatchParameter[?Yield, ?Await] ) Block[?Yield, ?Await, ?Return]
        catch when ( Expression ) Block[?Yield, ?Await, ?Return]
        catch Block[?Yield, ?Await, ?Return]
        catch ( CatchParameter[?Yield, ?Await] )
        catch

    Finally[Yield, Await, Return] :
        finally Block[?Yield, ?Await, ?Return]

14.15 The try Statement

Syntax

TryStatement[Yield, Await, Return] :
    Block[?Yield, ?Await, ?Return]
    
<br><br>Block: { StatementList } Catch[?Yield, ?Await, ?Return]? Finally[?Yield, ?Await, ?Return]?
<br>
<br>It is a Syntax Error if BoundNames of CatchParameter contains any duplicate elements.
<br>It is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the LexicallyDeclaredNames of Block.
<br>It is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the VarDeclaredNames of Block.
<br>It is a Syntax Error if the Expression in the when clause is not a valid Boolean expression.
<br><br>Catch: catch ( CatchParameter ) when ( Expression ) Block
<br>
<br>Let oldEnv be the running execution context's LexicalEnvironment.
<br>Let catchEnv be NewDeclarativeEnvironment(oldEnv).
<br>For each element argName of the BoundNames of CatchParameter, do:

<br>a. Perform ! catchEnv.CreateMutableBinding(argName, false).


<br>Set the running execution context's LexicalEnvironment to catchEnv.
<br>Let status be Completion(BindingInitialization) of CatchParameter with arguments thrownValue and catchEnv.
<br>If status is an abrupt completion, then:

<br>a. Set the running execution context's LexicalEnvironment to oldEnv.
<br>b. Return ? status.


<br>If the result of evaluating Expression is false:

<br>a. If there is a subsequent catch block within the same scope, continue with its evaluation.
<br>b. If no subsequent catch block exists, propagate the exception.


<br>Let B be Completion(Evaluation) of Block.
<br>Set the running execution context's LexicalEnvironment to oldEnv.
<br>Return ? B.
<br>Catch: catch ( CatchParameter )
<br>
<br>Let oldEnv be the running execution context's LexicalEnvironment.
<br>Let catchEnv be NewDeclarativeEnvironment(oldEnv).
<br>For each element argName of the BoundNames of CatchParameter, do:

<br>a. Perform ! catchEnv.CreateMutableBinding(argName, false).


<br>Set the running execution context's LexicalEnvironment to catchEnv.
<br>Let status be Completion(BindingInitialization) of CatchParameter with arguments thrownValue and catchEnv.
<br>If status is an abrupt completion, then:

<br>a. Set the running execution context's LexicalEnvironment to oldEnv.
<br>b. Return ? status.


<br>Set the running execution context's LexicalEnvironment to oldEnv.
<br>Continue with the next statement without executing a block.
<br>Catch: catch when ( Expression ) Block
<br>
<br>Let oldEnv be the running execution context's LexicalEnvironment.
<br>Skip the environment creation since there is no CatchParameter.
<br>Evaluate the Expression:

<br>a. If the result of evaluating Expression is false:

<br>i. If there is a subsequent catch block within the same scope, continue with its evaluation.
<br>ii. If no subsequent catch block exists in the current scope, propagate the exception to the next catch block in the higher scope.




<br>If Expression is true, proceed to the next statement.
<br>Skip block evaluation since there is no block.
<br>Continue execution.
<br>Catch: catch 
<br>
<br>Let oldEnv be the running execution context's LexicalEnvironment.
<br>Skip the environment creation since there is no CatchParameter.
<br>Simply continue execution without binding any error or evaluating a block.
<br>Proceed to the next statement.
<br><br>Block : { StatementList } Catch[?Yield, ?Await, ?Return]? Finally[?Yield, ?Await, ?Return]?
<br>
<br>Let B be Completion(Evaluation) of StatementList.
<br>If B is a throw completion, then:

<br>a. If a Catch is present, evaluate CatchClauseEvaluation with B.[[Value]].
<br>b. If CatchClauseEvaluation returns undefined, proceed to step 3.  
<br>c. Otherwise, let C be the result of CatchClauseEvaluation.


<br>If no Catch is present or all Catch evaluations result in undefined, rethrow the exception.
<br>If a Finally is present, evaluate it and:

<br>a. If the Finally evaluation results in an abrupt completion, return that result.
<br>b. Otherwise, proceed with the value from the previous step.


<br>Return ? C or B, as appropriate.
<br><br><br>The current try-catch syntax is limited to the try block, which can be followed by one or more catch blocks and an optional finally block. This structure is restrictive and does not allow for catch blocks to be attached to other blocks of code.<br>try 
{
    // Code that may throw an error
    throw new Error("Error in block");
} 
catch (error) 
{
    if (error.message.includes("block")) {
        console.log("Caught an error in block:", error.message);
    } else {
        throw error;
    }
}
<br><br>The proposed syntax allows for catch blocks to be attached to any block of statements, not just try blocks. This flexibility enables developers to handle errors more precisely and conditionally, improving the readability and control of error handling.<br>/* any block of statements */ 
{
    // Code that may throw an error
    throw new Error("Error in block");
} 
catch (error) /* optional */ when (error.message.includes("block")) 
{
    console.log("Caught an error in block:", error.message);
}
<br><br><br>This proposal is compatible with the existing try-catch syntax.<br>try 
{
    // Code that may throw an error
    throw new Error("Error in block");
} 
catch (error) 
{
    console.log("Caught an error in block:", error.message);
}
<br><br>Users can conditionally handle errors based on the when clause.<br>try {
    data = fetchData();
} 
catch (err) when (err instanceof NetworkError) {
    console.error('Network error:', err.message);
} 
catch (err) when (err instanceof SyntaxError) {
    console.error('Syntax error in response:', err.message);
} 
finally {
    console.log('Cleanup code, executed regardless of success or failure.');
}
<br><br>No try block is required to have a catch block.<br>{
    // Code that may throw an error
    throw new Error("Error in block");
} 
catch (error) when (error.message.includes("block")) 
{
    console.log("Caught an error in block:", error.message);
}
<br><br>No try block is required to have a catch block inside an if statement.<br>if (condition) {
    // ...
} catch (error) {
    console.log("Caught an error in block:", error.message);
} else {
    // here we are sure that there is no error in the block
    console.log("No error in block.");
}
<br><br>Like the previous example, but with a when clause to conditionally handle errors.<br>if (condition) {
    throw new Error("Error in block");
} catch (error) when (error.message.includes("block")) {
    console.log("Caught an error in block:", error.message);
}
<br><br>for (let i = 0; i &lt; 3; i++) {
    throw new Error("Error in block " + i);
} catch (error) when (error.message.includes("block 1")) {
    console.log("Caught an error in block 1:", error.message);
}
<br><br>
let i = 0;
while (i &lt; 3) {
    throw new Error("Error in block " + i);
} catch (error) when (error.message.includes("block 1")) {
    console.log("Caught an error in block 1:", error.message);
    i++;
}
<br><br>Functions can have their own catch blocks.<br>function fetchData() {
    throw new Error("Error in block");
} catch (error) when (error.message.includes("block")) {
    console.log("Caught an error in block:", error.message);
}
<br><br>Nested catch blocks can handle errors within error-handling logic.<br>/* ... any block of statements ... */ {
    throw new Error("Error in block");
} catch (error) when (error.message.includes("block")) {
    console.log("Caught an error in block:", error.message);
} catch (nestedError) {
    console.log("Caught a nested error:", nestedError.message);
}
<br><br>Catch exceptions must be before the while statement.<br>do {
    throw new Error("Error in block");
} catch (error) when (error.message.includes("block")) {
    console.log("Caught an error in block:", error.message);
} while (false);
<br><br>Catch exceptions thrown in the finally block.<br>try {
    throw new Error("Error in block");
} catch (error) when (error.message.includes("block")) {
    console.log("Caught an error in block:", error.message);
} finally {
    console.log("Finally block executed.");
    throw new Error("Error in finally block");
} catch (nestedError) {
    console.log("Caught a nested error:", nestedError.message);
}
<br><br>Catch exceptions thrown in the catch block.<br>try {
    throw new Error("Error in block");
} catch (error) when (error.message.includes("block")) {
    console.log("Caught an error in block:", error.message);
    throw new Error("Error in catch block");
} catch (nestedError) {
    console.log("Caught a nested error:", nestedError.message);
}
<br><br>Combine try-catch with if-catch-when inside.<br>try {
    
    // ...
    if (condition) {
        throw new Error("Error in block");
    } catch (error) when (error.message.includes("block")) {
        
        // enter here if error.message.includes("block") is true
        // else the exception will be catched by the outer catch block
        console.log("Caught an error in if block:", error.message);
    }
    // ...

} catch (error) {
    console.log("Caught an error in try block:", error.message);
}
<br><br>Catch exceptions thrown in the case block.<br>switch (1) {
    case 1: {
        throw new Error("Error in block");
    } catch (error) when (error.message.includes("block")) {
        console.log("Caught an error in block:", error.message);
    }
}
<br><br>
// RO = risky operation
// BE = boolean expression

{ /* RO */ } catch;
{ /* RO */ } catch (e);
{ /* RO */ } catch (e) {  /* ... */  }
{ /* RO */ } catch (e) {  /* ... */  } catch (e) {  /* ... */  } /* ... */
{ /* RO */ } catch (e) {  /* ... */  } finally { /* ... */} /* ... */
{ /* RO */ } catch when ( /* BE */ );
{ /* RO */ } catch when ( /* BE */ ) { /* ... */} /* ... */
{ /* RO */ } catch when ( /* BE */ ) { /* ... */} finally { /* ... */ } /* ... */
{ /* RO */ } catch (e) when ( /* BE */ );
{ /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  }
{ /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } catch /* ... */
{ /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ }
{ /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ } catch /* ... */
/* ... */

if ( /* BE */ ) { /* RO */ } catch;
if ( /* BE */ ) { /* RO */ } catch (e);
if ( /* BE */ ) { /* RO */ } catch (e) {  /* ... */  }
if ( /* BE */ ) { /* RO */ } catch (e) {  /* ... */  } catch (e) {  /* ... */  } /* ... */
if ( /* BE */ ) { /* RO */ } catch (e) {  /* ... */  } finally { /* ... */} /* ... */
if ( /* BE */ ) { /* RO */ } catch when ( /* BE */ );
if ( /* BE */ ) { /* RO */ } catch when ( /* BE */ ) { /* ... */} /* ... */
if ( /* BE */ ) { /* RO */ } catch when ( /* BE */ ) { /* ... */} finally { /* ... */ } /* ... */
if ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ );
if ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  }
if ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } catch /* ... */
if ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ }
if ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ } catch /* ... */
if ( /* BE */ ) { /* RO */ } else { /* RO */ } catch;
if ( /* BE */ ) { /* RO */ } else { /* RO */ } catch (e);
if ( /* BE */ ) { /* RO */ } else { /* RO */ } catch (e) {  /* ... */  }
if ( /* BE */ ) { /* RO */ } else { /* RO */ } catch (e) {  /* ... */  } catch (e) {  /* ... */  } /* ... */
if ( /* BE */ ) { /* RO */ } else { /* RO */ } catch (e) {  /* ... */  } finally { /* ... */} /* ... */
if ( /* BE */ ) { /* RO */ } else { /* RO */ } catch when ( /* BE */ );
/* ... */

for ( /* RO */ ) { /* RO */ } catch;
for ( /* RO */ ) { /* RO */ } catch (e);
for ( /* RO */ ) { /* RO */ } catch (e) {  /* ... */  }
for ( /* RO */ ) { /* RO */ } catch (e) {  /* ... */  } catch (e) {  /* ... */  } /* ... */
for ( /* RO */ ) { /* RO */ } catch (e) {  /* ... */  } finally { /* ... */} /* ... */
for ( /* RO */ ) { /* RO */ } catch when ( /* BE */ );
for ( /* RO */ ) { /* RO */ } catch when ( /* BE */ ) { /* ... */} /* ... */
for ( /* RO */ ) { /* RO */ } catch when ( /* BE */ ) { /* ... */} finally { /* ... */ } /* ... */
for ( /* RO */ ) { /* RO */ } catch (e) when ( /* BE */ );
for ( /* RO */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  }
for ( /* RO */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } catch /* ... */
for ( /* RO */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ }
for ( /* RO */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ } catch /* ... */
/* ... */

while ( /* BE */ ) { /* RO */ } catch;
while ( /* BE */ ) { /* RO */ } catch (e);
while ( /* BE */ ) { /* RO */ } catch (e) {  /* ... */  }
while ( /* BE */ ) { /* RO */ } catch (e) {  /* ... */  } catch (e) {  /* ... */  } /* ... */
while ( /* BE */ ) { /* RO */ } catch (e) {  /* ... */  } finally { /* ... */} /* ... */
while ( /* BE */ ) { /* RO */ } catch when ( /* BE */ );
while ( /* BE */ ) { /* RO */ } catch when ( /* BE */ ) { /* ... */} /* ... */
while ( /* BE */ ) { /* RO */ } catch when ( /* BE */ ) { /* ... */} finally { /* ... */ } /* ... */
while ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ );
while ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  }
while ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } catch /* ... */
while ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ }
while ( /* BE */ ) { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ } catch /* ... */
/* ... */

do { /* RO */ } catch (e) while ( /* BE */ );
do { /* RO */ } catch (e) {  /* ... */  } while ( /* BE */ )
do { /* RO */ } catch (e)  when ( /* BE */) {  /* ... */  } catch (e) {  /* ... */  } while ( /* BE */ ) /* ... */
/* ... */

switch ( /* RO */ ) { case 1: { /* RO */ } catch; }
switch ( /* RO */ ) { case 1: { /* RO */ } catch when ( /* BE */ ) { /* ... */}
switch ( /* RO */ ) { case 1: { /* RO */ } catch when ( /* BE */ ) { /* ... */} finally { /* ... */ } }
/* ... */

function f() { /* RO */ } catch;
function f() { /* RO */ } catch (e);
function f() { /* RO */ } catch (e) {  /* ... */  }
function f() { /* RO */ } catch (e) {  /* ... */  } catch (e) {  /* ... */  } /* ... */
function f() { /* RO */ } catch (e) {  /* ... */  } finally { /* ... */} /* ... */
function f() { /* RO */ } catch when ( /* BE */ );
function f() { /* RO */ } catch when ( /* BE */ ) { /* ... */} /* ... */
function f() { /* RO */ } catch when ( /* BE */ ) { /* ... */} finally { /* ... */ } /* ... */
function f() { /* RO */ } catch (e) when ( /* BE */ );
function f() { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  }
function f() { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } catch /* ... */
function f() { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ }
function f() { /* RO */ } catch (e) when ( /* BE */ ) {  /* ... */  } finally { /* ... */ } catch /* ... */
/* ... */
<br><br><br>In JavaScript, when an exception is thrown, it is caught by the first catch block found in the hierarchy. This behavior remains consistent with the proposed changes. If a block does not catch the exception (either because it lacks a catch block or because the when condition evaluates to false), the exception will propagate up the call stack, where it can be caught by a higher-level catch block.<br>This ensures that the traditional flow of exception handling is preserved. The flexibility introduced by allowing any block to have a catch block (and potentially a when condition) simply extends this existing mechanism, giving developers more control over how and where exceptions are handled, without altering the fundamental principles of exception propagation.<br><br>While some proposals seek to move away from the traditional try-catch structure, often resorting to if statements or introducing new operators, this proposal embraces and expands upon the existing use of braces {} to maintain consistency with the current JavaScript syntax and control flow structures.<br>Braces {} are a fundamental part of JavaScript's syntax, serving as the primary means to define code blocks. By leveraging this familiar structure, the proposal ensures that developers can manage errors within the same framework they use for other control flows like if, for, and while loops.<br><br>Semi-colons ; are also a fundamental part of JavaScript's syntax, serving as the primary means to separate statements. In this proposal, is recommended to use semi-colons to separate statements, but is not mandatory. For example:<br>{ throw new Error("Error in block") } catch

(1 + 1)
<br>The previous code is valid, but is recommended to use semi-colons to separate statements, because the interpreter doesn't know if ( 1 + 1) is part of the catch block or not. Then, the following code is recommended:<br>{ throw new Error("Error in block") } catch; // &lt;-- semicolon

(1 + 1)
<br><br>At its core, error handling is about controlling the flow of execution in the presence of unexpected conditions. By expanding the capabilities of blocks with optional catch and finally clauses, this proposal provides a powerful yet intuitive way to manage errors without introducing new or unfamiliar syntax. The focus remains on enhancing existing structures, ensuring that the language remains coherent and that the learning curve for developers is minimal.<br><br>Moving away from try-catch often results in the use of if statements or other control structures that, while functional, can lead to redundant or less expressive code. This proposal addresses error handling in a more integrated manner, allowing developers to manage exceptions within the same block structure that controls their program's logic.<br><br>Error handling is inherently about structuring your code to handle the unexpected. This proposal keeps the focus on structure by using control flow blocks, rather than introducing operators or new constructs that might disrupt the logical flow of code. By sticking with braces, we ensure that error handling remains a natural extension of the language's existing syntax and philosophy.<br>Important
Storing a value in memory is not the same as telling the interpreter what the next block of statements to execute is.
<br>This proposal advocates for an evolution of JavaScript's error-handling capabilities that respects and enhances the language's foundational structures, ensuring that developers can write cleaner, more maintainable code without sacrificing familiarity or simplicity.<br><br>Currently, JavaScript lacks the ability to type or conditionally handle errors directly in catch blocks, resulting in complex and less readable code. This proposal introduces a more precise and clear way to handle errors, inspired by similar features in languages ​​such as C#, F#, Scala, PL/pgSQL, Ruby, BASIC, Go, and Rust, as well as real-world scenarios where more granular error handling is needed.<br>
<br>
C# and F# when Clause: Both C# and F# provide a when clause in their catch blocks, allowing developers to handle exceptions based on specific conditions. This inspired the idea of bringing a similar conditional mechanism to JavaScript.
try
{
    // Code that may throw an error
}
catch (Exception ex) when (ex.Message.Contains("block"))
{
    Console.WriteLine("Caught an error in block: " + ex.Message);
}


<br>
Scala's Pattern Matching in catch: Scala's ability to use pattern matching within catch blocks, combined with conditional logic, influenced the design of conditional catch blocks with when in this proposal.
try {
    // Code that may throw an error
} catch {
    case ex: Exception if ex.getMessage.contains("block") =&gt;
        println(s"Caught an error in block: ${ex.getMessage}")
}


<br>
PL/pgSQL's EXCEPTION Handling: In PL/pgSQL, the EXCEPTION section within functions allows for specific error handling based on the type of exception, providing a structured approach to managing errors in procedural code. This inspired the idea of enhancing JavaScript's error handling within blocks and functions.
BEGIN
    -- Code that may throw an error
EXCEPTION
    WHEN OTHERS THEN
        -- Error-handling logic
END;


<br>
BASIC's On Error Statement: The On Error mechanism in BASIC languages like Visual Basic offers a way to direct the flow of control when an error occurs, similar to the concept of catch blocks. This inspired the proposal to allow more flexible and conditional error handling in JavaScript.
On Error Goto ErrorHandler
' Code that may throw an error
Exit Sub
ErrorHandler:
' Error-handling logic


<br>
Ruby's rescue with Conditions: Ruby's elegant error-handling using rescue, which can include conditional logic within the block, inspired the flexibility and readability goals of this proposal.
begin
    # Code that may throw an error
rescue =&gt; e
    puts "Caught an error: #{e.message}" if e.message.include?("block")
end


<br>
Go an Rust: Go and Rust allow to catch errors inline, but catch is for control flow, and is important keep this principle. To maintain the control flow, the catch block in this proposal is optional, and the error variable is available in the same scope as the catch block.
// Go
if num, err := strconv.Atoi("123a"); err != nil {
    fmt.Println("Error:", err)
} else {
    fmt.Println("Number:", num)
}

// Rust
let num = "123a".parse::&lt;i32&gt;();

if let Err(e) = num {
    println!("Error: {}", e);
} else {
    println!("Number: {}", num.unwrap());
}


<br>
Real-World Scenarios: The need for more granular control over error handling in complex JavaScript applications highlighted the limitations of the current try-catch structure and motivated the development of this more flexible approach.

<br>By synthesizing these ideas and experiences from various languages and systems, this proposal aims to provide a more powerful and flexible approach to error handling in JavaScript, while maintaining the simplicity and dynamism that the language is known for.<br><br>
<br>
Crockford, Douglas. JavaScript: The Good Parts. O'Reilly Media, 2008. ISBN: 978-0596517748.

<br>
Simpson, Kyle. You Don't Know JS: Scope &amp; Closures. O'Reilly Media, 2014. ISBN: 978-1449335588.

<br>
Hunt, Andrew, and David Thomas. The Pragmatic Programmer: Your Journey to Mastery. Addison-Wesley Professional, 1999. ISBN: 978-0201616224.

<br>
Scott, Michael L. Programming Language Pragmatics. Morgan Kaufmann, 2009. ISBN: 978-0123745149.

<br>
McConnell, Steve. Code Complete: A Practical Handbook of Software Construction. Microsoft Press, 2004. ISBN: 978-0735619678.

<br>
Flanagan, David. JavaScript: The Definitive Guide. O'Reilly Media, 2020. ISBN: 978-1491952023.

<br>
W3Schools. "JavaScript Errors - Throw and Try to Catch". <a rel="noopener nofollow" class="external-link" href="https://www.w3schools.com/js/js_errors.asp" target="_blank">https://www.w3schools.com/js/js_errors.asp</a>

<br>
Mozilla Developer Network. "Error". <a rel="noopener nofollow" class="external-link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error</a>

<br>
Microsoft Docs. "try-catch (C# Reference)". <a rel="noopener nofollow" class="external-link" href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch" target="_blank">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch</a>

<br>
Scala Documentation. "Functional Error Handling". <a rel="noopener nofollow" class="external-link" href="https://docs.scala-lang.org/scala3/book/fp-functional-error-handling.html" target="_blank">https://docs.scala-lang.org/scala3/book/fp-functional-error-handling.html</a>

<br>
PostgreSQL Documentation. "PL/pgSQL - Error Handling". <a rel="noopener nofollow" class="external-link" href="https://www.postgresql.org/docs/13/plpgsql-control-structures.html#PLPGSQL-ERROR-TRAPPING" target="_blank">https://www.postgresql.org/docs/13/plpgsql-control-structures.html#PLPGSQL-ERROR-TRAPPING</a>

<br>
Ruby Documentation. "Exceptions". <a rel="noopener nofollow" class="external-link" href="https://ruby-doc.org/core-3.0.2/doc/syntax/exceptions_rdoc.html" target="_blank">https://ruby-doc.org/core-3.0.2/doc/syntax/exceptions_rdoc.html</a>

<br>
BASIC Programming Language. "On Error Statement". <a rel="noopener nofollow" class="external-link" href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/on-error-statement" target="_blank">https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/on-error-statement</a>

<br>
The Go Programming Language. "Error Handling". <a rel="noopener nofollow" class="external-link" href="https://golang.org/doc/effective_go#errors" target="_blank">https://golang.org/doc/effective_go#errors</a>

<br>
The Rust Programming Language. "Error Handling". <a rel="noopener nofollow" class="external-link" href="https://doc.rust-lang.org/book/ch09-00-error-handling.html" target="_blank">https://doc.rust-lang.org/book/ch09-00-error-handling.html</a>

<br>
JavaScript Standard ECMA-262. <a data-tooltip-position="top" aria-label="https://tc39.es/ecma262/" rel="noopener nofollow" class="external-link" href="https://tc39.es/ecma262/" target="_blank">https://tc39.es/ecma262</a>

<br><br>Rafael Rodríguez Ramírez<br>
<a data-tooltip-position="top" aria-label="mailto:rafageist@divengine.com" rel="noopener nofollow" class="external-link" href="https://rafageist.com/mailto:rafageist@divengine.com" target="_blank">rafageist@divengine.com</a><br>
<a data-tooltip-position="top" aria-label="https://rafageist.com" rel="noopener nofollow" class="external-link" href="https://rafageist.com" target="_blank">rafageist.com</a><br><br>This proposal is licensed under the <a class="internal-link" data-href="./LICENSE" href="https://rafageist.com/LICENSE" target="_self" rel="noopener nofollow">MIT License</a>.]]></description><link>https://rafageist.com/contributions/2024/universal-and-flexible-error-handling-in-ecmascript.html</link><guid isPermaLink="false">Contributions/2024/Universal and Flexible Error Handling in ECMAScript.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 15 Sep 2024 14:30:43 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/pasted-image-20240914184950.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/pasted-image-20240914184950.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Eng. Rafael Rodríguez Ramírez - CV 2025]]> | rafageist</title><description><![CDATA[ 
 <br><img alt="rafageist.jpg" src="https://rafageist.com/lib/media/rafageist.jpg" style="width: 80px; max-width: 100%;"><br>
Rafael Rodríguez Ramírez, Software Engineer<br>
Kristalstraat 39, Paramaribo, Suriname<br>
+5978401275, <a data-tooltip-position="top" aria-label="mailto:rafageist@divengine.com" rel="noopener nofollow" class="external-link" href="https://rafageist.com/mailto:rafageist@divengine.com" target="_blank">rafageist@divengine.com</a>, <a rel="noopener nofollow" class="external-link" href="https://rafageist.com" target="_blank">https://rafageist.com</a><br>Software developer with nearly 30 years of experience. Expert in multiple programming languages and scalable software architectures. Strong problem-solving skills through algorithm design, operations research, and system optimization. Participant in international programming competitions. Extensive experience in project leadership, technological innovation, and process automation.<br><br>Founder &amp; Owner<br>
Divengine Software Solutions · Freelance | 2011 - Present | Paramaribo, Suriname<br>
<br>Software development in C++, C#, Java, PHP, JavaScript, PostgreSQL, Node-RED, Xamarin, .NET MAUI, and Drupal.
<br>Implementation of scalable architectures and automated testing.
<br>Server configuration, administration, and security on Linux.
<br>Development and maintenance of open-source libraries.
<br>Local entrepreneurship and development of systems for small and medium-sized businesses.
<br>Software Engineer<br>
Magaya Corporation | 2020 - Present | United States, Remote<br>
<br>Web and mobile development using C#, JavaScript, Node.js, React.js, Xamarin, and .NET MAUI.
<br>Automated testing and development infrastructure improvements.
<br>Development of logistics and warehouse management systems.
<br>Co-founder, Developer, and Consultant<br>
Apretaste! · Agora Cuba Inc. | 2013 - 2025 | United States, Remote<br>
<br>Development in PHP, PostgreSQL, MySQL, JavaScript, Vue.js, Linux, Flutter, Dart, and Microsoft Azure.
<br>Advanced database administration and query optimization.
<br>Development of a social network.
<br><br><br>Bachelor’s Degree in Computer Science<br>
Technological University of Havana "José Antonio Echeverría" (CUJAE), Cuba | 2005 - 2010<br>
<br>Development in PHP, Borland C++, Microsoft SQL, JavaScript, HTML, CSS, PostgreSQL, Prolog, Delphi, Java 2EE, EJB, Model-Driven Architecture (MDA).
<br>Specialization in UML, RUP, and Rational Software.
<br>BPM, BPMN, and service and process orchestration.
<br>Data warehouse systems.
<br>Study of concept maps and artificial intelligence theory.
<br>Operations research with a focus on dynamic programming and NP-complete problems (university scheduling system as a thesis).
<br>Participant in the ACM ICPC Mexico 2010 regional programming competition.
<br>Development of university management systems.
<br>High School Diploma in Exact Sciences<br>
Vocational Pre-University Institute of Exact Sciences Vladimir Ilich Lenin | 2001 - 2004<br>
<br>Programming in Basic, Visual Basic, Visual Basic for Applications, and Borland Pascal.
<br>Windows 98 operating systems.
<br>Training in operations research and IOI programming competitions.
<br>Development of databases and inventory systems for schools.
<br>Primary and Secondary Education<br>
School from 6th grade | 1997 - 2000<br>
<br>Development in Mallard BASIC, QBasic, Turbo Pascal, DBase II, and SuperCalc.
<br>Operating systems: CP/M, MS-DOS 6.22, Windows 3.1, and Windows 95.
<br>Development of databases and inventory systems for schools.
<br><br>
<br>Spanish: Native
<br>English: Advanced
]]></description><link>https://rafageist.com/curriculum-vitae/eng.-rafael-rodríguez-ramírez-cv-2025.html</link><guid isPermaLink="false">Curriculum Vitae/Eng. Rafael Rodríguez Ramírez - CV 2025.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:42:50 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/rafageist.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/rafageist.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Ing. Rafael Rodríguez Ramírez - CV 2025]]> | rafageist</title><description><![CDATA[ 
 <br><img alt="rafageist.jpg" src="https://rafageist.com/lib/media/rafageist.jpg" style="width: 80px; max-width: 100%;"><br>
Rafael Rodríguez Ramírez, Ingeniero en Informática<br>
Kristalstraat 39, Paramaribo, Suriname<br>
+5978401275, <a data-tooltip-position="top" aria-label="mailto:rafageist@divengine.com" rel="noopener nofollow" class="external-link" href="https://rafageist.com/mailto:rafageist@divengine.com" target="_blank">rafageist@divengine.com</a>, <a rel="noopener nofollow" class="external-link" href="https://rafageist.com" target="_blank">https://rafageist.com</a><br>Desarrollador de software con casi 30 años de experiencia en desarrollo. Experto en múltiples lenguajes de programación y arquitecturas de software escalables. Destacado en la solución de problemas mediante algoritmia, investigación de operaciones y optimización de sistemas. Participante en competencias internacionales de programación. Amplia experiencia en liderazgo de proyectos, innovación tecnológica y automatización de procesos.<br><br>Fundador &amp; Dueño<br>
Divengine Software Solutions · Autónomo | 2011- Hoy  | Paramaribo, Suriname<br>
<br>Desarrollo de software en C++, C#, Java, PHP, JavaScript, PostgreSQL, Node-RED, Xamarin, .NET MAUI, Drupal.
<br>Implementación de arquitecturas escalables y testing automatizado.
<br>Configuración, administración y seguridad en servidores Linux.
<br>Desarrollo y mantenimiento de bibliotecas de código abierto.
<br>Emprendimiento local y desarrollo de sistemas para pequeños y medianos negocios.
<br>Ingeniero de Software<br>
Magaya Corporation |  2020 - Hoy | Estados Unidos, Trabajo Remoto<br>
<br>Desarrollo Web y Movil en C#, JavaScript, Node.js, React.js, Xamarin, .NET MAUI.
<br>Pruebas automatizadas y mejora de la infraestructura de desarrollo.
<br>Desarrollo de sistemas de logística y administración de almacenes
<br>Cofundador, Desarrollador y Consultor<br>
Apretaste! · Agora Cuba Inc. |  2013 - 2025 | Estados Unidos, Trabajo Remoto<br>
<br>Desarrollo en PHP, PostgreSQL, MySQL, JavaScript, Vue.js, Linux, Flutter, Dart, Microsoft Azure.
<br>Administración avanzada de bases de datos y optimización de consultas.
<br>Desarrollo de red social


<br><br>Ingeniería Informática<br>
Universidad Tecnológica de La Habana "José Antonio Echeverría", CUJAE, Cuba | 2005 - 2010<br>
<br>Desarrollo en PHP, Borland C++, Microsoft SQL, JavaScript, HTML, CSS, PostgreSQL, Prolog, Delphi, Java 2EE, EJB, Model Driven Architecture (MDA).
<br>Especialización en UML, RUP y Rational Software.
<br>BPM, BPMN y orquestación de servicios y procesos.
<br>Sistemas de data warehouse.
<br>Estudio de mapas conceptuales y teoría de inteligencia artificial.
<br>Investigación de operaciones con enfoque en programación dinámica y problemas NP-Completos (generador de horarios como tesis de pregrado)
<br>Participación en la competencia regional de programación ACM ICPC México 2010.
<br>Desarrollo en sistemas de gestión universitaria
<br>Bachillerato en Ciencias Exactas<br>
Instituto Pre-Universitario Vocacional de Ciencias Exactas Vladimir Ilich Lenin | 2001 - 2004<br>
<br>Programación en Basic, Visual Basic, Visual Basic para Aplicaciones y Borland Pascal.
<br>Sistemas operativos Windows 98
<br>Formación en investigación de operaciones y competencias de programación IOI.
<br>Desarrollo de bases de datos y sistemas de inventario para escuelas
<br>Escuela Primaria y Secundaria<br>
Escuela desde el 6to grado | 1997-2000<br>
<br>Desarrollo en Mallard BASIC, QBasic, Turbo Pascal, DBase II, SuperCalc
<br>Sistemas operativos CP/M y MS-DOS 6.22, Windows 3.1 y Windows 95
<br>Desarrollo de bases de datos y sistemas de inventario para escuelas
<br><br>
<br>Español: Nativo
<br>Inglés: Avanzado
]]></description><link>https://rafageist.com/curriculum-vitae/ing.-rafael-rodríguez-ramírez-cv-2025.html</link><guid isPermaLink="false">Curriculum Vitae/Ing. Rafael Rodríguez Ramírez - CV 2025.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:42:50 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/rafageist.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/rafageist.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1997 - Introduction to Computing]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a><br>In February 1997, at the age of 11 and while in the 6th grade, I had my first encounter with a computer. This moment marked the beginning of my fascination with technology.<br><br>Before typing a single line of code, I was introduced to the art of planning and designing programs using flowcharts. This foundational step involved mapping out the logical flow of the program's execution, identifying decision points, and specifying the sequence of operations. Understanding the importance of a well-structured plan laid the groundwork for my programming endeavors on the <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Amstrad_PCW" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Amstrad_PCW" target="_blank">Amstrad PCW</a>. Armed with flowcharts, I translated these visual representations into <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Mallard_BASIC" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Mallard_BASIC" target="_blank">Mallard BASIC language</a>. (Resource: <a data-href="Mallard Basic" href="https://rafageist.com/resources/mallard-basic.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCube" aria-label="FasCube" data-icon="FasCube" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M234.5 5.7c13.9-5 29.1-5 43.1 0l192 68.6C495 83.4 512 107.5 512 134.6V377.4c0 27-17 51.2-42.5 60.3l-192 68.6c-13.9 5-29.1 5-43.1 0l-192-68.6C17 428.6 0 404.5 0 377.4V134.6c0-27 17-51.2 42.5-60.3l192-68.6zM256 66L82.3 128 256 190l173.7-62L256 66zm32 368.6l160-57.1v-188L288 246.6v188z"></path></svg></span>Mallard Basic</a>) code, fostering a holistic approach to problem-solving in the world of computing.<br><img src="https://www.plantuml.com/plantuml/png/TP8zJyCm48PtI_uFjv5Ah2pDq28X0Gi338ZHmMTYrV55jWE4Ny_PSL4_w63bSX_F-_faAROngP2cmKbH8YcaMDyw5GRu88n0nhHIM0FDdTKmqmIzJP1wXEY9VX2wAINocrNEUMZUCAwa05Y_AkwxWS7wAM5iSoxWY2hbYEjd6liwVFNM8JGlXtmO0yQ8UiDmT97BJxJet6C2clWOw50NJdRx687r5SJtdiY1LlEPnJeSKEaP38NQsowr37bGdxZSMMdek75dL4p_W1ZrN329m25FLSYHrT9Ma7-eTfy_NCrbtEcABlchubvRayCJ5ynswlkQztCLmTFnbefIdQoV_39eb6BB_-MX_080" usemap="#TP8zJyCm48PtI_uFjv5Ah2pDq28X0Gi338ZHmMTYrV55jWE4Ny_PSL4_w63bSX_F-_faAROngP2cmKbH8YcaMDyw5GRu88n0nhHIM0FDdTKmqmIzJP1wXEY9VX2wAINocrNEUMZUCAwa05Y_AkwxWS7wAM5iSoxWY2hbYEjd6liwVFNM8JGlXtmO0yQ8UiDmT97BJxJet6C2clWOw50NJdRx687r5SJtdiY1LlEPnJeSKEaP38NQsowr37bGdxZSMMdek75dL4p_W1ZrN329m25FLSYHrT9Ma7-eTfy_NCrbtEcABlchubvRayCJ5ynswlkQztCLmTFnbefIdQoV_39eb6BB_-MX_080"><br><br><img alt="Amstrad PCW.png" src="https://rafageist.com/lib/media/amstrad-pcw.png" style="width: 300px; max-width: 100%;"><br>The first computer I started working with was an Amstrad PCW. This device operated on the <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/CP/M" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/CP/M" target="_blank">CP/M</a> operating system, and it was here that I initiated my programming journey using the Mallard BASIC language.<br>My first program, written in Mallard BASIC, was a simple yet meaningful one. It prompted the user to input a list of integers, calculated their average, and displayed the result. <br><br><img alt="CPM-Disketes.png" src="https://rafageist.com/lib/media/cpm-disketes.png"><br>
The initiation into the world of programming in 1997, with the Amstrad PCW and Mallard BASIC, was a journey through a tapestry of complexities. <br>Picture this: powering up the Amstrad PCW and inserting the CP/M operating system floppy disk was just the initial step. Once the system sprang to life, the intricate ballet of floppy disks continued. The transition from the CP/M disk to the BASIC disk marked the next phase, laying the groundwork for programming. However, the process didn't conclude there. The final layer of complexity unfolded as the BASIC disk made way for the dedicated program disk—a repository for both loading and saving code. <br>This orchestrated sequence of floppy disks, each with its specific role, added an extra layer of intricacy to the act of programming, turning it into a thoughtful and deliberate endeavor.<br><br>10 INPUT "Enter the number of integers: ", N 
20 TOTAL = 0 
30 FOR I = 1 TO N 
40 INPUT "Enter an integer: ", A 
50 TOTAL = TOTAL + A 
60 NEXT I 
70 AVERAGE = TOTAL / N 
80 PRINT "The average is "; AVERAGE
<br>This straightforward program not only introduced me to the fundamentals of programming but also ignited my passion for exploring the possibilities within the world of coding.<br><br>Writing programs during those times presented unique challenges. Unlike modern graphical text editors, I didn't have the luxury of a user-friendly interface. Instead, I interacted with the code using command-line instructions. Listing and editing lines of code required a series of commands, making the coding process a meticulous and sometimes arduous task. Despite the challenges, it laid the foundation for my coding skills and instilled a sense of perseverance in the face of technological constraints.<br><br><br>To list all lines of code in your Mallard BASIC program, you would use the LIST command: <br>LIST
<br>This command displays the entire program on the screen, providing a comprehensive view of your written code.<br><br>To edit a specific line of code, you can use the EDIT command followed by the line number. In the context of Mallard BASIC, this would open a text-based interface, showing the line you're editing. After making modifications, pressing Enter would save your changes:<br>EDIT 10
<br>This example opens a text-based interface for editing line 10, allowing you to make modifications. After editing, pressing Enter would save your changes.<br><br>To add new lines of code, you can specify the line number followed by a space and then the code you wish to add. If the line already exists, it will open in the text-based editor; otherwise, a new line will be created directly.<br>50 PRINT "This is a new line"`
<br>This example adds a new line at line number 50 with the specified code.<br><br>To delete lines of code, utilize the DELETE command followed by the range of lines you want to remove.<br>DELETE 30-40
<br>This example deletes lines 30 to 40 from the program.<br>Editing Mallard BASIC code in this manner was a unique experience, providing a text-based interface where you could directly interact with and modify each line of code.<br><br><br>To execute a Mallard BASIC program, you would use the RUN command:<br>RUN
<br>This command initiates the execution of the loaded program in RAM.<br><br>To interrupt or stop a running program, you could use the key combination CTRL + C. This keyboard shortcut would halt the execution of the program.<br><br>Due to the absence of a hard disk on the Amstrad PCW, program storage was facilitated through the use of 3-inch floppy disks. You could load a program into memory using the LOAD command:<br>LOAD "PROGRAM.BAS"
<br>Conversely, to save a program to a floppy disk, you would use the SAVE command:<br>SAVE "PROGRAM.BAS"
<br>These commands allowed you to transfer programs between the Amstrad PCW and external storage.<br>The Amstrad PCW, lacking a hard drive, relied on the limited but versatile 3-inch floppy disks for program storage and transfer.<br><br>Looking back, one of the remarkable aspects of programming on the Amstrad PCW was the minimalistic and distraction-free environment it provided. In contrast to the multitasking-rich environments of today's technologies, the simplicity of the Amstrad PCW encouraged focused learning and programming.<br>With few distractions, I could immerse myself in the world of coding without the constant interruptions and temptations present in modern computing environments. This uncluttered space allowed for a deeper understanding of programming concepts, fostering a strong foundation for my journey as a programmer.<br><br>In today's fast-paced digital landscape, the ability to multitask is often considered a valuable skill. However, for beginners diving into the world of programming, multitasking can be a significant obstacle. The Amstrad PCW's limited distractions inadvertently created an optimal learning space, enabling me to concentrate on the essential aspects of coding without the complexities of managing multiple applications simultaneously.<br>This intentional focus on a single task at a time facilitated a more profound comprehension of programming principles and laid the groundwork for a successful programming career.<br><br><br>One of the most remarkable aspects of my early programming journey was the opportunity to start learning at a young age. The formative years offer an invaluable window of opportunity to absorb new concepts and skills rapidly. As I navigated the world of programming on the Amstrad PCW, I realized that laying the groundwork for a programming mindset early on was akin to constructing a solid foundation for a building.<br><br>Numerous studies suggest that early exposure to programming and computational thinking enhances cognitive development in children. Learning to code involves problem-solving, logical reasoning, and creativity—skills that are not only fundamental to programming but also contribute to overall cognitive growth.<br>The Amstrad PCW, despite its vintage charm, served as a time machine for me, transporting me to an era where the seeds of programming curiosity were planted early. The structured and logical nature of coding provided a mental workout that undoubtedly contributed to my cognitive development.<br><br>Learning to program at a young age instills a sense of familiarity and comfort with technology. In an era where digital literacy is increasingly vital, early exposure to programming equips individuals with a skill that transcends age and continues to be relevant throughout life.<br>The Amstrad PCW, as my first programming playground, played a crucial role in fostering this early connection with technology. The lessons learned during those early coding endeavors set the stage for a lifelong affinity with programming and technology in general.<br><br>The simplicity of the Amstrad PCW environment encouraged a sense of curiosity and exploration. The absence of overwhelming complexities allowed me to experiment, make mistakes, and learn from them. This spirit of discovery, nurtured from a young age, remains a driving force behind my passion for problem-solving and creative expression through programming.<br><br>While the technology landscape has evolved significantly since the Amstrad PCW era, the timeless importance of introducing programming at a young age remains steadfast. Early exposure to coding not only builds practical skills but also instills a mindset of curiosity, resilience, and innovation.<br>As we reflect on the intersection of technology and education, fostering an environment that encourages children to explore the world of programming becomes a key investment in shaping the innovators of tomorrow. The Amstrad PCW, with its simplicity and early introduction to programming, served as a catalyst in nurturing the seeds of innovation that continue to grow to this day.<br><br><img alt="Carmen San Diego Game.png" src="https://rafageist.com/lib/media/carmen-san-diego-game.png"><br>
The seeds of my journey into the realm of programming were planted in 1997 when, as a young enthusiast, I crafted a game replica of the iconic <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Carmen_Sandiego" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Carmen_Sandiego" target="_blank">Carmen Sandiego</a> using Mallard BASIC on the Amstrad PCW. This venture, sparked by a day of gaming inspiration, led to the creation of intricate flowcharts and over 500 lines of code. It was this commitment and earnest effort that caught the attention of my professor, igniting a mentorship that went beyond the ordinary classroom interactions. This pivotal moment marked the beginning of a more dedicated exploration of software development, where my passion for programming began to transcend the realm of hobbyist curiosity.<br><br>My journey with the Amstrad PCW has been a revealing exploration that has left a lasting imprint on my path as a programmer. From learning the basics of program design through flowcharts to experimenting with Mallard BASIC in a minimalist environment, each phase has contributed to my unique understanding of programming.<br>The execution and management of programs on the Amstrad PCW, with its focus on efficiency and simplicity, highlights the significance of a distraction-free environment. In contrast to today's complexities, this environment provided the necessary space for deep immersion in programming and learning without constant interruptions.<br>Exploring the importance of learning to program from an early age underscores the enduring relevance of cultivating programming skills and mindsets from childhood. The cognitive and practical benefits of this early exposure persist throughout life, contributing to a strong connection with technology.<br>In summary, the Amstrad PCW, though a relic of the past, has proven to be an invaluable mentor in my journey as a programmer. Its simplicity, emphasis on careful design and efficient execution, and the importance of starting early in programming learning have formed the pillars of my approach to computer science. As we navigate a constantly evolving technological world, these timeless lessons serve as fundamental guides in the practice and education of programming.]]></description><link>https://rafageist.com/professional-journey/1997-2000/1997-introduction-to-computing.html</link><guid isPermaLink="false">Professional Journey/1997-2000/1997 - Introduction to Computing.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 25 Feb 2024 00:34:26 GMT</pubDate><enclosure url="https://www.plantuml.com/plantuml/png/TP8zJyCm48PtI_uFjv5Ah2pDq28X0Gi338ZHmMTYrV55jWE4Ny_PSL4_w63bSX_F-_faAROngP2cmKbH8YcaMDyw5GRu88n0nhHIM0FDdTKmqmIzJP1wXEY9VX2wAINocrNEUMZUCAwa05Y_AkwxWS7wAM5iSoxWY2hbYEjd6liwVFNM8JGlXtmO0yQ8UiDmT97BJxJet6C2clWOw50NJdRx687r5SJtdiY1LlEPnJeSKEaP38NQsowr37bGdxZSMMdek75dL4p_W1ZrN329m25FLSYHrT9Ma7-eTfy_NCrbtEcABlchubvRayCJ5ynswlkQztCLmTFnbefIdQoV_39eb6BB_-MX_080" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://www.plantuml.com/plantuml/png/TP8zJyCm48PtI_uFjv5Ah2pDq28X0Gi338ZHmMTYrV55jWE4Ny_PSL4_w63bSX_F-_faAROngP2cmKbH8YcaMDyw5GRu88n0nhHIM0FDdTKmqmIzJP1wXEY9VX2wAINocrNEUMZUCAwa05Y_AkwxWS7wAM5iSoxWY2hbYEjd6liwVFNM8JGlXtmO0yQ8UiDmT97BJxJet6C2clWOw50NJdRx687r5SJtdiY1LlEPnJeSKEaP38NQsowr37bGdxZSMMdek75dL4p_W1ZrN329m25FLSYHrT9Ma7-eTfy_NCrbtEcABlchubvRayCJ5ynswlkQztCLmTFnbefIdQoV_39eb6BB_-MX_080"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1997 - Unveiling the World of LocoScript]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><br><img alt="LocoScript.png" src="https://rafageist.com/lib/media/locoscript.png"><br>
In the intricate tapestry of 1997, a pivotal chapter unfolds as I delve into the world of <a data-tooltip-position="top" aria-label="https://es.wikipedia.org/wiki/LocoScript" rel="noopener nofollow" class="external-link" href="https://es.wikipedia.org/wiki/LocoScript" target="_blank">Locoscript</a> on the Amstrad PCW. Developed by Locomotive Software, Locoscript served as the cornerstone of word processing for these personal computers. This period not only marked my initiation into word processing but also revealed the remarkable capabilities of the PCW keyboard, which could seamlessly transcribe text even in Cyrillic.<br>Locoscript, with its intuitive interface and multifaceted features, became my gateway to the fascinating realm of word processing. Picture the resonance of keystrokes echoing a journey of linguistic exploration, as the PCW keyboard transformed into a versatile tool for creative expression. In this section, we navigate the nuances of my first word processing experiences, exploring how Locoscript's capabilities transformed the act of typing into a harmonious symphony of languages and creativity.]]></description><link>https://rafageist.com/professional-journey/1997-2000/1997-unveiling-the-world-of-locoscript.html</link><guid isPermaLink="false">Professional Journey/1997-2000/1997 - Unveiling the World of LocoScript.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Mon, 12 Feb 2024 03:45:25 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/locoscript.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/locoscript.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1998 - Journey into MS-DOS and GW-BASIC]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><img alt="XT8086-GWBASIC.png" src="https://rafageist.com/lib/media/xt8086-gwbasic.png" style="width: 300px; max-width: 100%;"><br>
<a data-tooltip-position="top" aria-label="https://www.reddit.com/r/retrobattlestations/comments/tq2wvg/team_orange_unknown_ibm_pcxt_8088_clone_w/" rel="noopener nofollow" class="external-link" href="https://www.reddit.com/r/retrobattlestations/comments/tq2wvg/team_orange_unknown_ibm_pcxt_8088_clone_w/" target="_blank">Picture from Internet</a><br>Embark on a nostalgic journey to the year 1998, a pivotal chapter in my professional evolution where I transitioned from Mallard Basic to the realms of MS-DOS 6.22 and GW-BASIC. Picture an XT 8086 machine as the canvas for my coding endeavors, accompanied by a distinctive Hercules monochromatic orange monitor against a backdrop of deep black. In this environment, I delved into the intricacies of MS-DOS and explored the capabilities of GW-BASIC, marking a significant stride in my programming odyssey. Join me as we revisit this era of text-based interfaces and foundational coding experiences that paved the way for further technological exploration.<br>Venturing into the realm of GW-BASIC in 1998 marked a significant shift in my programming landscape. Unlike its predecessor, Mallard BASIC, GW-BASIC brought a new level of flexibility to code editing. Its more advanced capabilities allowed for a more dynamic and versatile coding experience, while still retaining the command-driven nature intrinsic to BASIC languages. This transition coincided with a move to a PC environment, a departure from the Amstrad PCW. The XT 8086 machine, coupled with MS-DOS 6.22, provided a platform compatible with IBM standards, opening doors to broader compatibility and expanding the horizons of my programming exploration.]]></description><link>https://rafageist.com/professional-journey/1997-2000/1998-journey-into-ms-dos-and-gw-basic.html</link><guid isPermaLink="false">Professional Journey/1997-2000/1998 - Journey into MS-DOS and GW-BASIC.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 10 Feb 2024 23:26:52 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/xt8086-gwbasic.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/xt8086-gwbasic.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1999 - Transitioning to MS-DOS on Amstrad PC XT 86]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><img alt="Amstrad XT 86.png" src="https://rafageist.com/lib/media/amstrad-xt-86.png"><br>In the evolving landscape of 1999, my programming odyssey took a leap forward with the transition to the Amstrad PC XT 86. Adorned with CGA and EGA monitors, this platform not only expanded the visual dimensions of my coding environment but also marked the continued embrace of MS-DOS.<br>Enter Microsoft's QuickBASIC—a revolutionary shift in my programming toolkit. QuickBASIC surpassed its predecessors with a sophisticated editor and environment that redefined my coding experience. Debugging became more intuitive, and the inclusion of a modern text editor, mouse support, dropdown menus, and dialog boxes elevated the programming process.<br>The introduction of a Immediate Window allowed for on-the-fly execution of BASIC instructions, adding a dynamic layer to code development. This era of MS-DOS, Amstrad PC XT 86, and QuickBASIC brought about a convergence of efficiency and modernity, laying the groundwork for more intricate coding projects and setting a new standard for my programming endeavors.<br><img alt="QuickBasic.png" src="https://rafageist.com/lib/media/quickbasic.png"><br><br>Fast forward to the late '90s and early 2000s, a significant chapter in my programming chronicles unfolded as I immersed myself in QuickBASIC on the Amstrad PC XT 86. Over an extensive period of nearly 3 to 4 years, I devoted my efforts to three pivotal projects that laid the foundation for my formative years as a developer.<br>
<br>Replica of Carmen Sandiego Game: Building upon my earlier Mallard BASIC endeavor, I recreated the Carmen Sandiego game in QuickBASIC. This project not only showcased my evolving programming skills but also demonstrated my commitment to pushing boundaries and refining my craft.
<br>Student Database Management System: A robust system for managing student databases in schools emerged from my coding endeavors. This project delved into the complexities of data organization and manipulation, offering practical solutions for educational institutions.
<br>Warehouse Inventory System: With an eye for efficiency, I developed a comprehensive inventory management system for warehouses. This project not only streamlined logistical processes but also honed my ability to create practical solutions tailored to specific needs.
<br>These ventures, all accomplished in the text-mode environment of QuickBASIC, not only provided practical solutions but also served as a playground for refining my coding skills. The commitment to these projects and the hands-on experience with QuickBASIC became the crucible in which my passion for software development solidified, setting the stage for the next chapters of my programming journey.<br><br>In the ever-evolving landscape of programming, some gems of code and creativity are, unfortunately, lost to the sands of time. Such is the case with a collection of early QuickBASIC programs that once adorned the screens of my coding endeavors.<br>These programs, born from a fusion of passion and exploration, represented pivotal moments in my journey as a developer. From ASCII artistry to windowed wonders, each line of code told a story of innovation and learning.<br>Regrettably, the original source codes of these creations have slipped through the cracks of time. However, the spirit and lessons learned from those coding adventures remain vibrant and alive. In an effort to preserve and share a glimpse of that journey, I embark on a mission to recreate fragments of these lost programs.<br>Throughout this website, you'll find snippets, reimaginings, and glimpses into the past. While the exact codes may be lost, the essence of the projects will be revived, offering a nod to the early days of exploration and coding enthusiasm.<br>Join me on this digital archaeology expedition as we resurrect fragments of the past, celebrating the resilience of creativity and the enduring spirit of a programmer's journey.<br><br>In the pursuit of my formative projects with QuickBASIC, I found myself not just coding solutions but crafting the very tools that fueled my creative endeavors. One of the significant contributions to this period was the development of a library designed for creating graphical components in ASCII mode. This versatile library allowed the creation of windows, dropdown menus, controlled text input, buttons, and even shaded elements—all within the constraints of a 25x80 character screen with 32 available colors and the expansive canvas of ASCII's 255 characters.<br>SUB Window(row, col, width, height, fgColor, bgColor)
    ' Set foreground and background colors
    COLOR bgColor, fgColor

    ' ASCII characters for borders
    DIM SHARED borderChars(3)
    borderChars(1) = 218 ' ┌
    borderChars(2) = 191 ' ┐
    borderChars(3) = 196 ' ─

    ' Draw top-left corner
    LOCATE row, col
    PRINT CHR$(borderChars(1));

    ' Draw top-right corner
    LOCATE row, col + width - 1
    PRINT CHR$(borderChars(2));

    ' Draw top border
    FOR i = 1 TO width - 3
        LOCATE row, col + i
        PRINT CHR$(borderChars(3));
    NEXT i

    ' Draw vertical sides
    FOR i = 1 TO height - 2
        LOCATE row + i, col
        PRINT CHR$(179); ' │
        LOCATE row + i, col + width - 1
        PRINT CHR$(179);
    NEXT i

    ' Draw bottom-left corner
    LOCATE row + height - 1, col
    PRINT CHR$(192); ' └

    ' Draw bottom-right corner
    LOCATE row + height - 1, col + width - 1
    PRINT CHR$(217); ' ┘

    ' Restore default colors
    COLOR 7, 0
END SUB
<br>' Example of using the Window subroutine<br>CLS
CALL Window(5, 10, 30, 10, 12, 1)  ' Draw a window at position (5, 10), width 30, height 10, colors 12 and 1
<br>Among the notable achievements was the construction of a program dedicated to "painting in ASCII." This tool went beyond the conventional boundaries, enabling the creation, saving, and loading of ASCII-based artwork. What set this tool apart was its ability to compress the saved artwork, a feat achieved by intelligently storing repetitive characters and colors. Similar characters and colors were efficiently stored as references, minimizing the bytes required to represent these ASCII images. This compression technique not only conserved storage but also paved the way for intricate and visually captivating projects, enhancing the efficiency of the creative process and leaving a lasting imprint on my programming journey.]]></description><link>https://rafageist.com/professional-journey/1997-2000/1999-transitioning-to-ms-dos-on-amstrad-pc-xt-86.html</link><guid isPermaLink="false">Professional Journey/1997-2000/1999 - Transitioning to MS-DOS on Amstrad PC XT 86.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 10 Feb 2024 23:26:52 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/amstrad-xt-86.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/amstrad-xt-86.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2000 - Embracing WordStar, SuperCalc, and dBase]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><br>The turn of the century not only marked a transition in technology but also a period of broadening my skill set. Amid the evolving landscape of word processing software, I ventured into the realm of WordStar. This classic word processing program, known for its robust features and popularity in the early days of personal computing, offered a distinct approach to document creation.<br>Learning WordStar wasn't just about mastering a specific tool; it was a journey into the evolution of word processing itself. Command-driven and efficient, WordStar challenged conventional expectations, providing a glimpse into the roots of modern document editing.<br><br><img alt="SuperCalc.png" src="https://rafageist.com/lib/media/supercalc.png"><br>
As my journey in technology advanced, so did my exploration of business applications. The era witnessed my initiation into the world of spreadsheets, with a focus on SuperCalc. This groundbreaking spreadsheet application, initially published by Sorcim in 1980 for CP/M-80, became a vital tool in the realm of data manipulation and analysis.<br>Mastering SuperCalc involved understanding the intricacies of spreadsheet architecture, formula creation, and data visualization. The skills honed during this period laid the groundwork for future engagements with spreadsheet applications that would become ubiquitous in the professional world.<br><br><img alt="dBase.png" src="https://rafageist.com/lib/media/dbase.png"><br><br>During the period from 1999 to 2001, my technological odyssey led me into the realm of dBase, a pioneering database management system that left an indelible mark on the landscape of personal computing.<br><br>dBase emerged as one of the earliest database management systems, captivating users with its user-friendly approach to handling data. Developed by Ashton-Tate in the late 1970s, it quickly gained popularity for its simplicity and versatility. dBase allowed users to create, organize, and manipulate databases with relative ease, making it a go-to solution for businesses and software developers.<br><br>Delving into dBase meant understanding the fundamental principles of database management. The journey involved:<br><br>
<br>Crafting the blueprint of databases, defining fields, and establishing the structure that would house the data.
<br><br>
<br>Learning the art of data entry, modification, and deletion, ensuring the integrity of the information stored.
<br><br>
<br>Mastering the art of extracting meaningful insights by querying databases, a skill crucial for informed decision-making.
<br><br>
<br>Understanding how to establish relationships between tables, a key aspect for managing interconnected data.
<br><br>While dBase's popularity has waned over the years, its legacy persists in the evolution of modern database systems. It paved the way for subsequent generations of DBMS and influenced the way we interact with and harness the power of data.<br>The exploration of dBase marked a crucial chapter in my technological journey, providing a solid foundation in database management principles. Little did I know that these early experiences would prove invaluable in navigating the ever-expanding landscape of information technology.]]></description><link>https://rafageist.com/professional-journey/1997-2000/2000-embracing-wordstar,-supercalc,-and-dbase.html</link><guid isPermaLink="false">Professional Journey/1997-2000/2000 - Embracing WordStar, SuperCalc, and dBase.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 10 Feb 2024 23:30:31 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/supercalc.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/supercalc.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2001-2004 Expanding Horizons with Windows, Visual Basic and Pascal]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><img alt="AT 386.png" src="https://rafageist.com/lib/media/at-386.png"><br>
The turn of the millennium marked a significant expansion of my programming horizons as I delved into the realms of Microsoft Windows 95 and 98, the Office suite of '98, and the powerful Visual Studio 6. This period, coinciding with my high school years, witnessed my initiation into the world of Visual Basic 6 and Pascal programming through Turbo Pascal.<br><br><img alt="VisualBasic6.png" src="https://rafageist.com/lib/media/visualbasic6.png"><br>
Visual Basic 6 became my gateway into Windows application development. The intuitive graphical interface and seamless integration with Windows APIs allowed me to create applications with a rich user interface. This era saw the birth of diverse projects, ranging from utility applications to explorations in graphical interfaces that would shape my understanding of software design.<br><br><img alt="Turbo Pascal.png" src="https://rafageist.com/lib/media/turbo-pascal.png"><br>In parallel, my journey into the world of competitive programming took a significant leap with the adoption of Turbo Pascal. Motivated by the prospect of participating in the International Olympiad in Informatics (IOI), I joined high-performance computing training programs. These programs aimed to equip participants with advanced algorithmic skills to tackle complex problems.<br>Simple Hello World in PASCAL<br>program HelloWorld;

begin
  Writeln('Hello, World!');
end.
<br><br>The IOI stands as a prestigious annual programming competition for secondary school students from around the globe. It challenges participants with algorithmic problems that demand creativity, problem-solving prowess, and a deep understanding of computer science principles.<br><br>Participation in the <a data-tooltip-position="top" aria-label="https://ioinformatics.org/" rel="noopener nofollow" class="external-link" href="https://ioinformatics.org/" target="_blank">IOI</a> necessitated rigorous training sessions that transcended conventional classroom teachings. These high-performance training programs focused on honing algorithmic thinking, problem-solving strategies, and efficient coding practices. The experience not only prepared me for the IOI challenges but also instilled a profound appreciation for the elegance and efficiency of well-crafted algorithms.<br>This era of exploration in Windows development and competitive programming laid the foundation for the diverse skills that would become integral to my future as a software developer. The fusion of practical application in Windows environments and the abstract beauty of algorithmic problem-solving fueled a passion that would continue to shape my programming journey in the years to come.]]></description><link>https://rafageist.com/professional-journey/2001-2005/2001-2004-expanding-horizons-with-windows,-visual-basic-and-pascal.html</link><guid isPermaLink="false">Professional Journey/2001-2005/2001-2004 Expanding Horizons with Windows, Visual Basic and Pascal.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 24 Mar 2024 17:04:16 GMT</pubDate><enclosure url="https://rafageist.com/lib/media/at-386.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://rafageist.com/lib/media/at-386.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2003-2005 Financial Solutions and Database Dynamics]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><br>Entering the realm of advanced technology in 2003, the focus shifted towards <a data-tooltip-position="top" aria-label="https://learn.microsoft.com/en-us/office/vba/api/overview/" rel="noopener nofollow" class="external-link" href="https://learn.microsoft.com/en-us/office/vba/api/overview/" target="_blank">Visual Basic for Applications (VBA)</a>. This period witnessed an intensified engagement with VBA within the Microsoft Office suite, particularly Excel. The projects undertaken were no longer confined to basic applications; instead, they delved into the intricacies of financial modeling and automation.<br><br>Microsoft Excel emerged as the canvas for crafting intricate financial solutions. Harnessing the power of VBA, complex financial models took shape, offering dynamic insights and streamlining processes. The fusion of finance and technology opened new horizons, transforming Excel into a robust financial analytics tool.<br><br>Simultaneously, Microsoft Access became the playground for crafting comprehensive database systems. The integration of VBA into Access projects brought forth a new dimension in data management. From designing relational databases to implementing custom forms and reports, the focus extended beyond Excel, establishing a stronghold in database dynamics.<br><br>The years from 2003 to 2005 encapsulated a chapter of advanced VBA mastery, where the amalgamation of financial expertise and programming prowess led to the creation of sophisticated solutions. The journey into the intricate realms of Excel and Access with VBA laid the groundwork for future explorations in the convergence of finance, databases, and automation.]]></description><link>https://rafageist.com/professional-journey/2001-2005/2003-2005-financial-solutions-and-database-dynamics.html</link><guid isPermaLink="false">Professional Journey/2001-2005/2003-2005 Financial Solutions and Database Dynamics.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 11 Feb 2024 15:04:31 GMT</pubDate></item><item><title><![CDATA[1997-2000 - Formative Coding Years]]> | rafageist</title><description><![CDATA[ 
 <br><br>The journey began in 1997 at the age of 11, where the world of computing unfolded before me. The Amstrad PCW, operating on CP/M, introduced me to Mallard BASIC, sparking my inaugural foray into programming. Crafting my first program—calculating and displaying the average of a list of integers—marked the inception of a lifelong passion.<br>
<br><a data-href="1997 - Introduction to Computing" href="https://rafageist.com/professional-journey/1997-2000/1997-introduction-to-computing.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarCheck" aria-label="FasCalendarCheck" data-icon="FasCalendarCheck" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z"></path></svg></span>1997 - Introduction to Computing</a>
<br><a data-href="1997 - Unveiling the World of LocoScript" href="https://rafageist.com/professional-journey/1997-2000/1997-unveiling-the-world-of-locoscript.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarCheck" aria-label="FasCalendarCheck" data-icon="FasCalendarCheck" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z"></path></svg></span>1997 - Unveiling the World of LocoScript</a>
<br><br>The subsequent years saw a significant expansion of skills. In 1998, the introduction of MS-DOS 6.22 and GW Basic on a XT 8086 with a monochromatic display marked a pivotal shift. Quick Basic became the canvas for three transformative projects—replicating Carmen Sandiego, managing student databases, and developing a warehouse inventory system—all in text mode.<br>
<br><a data-href="1998 - Journey into MS-DOS and GW-BASIC" href="https://rafageist.com/professional-journey/1997-2000/1998-journey-into-ms-dos-and-gw-basic.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarCheck" aria-label="FasCalendarCheck" data-icon="FasCalendarCheck" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z"></path></svg></span>1998 - Journey into MS-DOS and GW-BASIC</a>
<br><a data-href="1999 - Transitioning to MS-DOS on Amstrad PC XT 86" href="https://rafageist.com/professional-journey/1997-2000/1999-transitioning-to-ms-dos-on-amstrad-pc-xt-86.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarCheck" aria-label="FasCalendarCheck" data-icon="FasCalendarCheck" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z"></path></svg></span>1999 - Transitioning to MS-DOS on Amstrad PC XT 86</a>
<br><br>Venturing into the realm of CP/M-80, SuperCalc became a vital tool for spreadsheet mastery. Simultaneously, explorations into WordStar, Supercalc, and dBase broadened the skill set. Learning the intricacies of these tools laid the foundation for future encounters with word processing, spreadsheets, and database management.<br>
<br><a data-href="2000 - Embracing WordStar, SuperCalc, and dBase" href="https://rafageist.com/professional-journey/1997-2000/2000-embracing-wordstar,-supercalc,-and-dbase.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarCheck" aria-label="FasCalendarCheck" data-icon="FasCalendarCheck" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z"></path></svg></span>2000 - Embracing WordStar, SuperCalc, and dBase</a>
]]></description><link>https://rafageist.com/professional-journey/1997-2000-formative-coding-years.html</link><guid isPermaLink="false">Professional Journey/1997-2000 - Formative Coding Years.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 10 Feb 2024 23:36:52 GMT</pubDate></item><item><title><![CDATA[2000-2005 - Technological Evolution]]> | rafageist</title><description><![CDATA[ 
 <br><br>The dawn of the new millennium witnessed a transition to Microsoft Windows 95 and 98. Visual Basic 6 opened the doors to Windows application development, while Turbo Pascal became a companion on the path to competitive programming. High-performance training for the International Olympiad in Informatics (IOI) refined algorithmic thinking and problem-solving skills.<br>
<br><a data-href="2001-2004 Expanding Horizons with Windows, Visual Basic and Pascal" href="https://rafageist.com/professional-journey/2001-2005/2001-2004-expanding-horizons-with-windows,-visual-basic-and-pascal.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarCheck" aria-label="FasCalendarCheck" data-icon="FasCalendarCheck" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z"></path></svg></span>2001-2004 Expanding Horizons with Windows, Visual Basic and Pascal</a>
<br><br>Embracing Microsoft Office '98 and Visual Studio 6, the years 2001 to 2003 marked the mastery of advanced development tools. Quick Basic continued to be a creative outlet, contributing to diverse projects that showcased evolving skills. The development of applications with enhanced graphical interfaces became a focal point, setting the stage for more complex endeavors.<br><br>The early 2000s brought a deeper exploration of databases. SuperCalc's spreadsheet prowess remained relevant, while dBase II and III introduced fundamental concepts of data organization. These years laid the groundwork for understanding relational databases, data manipulation, and the crucial role of efficient data management in the software development lifecycle.<br>The period from 1997 to 2005 represents a dynamic trajectory—transitioning from the rudiments of programming to mastering diverse tools and languages. The amalgamation of experiences during these years forms the bedrock of a multifaceted journey into the expansive realm of information technology.<br><a data-href="2003-2005 Financial Solutions and Database Dynamics" href="https://rafageist.com/professional-journey/2001-2005/2003-2005-financial-solutions-and-database-dynamics.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarCheck" aria-label="FasCalendarCheck" data-icon="FasCalendarCheck" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z"></path></svg></span>2003-2005 Financial Solutions and Database Dynamics</a>]]></description><link>https://rafageist.com/professional-journey/2001-2005-technological-evolution.html</link><guid isPermaLink="false">Professional Journey/2001-2005 - Technological Evolution.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Mon, 12 Feb 2024 03:21:30 GMT</pubDate></item><item><title><![CDATA[2005-2010 - University Years]]> | rafageist</title><description><![CDATA[ 
 <br>The period spanning from 2005 to 2010 represents a transformative chapter in my journey—an epoch marked by academic pursuits, profound learning, and the shaping of a burgeoning engineer. As the academic corridors of university beckoned, the focus shifted from foundational experiences to a comprehensive immersion in the realms of Computer Engineering.<br><br>Navigating the halls of academia, my trajectory as a computer engineer unfolded across diverse disciplines. The curriculum was a mosaic, urging a deep dive into realms such as:<br>
<br>Programming Proficiency:

<br>Building on the early coding ventures, the academic setting demanded a more nuanced understanding of programming languages, algorithms, and software design principles.


<br>Database Dynamics:

<br>The intricacies of databases took center stage, with an emphasis on both relational and non-relational database systems.


<br>Software Engineering Principles:

<br>Delving into the methodologies and practices that underpin robust software development, the journey explored the intricacies of engineering software solutions.


<br>Artificial Intelligence Exploration:

<br>Unveiling the realms of Artificial Intelligence, the curriculum unfolded the algorithms, machine learning techniques, and cognitive computing concepts that form the backbone of AI.


<br>Web Development Odyssey:

<br>The world of web development became a canvas for creativity and technical prowess, from front-end design to back-end server-side scripting.


<br><br>These years weren't just about academic rigors; they were about cultivating a holistic approach to engineering. From honing programming skills to unraveling the mysteries of artificial intelligence, the academic canvas became a space for both theoretical understanding and hands-on application.<br>Join me as I delve into the formative years of my university education, where each line of code written, each database designed, and each algorithm unraveled contributed to the metamorphosis of a passionate coder into a seasoned computer engineer.]]></description><link>https://rafageist.com/professional-journey/2005-2010-university-years.html</link><guid isPermaLink="false">Professional Journey/2005-2010 - University Years.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 10 Feb 2024 23:36:52 GMT</pubDate></item><item><title><![CDATA[2010-2020 - Professional Evolution]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><br>Embarking on the professional realm from 2010 to 2020 marked a decade of evolution—a journey from a coding enthusiast to a seasoned software developer. These years witnessed a dedicated focus on honing skills, delving into the intricacies of web development, mastering PHP, navigating the realms of databases like PostgreSQL, and embracing the robust ecosystem of Linux systems.<br><br>The period kicked off with an intensified commitment to web development, with PHP emerging as the weapon of choice. From dynamic websites to complex web applications, PHP became the cornerstone of projects, enabling the creation of interactive and scalable solutions.<br><br>Simultaneously, the exploration of database systems reached new heights with a particular emphasis on PostgreSQL. As the chosen relational database management system, PostgreSQL's robust features and open-source flexibility became integral to crafting efficient and scalable data structures.<br><br>In tandem, the embrace of Linux systems as the development environment brought forth a deeper understanding of open-source ecosystems. From server configurations to shell scripting, Linux became the playground for innovation and customization.<br><br>These ten years were not just about coding—it was about professional maturation. Concepts learned during university years transformed into practical expertise. The challenges of real-world software development became opportunities for growth, innovation, and continuous learning.<br>Join me as we unravel the chapters of this professional odyssey, where each line of code written and each project undertaken contributed to the emergence of a seasoned software developer.]]></description><link>https://rafageist.com/professional-journey/2010-2020-professional-evolution.html</link><guid isPermaLink="false">Professional Journey/2010-2020 - Professional Evolution.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 10 Feb 2024 23:36:52 GMT</pubDate></item><item><title><![CDATA[2020-today - Advancing Professional Frontiers]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:History" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#History</a> 
 <br><a href="https://rafageist.com?query=tag:History" class="tag" target="_blank" rel="noopener nofollow">#History</a> <br><br>Entering the domain of 2020 and beyond has been a phase of profound specialization—a leap into intricate realms of software development. The focus broadened beyond the foundations, venturing into complex domains such as mobile app development, large-scale systems architecture, automation, and the orchestration of DevOps practices.<br><br>The trajectory witnessed a deliberate foray into the intricacies of mobile app development. Exploring platforms like iOS and Android, the journey unfolded the nuances of creating seamless and user-friendly experiences on handheld devices. From conceptualization to deployment, the mobile app landscape became a canvas for innovation.<br><br>The canvas expanded further to encompass the realm of large-scale systems architecture. Crafting solutions capable of handling significant data volumes and user loads became a primary focus. The challenges of scalability, performance, and fault tolerance became integral considerations in the pursuit of architecting systems at grand scales.<br><br>The latter years have also seen an intensified commitment to automation and DevOps practices. From continuous integration and deployment to infrastructure as code, the aim has been to streamline workflows, enhance collaboration, and ensure the efficiency of software development pipelines.<br><br>Amidst these advancements, the commitment to continuous learning remains unwavering. Staying abreast of evolving technologies, frameworks, and methodologies is not just a choice—it's a necessity in an industry that thrives on innovation.<br>As we traverse this era of heightened specialization, each project undertaken, each technology embraced, and each challenge conquered contributes to the ongoing narrative of professional growth and mastery. Join me in exploring the intricacies of this ever-evolving chapter in the landscape of software development.]]></description><link>https://rafageist.com/professional-journey/2020-today-advancing-professional-frontiers.html</link><guid isPermaLink="false">Professional Journey/2020-today - Advancing Professional Frontiers.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sat, 10 Feb 2024 23:36:52 GMT</pubDate></item><item><title><![CDATA[Divengine Open Source Ecosystem]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Project" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Project</a> <a class="tag" href="https://rafageist.com/?query=tag:OpenSource" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#OpenSource</a> 
 <br><a href="https://rafageist.com?query=tag:Project" class="tag" target="_blank" rel="noopener nofollow">#Project</a> <a href="https://rafageist.com?query=tag:OpenSource" class="tag" target="_blank" rel="noopener nofollow">#OpenSource</a><br><img class="emoji" draggable="false" alt="🌐" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f310.svg" height="16px" style="max-width: 100%;"> Explore the dynamic world of the Divengine Open Source Ecosystem, a collaborative effort to empower developers with a comprehensive suite of libraries and frameworks. At <a data-tooltip-position="top" aria-label="https://divengine.org" rel="noopener nofollow" class="external-link" href="https://divengine.org" target="_blank">divengine.org</a>, you'll find a rich collection of modules designed to enhance your development experience. From powerful libraries for efficient code execution to versatile frameworks that streamline project workflows, each component is crafted with precision and shared with the developer community.<br>Dive into the documentation and guides available on the site, offering detailed insights into the usage and integration of various modules. Whether you're a seasoned developer seeking optimized solutions or a newcomer eager to harness the potential of open source, the divengine ecosystem provides a playground for innovation and collaboration.<br>Visit <a data-tooltip-position="top" aria-label="https://divengine.org" rel="noopener nofollow" class="external-link" href="https://divengine.org" target="_blank">divengine.org</a> to explore the documentation, contribute to the community, and embark on a journey of discovery within the realm of open source development.]]></description><link>https://rafageist.com/projects/divengine-open-source-ecosystem.html</link><guid isPermaLink="false">Projects/Divengine Open Source Ecosystem.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Mon, 12 Feb 2024 03:45:57 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f310.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f310.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[No hay espacio en el todo para una copia del todo mismo]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:philosopher" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#philosopher</a> <a class="tag" href="https://rafageist.com/?query=tag:Spanish" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Spanish</a> 
 <br><a href="https://rafageist.com?query=tag:philosopher" class="tag" target="_blank" rel="noopener nofollow">#philosopher</a> <a href="https://rafageist.com?query=tag:Spanish" class="tag" target="_blank" rel="noopener nofollow">#Spanish</a><br>Esta cita transmitir una idea filosófica sobre la naturaleza de la totalidad y la singularidad. Sugiere que en una totalidad completa, es decir, en algo que abarca absolutamente todo, no puede existir una réplica o duplicado de ese "todo" porque, al hacerlo, se estaría creando algo distinto y redundante.<br>Desde un punto de vista metafísico o lógico, podría significar que un sistema completo no puede contener una réplica exacta de sí mismo, ya que al intentar incluir una copia, cambiaría la estructura del sistema. El todo es único e irrepetible por definición. Si hubiera espacio para una copia exacta, entonces no sería el mismo "todo," sino algo más.<br>En un contexto más práctico o cotidiano, podría interpretarse como una reflexión sobre la originalidad y la imposibilidad de duplicar algo perfectamente completo, ya que cualquier intento de copia necesariamente perdería o alteraría aspectos esenciales de la totalidad original.<br>La idea detrás de esta cita tiene raíces en diversas disciplinas, como la filosofía, las matemáticas, y la lógica, y ha sido explorada por varios pensadores, aunque no exactamente en los mismos términos.<br>
<br>
Platón y las Ideas (Teoría de las Formas):

<br>Platón habló sobre las Formas o Ideas, que son perfectas y eternas. Todo en el mundo físico es una copia imperfecta de estas Formas. Si aplicamos tu cita a esta filosofía, podríamos decir que no hay espacio para una copia exacta de una Forma en el mundo físico, porque todo lo que existe es una representación incompleta o distorsionada.


<br>
Kurt Gödel y el teorema de incompletitud:

<br>En matemáticas, el teorema de incompletitud de Gödel explora cómo ningún sistema formal completo puede contener una descripción exacta de sí mismo sin contradicciones. Esto se relaciona con la idea de que un "todo" no puede tener una copia de sí mismo dentro de su estructura. Intentar copiar un sistema completo dentro de sí mismo crea problemas lógicos o estructurales, un poco en línea con la esencia de tu cita.


<br>
La paradoja de Russell (Lógica y Conjuntos):

<br>La paradoja de Russell se refiere a la idea de conjuntos que se contienen a sí mismos, y cómo esto puede generar contradicciones. En resumen, no puede haber un "conjunto de todos los conjuntos que no se contienen a sí mismos" porque llevaría a una contradicción. Esto refleja la idea de que el todo no puede contener una copia exacta de sí mismo sin romper su coherencia lógica.


<br>
Simulación y Realidad (Nick Bostrom):

<br>En un contexto más moderno, Nick Bostrom, al discutir la hipótesis de la simulación, argumenta que una simulación completa del universo tendría que incluir una representación de sí misma, lo que podría ser computacionalmente imposible o crear una especie de regresión infinita. De nuevo, esto toca la idea de que un todo no puede replicarse dentro de sí mismo.


<br>Estos ejemplos muestran que la cita toca una idea fundamental en varias disciplinas: la imposibilidad de un "todo" de contener una copia exacta de sí mismo sin comprometer su integridad o sin caer en paradojas.]]></description><link>https://rafageist.com/quotes/no-hay-espacio-en-el-todo-para-una-copia-del-todo-mismo.html</link><guid isPermaLink="false">Quotes/No hay espacio en el todo para una copia del todo mismo.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:42:51 GMT</pubDate></item><item><title><![CDATA[Mallard Basic Manual]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:Resource" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Resource</a> 
 <br><a href="https://rafageist.com?query=tag:Resource" class="tag" target="_blank" rel="noopener nofollow">#Resource</a><br>Welcome to the Mallard Basic Manual section! In this comprehensive guide, you'll find everything you need to know about Mallard Basic, a powerful programming language. Whether you're a beginner eager to learn the fundamentals or an experienced developer seeking advanced techniques, this manual is your go-to resource.<br>What's Inside:<br>
<br>Introduction to Mallard Basic: Get acquainted with the language, its syntax, and core principles.
<br>Programming Fundamentals: Dive into the basics, from variables and data types to control structures.
<br>Advanced Concepts: Explore advanced topics, including functions, modules, and error handling.
<br>Practical Examples: Learn through practical examples and real-world applications.
<br>Tips and Best Practices: Discover tips and best practices to enhance your Mallard Basic programming skills.
<br>Whether you're building your first program or looking to optimize existing code, this manual is designed to empower you on your Mallard Basic programming journey. Happy coding!<br><a rel="noopener nofollow" class="external-link" href="https://archive.org/embed/Mallard-BASIC" target="_blank">https://archive.org/embed/Mallard-BASIC</a>]]></description><link>https://rafageist.com/resources/mallard-basic.html</link><guid isPermaLink="false">Resources/Mallard Basic.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 25 Feb 2024 00:32:21 GMT</pubDate></item><item><title><![CDATA[0. Pre-History of Computers - The Beginning with the Abacus]]> | rafageist</title><description><![CDATA[ 
 <br>The pre-history of computers refers to the period before the development of electronic or mechanical computing machines, when human beings relied on simple tools and methods to perform calculations. The earliest known calculating device is the abacus, which marks the beginning of this era. The abacus, used as early as 2000 BCE in ancient Mesopotamia and later in other civilizations such as China, Greece, and Rome, is considered one of the most enduring and influential tools for performing arithmetic operations [1].<br><br>The abacus is a simple manual tool made up of beads or stones moved along rods or grooves to represent numbers. It was designed to assist in performing basic arithmetic operations, such as addition, subtraction, multiplication, and division. Despite its simplicity, the abacus was highly efficient and remained a widely used tool for many centuries, especially in commerce and trade, where quick calculations were essential [2].<br>While the exact origins of the abacus are difficult to pinpoint, its use spread across different cultures, each adapting the device to their own needs. The Chinese abacus, or suanpan, for example, was particularly sophisticated, featuring a two-tiered system that allowed users to perform a wide range of calculations quickly and accurately [3]. The Roman abacus, meanwhile, employed a slightly different structure but was used for similar purposes in commerce and engineering [4].<br>The lasting significance of the abacus lies not only in its practical utility but also in the fact that it represents one of the earliest attempts to automate and systematize mathematical calculations. The structure and logic of the abacus allowed users to offload cognitive load, making complex arithmetic faster and less error-prone [5].<br><br>While the abacus remained the dominant tool for calculations throughout much of history, the desire to create more advanced methods of computation began to emerge by the 17th century. Mechanical devices such as Napier’s Bones (1617) and Wilhelm Schickard’s calculating clock (1623) were developed as aids to assist with more complex mathematical operations, including multiplication and division [6]. These devices used physical components—such as rotating gears or marked rods—to facilitate calculations, marking the beginning of the transition from manual to mechanical computation.<br>John Napier, a Scottish mathematician, also introduced logarithms, which simplified complex calculations, particularly multiplication and division, by converting them into addition and subtraction problems [7]. Although logarithms were primarily a mathematical concept, they laid the groundwork for future computational tools.<br>These early innovations, while limited in their capacity, represent humanity’s growing interest in automating calculations. They foreshadowed the eventual development of more complex mechanical and, later, electronic machines that would revolutionize the way people approached computation.<br>Legacy of the Pre-History Era<br>
Though rudimentary compared to modern computers, the abacus and these early mechanical devices laid critical groundwork for the development of computing. They demonstrated that it was possible to use external tools to perform logical, repeatable operations—an idea that would eventually evolve into the foundation of programmable machines [8]. The notion that human thought processes could be represented and manipulated through physical objects, such as beads on an abacus or gears in a mechanical clock, helped shift the perception of calculation from a purely intellectual exercise to one that could be aided by machines [9].<br>The abacus and its counterparts persisted as important educational and business tools well into the modern era. Even today, the abacus is still used in some parts of the world for teaching basic arithmetic, as it provides a hands-on understanding of numerical operations and place value that is difficult to replicate with more abstract, modern methods [10].<br>In conclusion, the pre-history of computers is characterized by humanity’s early attempts to create external devices to assist with mathematical operations. Beginning with the abacus, these tools helped pave the way for the more complex mechanical calculators that would follow, and ultimately, the development of the first true computers. The abacus symbolizes the start of this journey, demonstrating that even the simplest devices can have a profound impact on the evolution of technology.<br><br>
<br><a rel="noopener nofollow" class="external-link" href="https://www.computerhistory.org/revolution/calculators/1/1" target="_blank">https://www.computerhistory.org/revolution/calculators/1/1</a> Ifrah, G. (2000). The Universal History of Numbers: From Prehistory to the Invention of the Computer. John Wiley &amp; Sons.
<br>Swetz, F. J. (1995). The History of the Abacus. Dover Publications.
<br>Moon, B. H. (1971). The Chinese Abacus: Its History and Use. Abacus Press.
<br>Nissen, H. J., Damerow, P., &amp; Englund, R. K. (1993). Archaic Bookkeeping: Early Writing and Techniques of Economic Administration in the Ancient Near East. University of Chicago Press.
<br>Williams, M. R. (1997). A History of Computing Technology. IEEE Computer Society Press.
<br>Collier, B. (1990). The Little Engines that Could: Computing Before Computers. The Johns Hopkins University Press.
<br>Napier, J. (1614). Mirifici Logarithmorum Canonis Descriptio. Edinburgh: Andrew Hart.
<br>Campbell-Kelly, M., &amp; Aspray, W. (2004). Computer: A History of the Information Machine. Westview Press.
<br>Williams, M. R. (1985). The Origins of Computing Machines: A Chronological Study. Academic Press.
<br>Ifrah, G. (2000). The Universal History of Computing: From the Abacus to the Quantum Computer. John Wiley &amp; Sons.
]]></description><link>https://rafageist.com/writing/the-history-of-computing/the-history-of-computers/0.-pre-history-of-computers/0.-pre-history-of-computers-the-beginning-with-the-abacus.html</link><guid isPermaLink="false">Writing/The History of Computing/The History of Computers/0. Pre-History of Computers/0. Pre-History of Computers - The Beginning with the Abacus.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 06 Oct 2024 00:36:36 GMT</pubDate></item><item><title><![CDATA[The Pascaline and early mechanical calculators]]> | rafageist</title><description><![CDATA[ 
 <br>The development of computers is one of the most remarkable technological achievements in human history. From early mechanical devices to today’s advanced quantum computers, the journey of computer evolution has fundamentally transformed every aspect of modern life. Understanding this development requires examining the critical milestones in computer hardware, from rudimentary mechanical calculators to modern-day artificial intelligence systems.<br><br>The first steps toward the modern computer began in the 17th century with mechanical devices like Blaise Pascal’s Pascaline (1642) and Gottfried Wilhelm Leibniz’s stepped reckoner (1673), which were early attempts to automate basic arithmetic tasks. These devices, while groundbreaking for their time, were limited in scope and served only as basic tools for human computation. However, the ideas they introduced—automated calculation and mechanical precision—set the stage for more sophisticated systems.<br>A crucial leap came in the 19th century with Charles Babbage’s Analytical Engine. Babbage designed the Analytical Engine to be a general-purpose, programmable machine, and it is considered by many as the first true concept of a computer. His collaborator, Ada Lovelace, wrote what is now regarded as the first algorithm intended to be executed by a machine, earning her the title of the world’s first programmer. Though the Analytical Engine was never fully built during their lifetime, its design laid the foundation for the modern architecture of computers.<br>The Electronic Revolution<br>
The true dawn of the modern computer arrived in the mid-20th century with the advent of electronic computers. The introduction of vacuum tubes, which could perform fast calculations, replaced the slower mechanical components. The ENIAC (Electronic Numerical Integrator and Computer), completed in 1945, was the first general-purpose electronic computer. Capable of performing thousands of calculations per second, ENIAC marked a significant shift toward the digital age, enabling complex computations that were previously impossible.<br>In parallel, Alan Turing’s theoretical work during the 1930s introduced the concept of a universal machine, capable of solving any problem that could be described algorithmically. His ideas deeply influenced the design and operation of computers, particularly through the concept of programmability, which is fundamental to modern computers.<br>The next leap came with the transistor in the late 1940s, replacing the bulky and fragile vacuum tubes. The transistor revolutionized computer design, allowing machines to become smaller, faster, and more reliable. This development paved the way for the emergence of commercial computers in the 1950s and 1960s, such as the IBM 1401, which helped businesses automate tasks like payroll, accounting, and inventory management.<br>The Personal Computer Revolution<br>
The 1970s brought the invention of the microprocessor, a complete central processing unit (CPU) on a single chip. This breakthrough enabled the creation of smaller, more affordable computers. The Altair 8800 (1975) is widely regarded as the first personal computer, followed closely by Apple’s introduction of the Apple I and Apple II computers. These early personal computers gave individuals the power to perform tasks once reserved for large corporations or government agencies.<br>By the 1980s, IBM’s personal computer (PC) and Microsoft’s MS-DOS operating system became the industry standard, cementing the PC as a household and business necessity. Meanwhile, graphical user interfaces (GUIs), pioneered by Apple’s Macintosh and later adopted by Microsoft Windows, made computers more user-friendly, further accelerating their adoption.<br>The Internet and Modern Computing<br>
The widespread availability of computers in the 1990s, coupled with the development of the Internet, connected computers globally and transformed how information was shared. The rise of laptops, and later smartphones, made computing even more portable and accessible, blurring the lines between personal and professional use.<br>In the 21st century, computers have become ubiquitous, embedded in everything from cars to household appliances. The evolution of cloud computing has allowed users to access vast amounts of data and computing power remotely, making devices smaller and more efficient. At the same time, advances in artificial intelligence (AI) and machine learning have opened new frontiers in automation, data analysis, and problem-solving, allowing computers to tackle complex tasks such as natural language processing and real-time decision-making.<br>The Significance of Computers<br>
The significance of computers cannot be overstated. Their development has transformed virtually every industry—from healthcare and education to finance and entertainment—enabling efficiency, innovation, and new possibilities. Computers have revolutionized the way we communicate, collaborate, and access information, bridging gaps across geographic and cultural divides. They have empowered individuals and organizations alike to solve problems on a scale and speed that was unimaginable just a few decades ago.<br>Moreover, the rise of big data and AI has further expanded the influence of computers in decision-making processes, reshaping how societies function. While the future holds new challenges—such as the ethical implications of AI and the environmental costs of increasing computational power—the trajectory of computer development continues to push the boundaries of what is possible.<br>In conclusion, the evolution of computers, from simple mechanical devices to powerful digital machines, has reshaped the world in profound ways. As computers continue to evolve, their role in shaping the future of technology, economy, and society remains central.]]></description><link>https://rafageist.com/writing/the-history-of-computing/the-history-of-computers/1.-early-mechanical-devices-(1600s-1800s)/the-pascaline-and-early-mechanical-calculators.html</link><guid isPermaLink="false">Writing/The History of Computing/The History of Computers/1. Early Mechanical Devices (1600s - 1800s)/The Pascaline and early mechanical calculators.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 22 Sep 2024 17:40:42 GMT</pubDate></item><item><title><![CDATA[Overview of the development of computers and their significance]]> | rafageist</title><description><![CDATA[ 
 ]]></description><link>https://rafageist.com/writing/the-history-of-computing/the-history-of-computers/overview-of-the-development-of-computers-and-their-significance.html</link><guid isPermaLink="false">Writing/The History of Computing/The History of Computers/Overview of the development of computers and their significance.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 22 Sep 2024 17:30:20 GMT</pubDate></item><item><title><![CDATA[Introduction]]> | rafageist</title><description><![CDATA[ 
 <br>It is not known for certain what the oldest calculating tool is, as ancient civilizations used a variety of methods and objects to perform calculations and keep numerical records.<br>The abacus is the oldest formal device we know of that has survived, but before its invention, people used natural objects such as stones, sticks, shells, or made marks on bones to count and perform simple calculations. These methods were more rudimentary and have not left traces as obvious or sophisticated as the abacus.<br>The Ishango bone, for example, discovered in Africa, dates back around 20,000 years. This bone has marks that many experts interpret as evidence of some kind of counting or calculation, making it an older tool than the abacus.<br>However, there is no absolute consensus on whether it was used for that purpose or if it represented something else. This leaves some room for speculation as to what exactly the first formal calculating tool was. What we do know is that the need to count and perform basic operations with numbers is a very ancient skill, and humans have been devising ingenious ways to do it since prehistoric times.]]></description><link>https://rafageist.com/writing/the-history-of-computing/introduction.html</link><guid isPermaLink="false">Writing/The History of Computing/Introduction.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 06 Oct 2024 00:48:23 GMT</pubDate></item><item><title><![CDATA[The History of Computers]]> | rafageist</title><description><![CDATA[ 
 <br><br><br>The history of computers is a fascinating tale that has been unfolding for centuries. From the earliest mechanical devices to the modern supercomputers of today, the evolution of computing technology has been driven by the desire to solve complex problems and make our lives easier. In this article, we will explore the key milestones in the history of computers and how they have shaped the world we live in today. <a data-tooltip-position="top" aria-label="https://www.computerhistory.org/babbage/" rel="noopener nofollow" class="external-link" href="https://www.computerhistory.org/babbage/" target="_blank">Read more</a><br><br>The history of computers can be traced back to the ancient world, where early civilizations used simple devices to perform basic calculations. The abacus, for example, was a popular tool for performing arithmetic operations in ancient China, Egypt, and Greece. Over time, these early devices evolved into more sophisticated machines that could perform more complex calculations. One of the most famous early computing devices was the Antikythera mechanism, a mechanical calculator that was used by the ancient Greeks to predict astronomical events. <br><br>The birth of modern computing can be traced back to the 19th century, when mathematician Charles Babbage designed the first mechanical computer. Known as the Analytical Engine, Babbage's machine was capable of performing complex calculations and storing data on punch cards. Although the Analytical Engine was never completed, it laid the foundation for the development of modern computers.<br><br>The electronic era of computing began in the mid-20th century with the invention of the first electronic computers. These early machines, such as the ENIAC and UNIVAC, were massive devices that used vacuum tubes to perform calculations. Over time, the development of transistors and integrated circuits made it possible to build smaller, faster, and more powerful computers. This led to the development of the first personal computers in the 1970s, which revolutionized the way people work and communicate.<br><br>The first generation of computers used vacuum tubes for circuitry and magnetic drums for memory. They were very large and expensive to operate. In the late 1950s, the first transistorized computers were developed, replacing the vacuum tubes of the first generation. These computers were faster, smaller, and more reliable than their predecessors.<br><br>The second generation of computers used transistors instead of vacuum tubes for circuitry. They also used magnetic core memory, which was faster and more reliable than magnetic drums. These computers were smaller, faster, and more reliable than the first generation, and they were used for a wide range of applications, from scientific research to business.<br><br>The third generation of computers used integrated circuits instead of individual transistors. This made them even smaller, faster, and more reliable than the second generation. These computers were used for a wide range of applications, from scientific research to business, and they paved the way for the development of the first personal computers in the 1970s.<br><br>The fourth generation of computers used microprocessors, which combined the central processing unit, memory, and input/output controls on a single chip. This made them even smaller, faster, and more powerful than the third generation. These computers were used for a wide range of applications, from scientific research to business, and they paved the way for the development of the first personal computers in the 1970s.<br><br>The fifth generation of computers is still in development, but it is expected to be based on artificial intelligence and machine learning technologies. These computers will be capable of performing complex tasks that are currently beyond the capabilities of human beings, such as natural language processing, image recognition, and autonomous decision-making.<br><br>The Information Age began in the late 20th century with the rise of the internet and the development of digital technologies. The internet has transformed the way we access information, communicate with others, and conduct business. The development of digital technologies, such as smartphones, tablets, and cloud computing, has made it possible to store and access vast amounts of data from anywhere in the world. Today, we live in a world that is more connected and more technologically advanced than ever before, thanks to the history of computers.<br><br>The history of computers is a story of innovation, creativity, and perseverance. From the earliest mechanical devices to the modern supercomputers of today, the evolution of computing technology has transformed the world we live in. As we look to the future, it is clear that computers will continue to play a central role in shaping our lives and driving progress in science, technology, and society. <a data-tooltip-position="top" aria-label="https://www.computerhistory.org/babbage/" rel="noopener nofollow" class="external-link" href="https://www.computerhistory.org/babbage/" target="_blank">Read more</a><br>]]></description><link>https://rafageist.com/writing/the-history-of-computers.html</link><guid isPermaLink="false">Writing/The History of Computers.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:43:07 GMT</pubDate></item><item><title><![CDATA[Blog]]> | rafageist</title><description><![CDATA[ 
 <br>Welcome to my professional blog, a space where I share insights, experiences, and thoughts on the intersection of technology, programming, and beyond. While the primary focus is on the world of computing and software development, you'll also find explorations into related fields and possibly beyond. Join me on this journey of continuous learning, problem-solving, and discovery. Whether you're a fellow developer, tech enthusiast, or someone curious about the ever-evolving landscape of technology, there's something here for everyone.<br>Feel free to explore the articles, and don't hesitate to share your thoughts or engage in discussions. Let's embark on this intellectual adventure together!<br><br>
<br><a data-href="2023" href="https://rafageist.com/blog/en/2023.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiCalendarCheckLine" aria-label="RiCalendarCheckLine" data-icon="RiCalendarCheckLine" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M9 1V3H15V1H17V3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H7V1H9ZM20 10H4V19H20V10ZM15.0355 11.136L16.4497 12.5503L11.5 17.5L7.96447 13.9645L9.37868 12.5503L11.5 14.6716L15.0355 11.136ZM7 5H4V8H20V5H17V6H15V5H9V6H7V5Z"></path></svg></span>2023</a>
<br><a data-href="Blog/en/2024" href="https://rafageist.com/blog/en/2024.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiCalendarCheckLine" aria-label="RiCalendarCheckLine" data-icon="RiCalendarCheckLine" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M9 1V3H15V1H17V3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H7V1H9ZM20 10H4V19H20V10ZM15.0355 11.136L16.4497 12.5503L11.5 17.5L7.96447 13.9645L9.37868 12.5503L11.5 14.6716L15.0355 11.136ZM7 5H4V8H20V5H17V6H15V5H9V6H7V5Z"></path></svg></span>Blog/en/2024</a>
<br><br>
<br><a data-href="Blog/es/2024" href="https://rafageist.com/blog/es/2024.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiCalendarCheckLine" aria-label="RiCalendarCheckLine" data-icon="RiCalendarCheckLine" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M9 1V3H15V1H17V3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H7V1H9ZM20 10H4V19H20V10ZM15.0355 11.136L16.4497 12.5503L11.5 17.5L7.96447 13.9645L9.37868 12.5503L11.5 14.6716L15.0355 11.136ZM7 5H4V8H20V5H17V6H15V5H9V6H7V5Z"></path></svg></span>Blog/es/2024</a>
]]></description><link>https://rafageist.com/blog.html</link><guid isPermaLink="false">Blog.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Wed, 03 Jul 2024 19:44:56 GMT</pubDate></item><item><title><![CDATA[Contributions]]> | rafageist</title><description><![CDATA[ 
 <br><a data-href="Universal and Flexible Error Handling in ECMAScript" href="https://rafageist.com/contributions/2024/universal-and-flexible-error-handling-in-ecmascript.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocumentText" aria-label="IbDocumentText" data-icon="IbDocumentText" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path><path d="M9 17.5h3m-3-5h6m-6-5h1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></span>Universal and Flexible Error Handling in ECMAScript</a><br>
<a data-href="Divide and conquer with the existing is a clean alternative to the proposed HTTP QUERY method" href="https://rafageist.com/contributions/2024/divide-and-conquer-with-the-existing-is-a-clean-alternative-to-the-proposed-http-query-method.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocumentText" aria-label="IbDocumentText" data-icon="IbDocumentText" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path><path d="M9 17.5h3m-3-5h6m-6-5h1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></span>Divide and conquer with the existing is a clean alternative to the proposed HTTP QUERY method</a>]]></description><link>https://rafageist.com/contributions.html</link><guid isPermaLink="false">Contributions.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 29 Sep 2024 03:10:36 GMT</pubDate></item><item><title><![CDATA[Curriculum Vitae]]> | rafageist</title><description><![CDATA[ 
 <br><br><a data-href="Eng. Rafael Rodríguez Ramírez - CV 2025" href="https://rafageist.com/curriculum-vitae/eng.-rafael-rodríguez-ramírez-cv-2025.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocumentText" aria-label="IbDocumentText" data-icon="IbDocumentText" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path><path d="M9 17.5h3m-3-5h6m-6-5h1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></span>Eng. Rafael Rodríguez Ramírez - CV 2025</a><br><br><a data-href="Ing. Rafael Rodríguez Ramírez - CV 2025" href="https://rafageist.com/curriculum-vitae/ing.-rafael-rodríguez-ramírez-cv-2025.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="IbDocumentText" aria-label="IbDocumentText" data-icon="IbDocumentText" aria-hidden="true" style="transform: translateY(20%);"><svg width="16px" height="16px" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.676 6.308l-.67.744.67-.744zm1.151 1.269l.913-.407-.913.407zm-4.878-4.444l-.358.933.358-.933zm4.465 17.281l-.707-.707.707.707zm-12.828 0l.707-.707-.707.707zM6 17V7H4v10h2zm9 3H9v2h6v-2zM9 4h3.465V2H9v2zm9 5.281V17h2V9.281h-2zm-3.528-4.51l2.535 2.28 1.338-1.486-2.535-2.281-1.338 1.486zM20 9.28c0-.789.02-1.483-.26-2.11l-1.826.813c.066.149.086.332.086 1.297h2zm-2.993-2.23c.718.647.84.784.906.933l1.828-.814c-.28-.628-.81-1.077-1.396-1.605l-1.338 1.487zM12.465 4c.834 0 .993.015 1.126.066l.716-1.867C13.748 1.985 13.15 2 12.465 2v2zm3.345-.716c-.508-.458-.944-.87-1.503-1.085l-.716 1.867c.133.051.261.146.881.704l1.338-1.486zM15 22c.915 0 1.701.002 2.328-.082.655-.088 1.284-.287 1.793-.797l-1.414-1.414c-.076.076-.212.17-.646.229-.462.062-1.09.064-2.061.064v2zm3-5c0 .971-.002 1.599-.064 2.061-.059.434-.153.57-.229.646l1.414 1.414c.51-.51.709-1.138.797-1.793C20.002 18.7 20 17.915 20 17h-2zM4 17c0 .915-.002 1.701.082 2.328.088.655.287 1.284.797 1.793l1.414-1.414c-.076-.076-.17-.212-.229-.646C6.002 18.6 6 17.971 6 17H4zm5 3c-.971 0-1.599-.002-2.061-.064-.434-.059-.57-.153-.646-.229l-1.414 1.414c.51.51 1.138.709 1.793.797C7.3 22.002 8.085 22 9 22v-2zM6 7c0-.971.002-1.599.064-2.061.059-.434.153-.57.229-.646L4.879 2.879c-.51.51-.709 1.138-.797 1.793C3.998 5.3 4 6.085 4 7h2zm3-5c-.915 0-1.701-.002-2.328.082-.655.088-1.284.287-1.793.797l1.414 1.414c.076-.076.212-.17.646-.229C7.4 4.002 8.029 4 9 4V2z" fill="currentColor"></path><path d="M13 3v2c0 1.886 0 2.828.586 3.414C14.172 9 15.114 9 17 9h2" stroke="currentColor" stroke-width="2"></path><path d="M9 17.5h3m-3-5h6m-6-5h1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></span>Ing. Rafael Rodríguez Ramírez - CV 2025</a>]]></description><link>https://rafageist.com/curriculum-vitae.html</link><guid isPermaLink="false">Curriculum Vitae.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:39:29 GMT</pubDate></item><item><title><![CDATA[Home]]> | rafageist</title><description><![CDATA[<a class="tag" href="https://rafageist.com/?query=tag:software" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#software</a> <a class="tag" href="https://rafageist.com/?query=tag:engineer" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#engineer</a> <a class="tag" href="https://rafageist.com/?query=tag:developer" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#developer</a> <a class="tag" href="https://rafageist.com/?query=tag:scientist" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#scientist</a> <a class="tag" href="https://rafageist.com/?query=tag:entrepreneur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#entrepreneur</a> <a class="tag" href="https://rafageist.com/?query=tag:philosopher" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#philosopher</a> <a class="tag" href="https://rafageist.com/?query=tag:writer" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#writer</a> <a class="tag" href="https://rafageist.com/?query=tag:enthusiast" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#enthusiast</a> <a class="tag" href="https://rafageist.com/?query=tag:Basic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Basic</a> <a class="tag" href="https://rafageist.com/?query=tag:VisualBasic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#VisualBasic</a> <a class="tag" href="https://rafageist.com/?query=tag:CPlusPlus" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#CPlusPlus</a> <a class="tag" href="https://rafageist.com/?query=tag:Java" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Java</a> <a class="tag" href="https://rafageist.com/?query=tag:PHP" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PHP</a> <a class="tag" href="https://rafageist.com/?query=tag:Pascal" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Pascal</a> <a class="tag" href="https://rafageist.com/?query=tag:HTML" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#HTML</a> <a class="tag" href="https://rafageist.com/?query=tag:JavaScript" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JavaScript</a> <a class="tag" href="https://rafageist.com/?query=tag:NodeJs" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#NodeJs</a> <a class="tag" href="https://rafageist.com/?query=tag:ReactJS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#ReactJS</a> <a class="tag" href="https://rafageist.com/?query=tag:VueJS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#VueJS</a> <a class="tag" href="https://rafageist.com/?query=tag:VisalBasicForApplications" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#VisalBasicForApplications</a> <a class="tag" href="https://rafageist.com/?query=tag:Csharp" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Csharp</a> <a class="tag" href="https://rafageist.com/?query=tag:dotnet" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#dotnet</a> <a class="tag" href="https://rafageist.com/?query=tag:MAUI" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#MAUI</a> <a class="tag" href="https://rafageist.com/?query=tag:Xamarin" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Xamarin</a> <a class="tag" href="https://rafageist.com/?query=tag:UItest" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#UItest</a> <a class="tag" href="https://rafageist.com/?query=tag:Automation" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Automation</a> <a class="tag" href="https://rafageist.com/?query=tag:PostgresSQL" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#PostgresSQL</a> <a class="tag" href="https://rafageist.com/?query=tag:plPgSQL" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#plPgSQL</a> <a class="tag" href="https://rafageist.com/?query=tag:MySQL" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#MySQL</a> <a class="tag" href="https://rafageist.com/?query=tag:SQLite" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SQLite</a> <a class="tag" href="https://rafageist.com/?query=tag:MicrosoftAccess" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#MicrosoftAccess</a> <a class="tag" href="https://rafageist.com/?query=tag:MicrosoftSQLServer" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#MicrosoftSQLServer</a> <a class="tag" href="https://rafageist.com/?query=tag:Excel" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Excel</a> <a class="tag" href="https://rafageist.com/?query=tag:AmazonAWS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#AmazonAWS</a> <a class="tag" href="https://rafageist.com/?query=tag:AzureDevOps" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#AzureDevOps</a> <a class="tag" href="https://rafageist.com/?query=tag:Linux" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Linux</a> <a class="tag" href="https://rafageist.com/?query=tag:Ubuntu" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Ubuntu</a> <a class="tag" href="https://rafageist.com/?query=tag:Debian" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Debian</a> <a class="tag" href="https://rafageist.com/?query=tag:Windows" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Windows</a> <a class="tag" href="https://rafageist.com/?query=tag:Trello" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Trello</a> <a class="tag" href="https://rafageist.com/?query=tag:Jira" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Jira</a> <a class="tag" href="https://rafageist.com/?query=tag:Microsoft365" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Microsoft365</a> <a class="tag" href="https://rafageist.com/?query=tag:Git" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Git</a> <a class="tag" href="https://rafageist.com/?query=tag:GitHub" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#GitHub</a> <a class="tag" href="https://rafageist.com/?query=tag:Gitea" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Gitea</a> <a class="tag" href="https://rafageist.com/?query=tag:Gogs" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Gogs</a> 
 <br><a href="https://rafageist.com?query=tag:software" class="tag" target="_blank" rel="noopener nofollow">#software</a> <a href="https://rafageist.com?query=tag:engineer" class="tag" target="_blank" rel="noopener nofollow">#engineer</a> <a href="https://rafageist.com?query=tag:developer" class="tag" target="_blank" rel="noopener nofollow">#developer</a> <a href="https://rafageist.com?query=tag:scientist" class="tag" target="_blank" rel="noopener nofollow">#scientist</a> <a href="https://rafageist.com?query=tag:entrepreneur" class="tag" target="_blank" rel="noopener nofollow">#entrepreneur</a> <a href="https://rafageist.com?query=tag:philosopher" class="tag" target="_blank" rel="noopener nofollow">#philosopher</a> <a href="https://rafageist.com?query=tag:writer" class="tag" target="_blank" rel="noopener nofollow">#writer</a> <a href="https://rafageist.com?query=tag:enthusiast" class="tag" target="_blank" rel="noopener nofollow">#enthusiast</a><br>Important
Site under construction
<br> Welcome to my digital haven! <br>
<br>Explore the curated chronicle from coding beginnings to present-day expertise.  
<br>Dive into foundational coding ventures and academic pursuits. 
<br>Navigate a decade of professional development and specialization. 
<br>Witness the transition to mobile app development. 
<br>Explore the intricacies of architecting large-scale systems. 
<br>Master automation and embrace DevOps practices.  
<br>Continuous learning is not just a choice—it's a necessity. 
<br>Whether you're here for early coding insights or contemporary tech, welcome aboard!
<br>Check my <a data-href="Curriculum Vitae" href="https://rafageist.com/curriculum-vitae.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiAwardFill" aria-label="RiAwardFill" data-icon="RiAwardFill" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M17 15.2454V22.1169C17 22.393 16.7761 22.617 16.5 22.617C16.4094 22.617 16.3205 22.5923 16.2428 22.5457L12 20L7.75725 22.5457C7.52046 22.6877 7.21333 22.6109 7.07125 22.3742C7.02463 22.2964 7 22.2075 7 22.1169V15.2454C5.17107 13.7793 4 11.5264 4 9C4 4.58172 7.58172 1 12 1C16.4183 1 20 4.58172 20 9C20 11.5264 18.8289 13.7793 17 15.2454ZM12 15C15.3137 15 18 12.3137 18 9C18 5.68629 15.3137 3 12 3C8.68629 3 6 5.68629 6 9C6 12.3137 8.68629 15 12 15ZM12 13C9.79086 13 8 11.2091 8 9C8 6.79086 9.79086 5 12 5C14.2091 5 16 6.79086 16 9C16 11.2091 14.2091 13 12 13Z"></path></svg></span>Curriculum Vitae</a>
<br><br><br>I have nearly 30 years of experience in software development, with a strong focus on PHP for the last 15 years. I started my programming journey at the age of 11 in 1997. Over the years, I have expanded my expertise to various platforms and languages, making me a versatile developer capable of adapting to different technologies and project requirements.<br>
<br>Proficient in PHP, including frameworks such as Symfony and Laravel.
<br>Extensive experience with front-end technologies, particularly React.
<br>Strong knowledge of software architecture and design patterns.
<br>Experience in testing frameworks and methodologies, as well as automation.
<br>Proficient in Git for version control and collaborative development.
<br>Knowledge of Pascal, C++, JavaScript, C#, Visual Basic, Java, HTML+CSS, SQL &amp; PL/pgSQL.
<br>Expertise in development methodologies, documentation, and UML modeling.
<br>Knowledge of BPM and service orchestration.
<br>Strong algorithm development skills
<br>Achievements and Responsibilities:<br>
<br>Founded a software project over 10 years ago, which I have actively maintained and evolved.
<br>Owner of a sole proprietorship software company in Suriname, providing software solutions and services to clients.
<br>Nominated for Innovation Awards three times on phpclases.org, recognizing my contributions to the developer community.
<br>Developed and maintained open-source libraries, helping other developers streamline their work.
<br>Lead various projects, guiding teams through the development lifecycle from planning to deployment.
<br>Active in the developer community, sharing knowledge and collaborating on projects.
<br>I am currently active in a project with PHP, where I apply my extensive knowledge and experience to deliver high-quality solutions.<br>
<br>Programming
<br><a href="https://rafageist.com?query=tag:Basic" class="tag" target="_blank" rel="noopener nofollow">#Basic</a> <a href="https://rafageist.com?query=tag:VisualBasic" class="tag" target="_blank" rel="noopener nofollow">#VisualBasic</a> <a href="https://rafageist.com?query=tag:CPlusPlus" class="tag" target="_blank" rel="noopener nofollow">#CPlusPlus</a> <a href="https://rafageist.com?query=tag:Java" class="tag" target="_blank" rel="noopener nofollow">#Java</a> <a href="https://rafageist.com?query=tag:PHP" class="tag" target="_blank" rel="noopener nofollow">#PHP</a> <a href="https://rafageist.com?query=tag:Pascal" class="tag" target="_blank" rel="noopener nofollow">#Pascal</a> <a href="https://rafageist.com?query=tag:HTML" class="tag" target="_blank" rel="noopener nofollow">#HTML</a> <br><a href="https://rafageist.com?query=tag:JavaScript" class="tag" target="_blank" rel="noopener nofollow">#JavaScript</a> <a href="https://rafageist.com?query=tag:NodeJs" class="tag" target="_blank" rel="noopener nofollow">#NodeJs</a> <a href="https://rafageist.com?query=tag:ReactJS" class="tag" target="_blank" rel="noopener nofollow">#ReactJS</a> <a href="https://rafageist.com?query=tag:VueJS" class="tag" target="_blank" rel="noopener nofollow">#VueJS</a> <a href="https://rafageist.com?query=tag:VisalBasicForApplications" class="tag" target="_blank" rel="noopener nofollow">#VisalBasicForApplications</a><br><a href="https://rafageist.com?query=tag:Csharp" class="tag" target="_blank" rel="noopener nofollow">#Csharp</a> <a href="https://rafageist.com?query=tag:dotnet" class="tag" target="_blank" rel="noopener nofollow">#dotnet</a> <a href="https://rafageist.com?query=tag:MAUI" class="tag" target="_blank" rel="noopener nofollow">#MAUI</a> <a href="https://rafageist.com?query=tag:Xamarin" class="tag" target="_blank" rel="noopener nofollow">#Xamarin</a> <a href="https://rafageist.com?query=tag:UItest" class="tag" target="_blank" rel="noopener nofollow">#UItest</a> <a href="https://rafageist.com?query=tag:Automation" class="tag" target="_blank" rel="noopener nofollow">#Automation</a><br>
<br>Databases
<br><a href="https://rafageist.com?query=tag:PostgresSQL" class="tag" target="_blank" rel="noopener nofollow">#PostgresSQL</a> <a href="https://rafageist.com?query=tag:plPgSQL" class="tag" target="_blank" rel="noopener nofollow">#plPgSQL</a> <a href="https://rafageist.com?query=tag:MySQL" class="tag" target="_blank" rel="noopener nofollow">#MySQL</a> <a href="https://rafageist.com?query=tag:SQLite" class="tag" target="_blank" rel="noopener nofollow">#SQLite</a> <br><a href="https://rafageist.com?query=tag:MicrosoftAccess" class="tag" target="_blank" rel="noopener nofollow">#MicrosoftAccess</a> <a href="https://rafageist.com?query=tag:MicrosoftSQLServer" class="tag" target="_blank" rel="noopener nofollow">#MicrosoftSQLServer</a> <a href="https://rafageist.com?query=tag:Excel" class="tag" target="_blank" rel="noopener nofollow">#Excel</a><br>
<br>Systems
<br><a href="https://rafageist.com?query=tag:AmazonAWS" class="tag" target="_blank" rel="noopener nofollow">#AmazonAWS</a> <a href="https://rafageist.com?query=tag:AzureDevOps" class="tag" target="_blank" rel="noopener nofollow">#AzureDevOps</a><br><a href="https://rafageist.com?query=tag:Linux" class="tag" target="_blank" rel="noopener nofollow">#Linux</a> <a href="https://rafageist.com?query=tag:Ubuntu" class="tag" target="_blank" rel="noopener nofollow">#Ubuntu</a> <a href="https://rafageist.com?query=tag:Debian" class="tag" target="_blank" rel="noopener nofollow">#Debian</a> <a href="https://rafageist.com?query=tag:Windows" class="tag" target="_blank" rel="noopener nofollow">#Windows</a><br><a href="https://rafageist.com?query=tag:Trello" class="tag" target="_blank" rel="noopener nofollow">#Trello</a> <a href="https://rafageist.com?query=tag:Jira" class="tag" target="_blank" rel="noopener nofollow">#Jira</a>  <a href="https://rafageist.com?query=tag:Microsoft365" class="tag" target="_blank" rel="noopener nofollow">#Microsoft365</a><br><a href="https://rafageist.com?query=tag:Git" class="tag" target="_blank" rel="noopener nofollow">#Git</a> <a href="https://rafageist.com?query=tag:GitHub" class="tag" target="_blank" rel="noopener nofollow">#GitHub</a> <a href="https://rafageist.com?query=tag:Gitea" class="tag" target="_blank" rel="noopener nofollow">#Gitea</a> <a href="https://rafageist.com?query=tag:Gogs" class="tag" target="_blank" rel="noopener nofollow">#Gogs</a><br><br>My educational background is dedicated to various areas relevant to software development and technology:<br>
<br>Operations Research: My thesis was a system for generating schedules for universities and schools, developed in PHP with PostgreSQL and PL/pgSQL. This work included mathematical modeling and researching algorithms, culminating in the creation of a new algorithm based on dynamic programming. This was a second version of a similar system I had previously developed in Visual Basic 6 during my studies.
<br>Business Process Administration: I studied tools and methodologies for effective business process management.
<br>Content Management Systems: I have specialized in systems such as Drupal.
<br>Artificial Intelligence: I worked on generating conceptual maps from text using AI techniques.
<br>Model-Driven Architecture (MDA): Focused on Java Enterprise Environment technology.
<br>Linux Server Administration and Network Configuration: Actively participated in managing the university's network.
<br>Data Warehouse Systems: Developed systems to manage data for schools in my home country.
<br>Additionally, I hold a Bachelor’s degree in Engineering, where I gained a solid foundation in software engineering, algorithms, and data structures. During high school, I was part of high-performance computing groups focused on algorithm competitions and operations research, which led to my participation in the International Olympiad in Informatics (IOI). In university, I continued to hone my skills and participated in the ACM ICPC programming competitions.<br>This comprehensive blend of formal education and hands-on experience has equipped me with the knowledge and skills necessary to excel in software development and contribute effectively to any team.<br><br><br>My <a data-href="Blog" href="https://rafageist.com/blog.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasBook" aria-label="FasBook" data-icon="FasBook" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M96 0C43 0 0 43 0 96V416c0 53 43 96 96 96H384h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V384c17.7 0 32-14.3 32-32V32c0-17.7-14.3-32-32-32H384 96zm0 384H352v64H96c-17.7 0-32-14.3-32-32s14.3-32 32-32zm32-240c0-8.8 7.2-16 16-16H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H144c-8.8 0-16-7.2-16-16zm16 48H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H144c-8.8 0-16-7.2-16-16s7.2-16 16-16z"></path></svg></span>Blog</a> is a space where I share insights, experiences, and thoughts on the intersection of technology, programming, and beyond. <br><br><br>Explore my professional presence on these platforms:<br>
<br>daily.dev
<br><a href="https://app.daily.dev/rafageist" target="_blank" rel="noopener nofollow"></a><img alt="Rafa Rodríguez's Dev Card" src="https://api.daily.dev/devcards/v2/YhEpwXdlkRpAA491aj7nP.png?type=wide&amp;r=zbn&amp;nocache=679f92e2cdea6" referrerpolicy="no-referrer" style="width: 652px; max-width: 100%;"><br>
<br>GitHub
<br>Explore <a data-tooltip-position="top" aria-label="(https://github.com/rafageist)" rel="noopener nofollow" class="external-link" href="https://rafageist.com/(https://github.com/rafageist)" target="_blank">my repositories</a>, projects, and contributions on GitHub. Connect with me and discover the code that drives my passion for technology.<br> <a data-tooltip-position="top" aria-label="https://github.com/rafageist" rel="noopener nofollow" class="external-link" href="https://github.com/rafageist" target="_blank"></a><img alt="Anurag's GitHub stats" src="https://github-readme-stats.vercel.app/api?username=rafageist&amp;show_icons=true&amp;show=reviews,discussions_started,discussions_answered,prs_merged,prs_merged_percentage" referrerpolicy="no-referrer"><br>
<br>LinkedIn
<br>Visit my <a data-tooltip-position="top" aria-label="https://www.linkedin.com/in/rafageist" rel="noopener nofollow" class="external-link" href="https://www.linkedin.com/in/rafageist" target="_blank">LinkedIn profile</a> to learn more about my professional journey, skills, and connections in the industry.<br>
<br>PHPClasses.org
<br>Discover my contributions on PHPClasses.org and explore more about my <a data-tooltip-position="top" aria-label="https://www.phpclasses.org/browse/author/1094404.html" rel="noopener nofollow" class="external-link" href="https://www.phpclasses.org/browse/author/1094404.html" target="_blank">PHP projects</a>. See <a data-tooltip-position="top" aria-label="https://www.phpclasses.org/reputation/user/1094404/ranking/" rel="noopener nofollow" class="external-link" href="https://www.phpclasses.org/reputation/user/1094404/ranking/" target="_blank">my current position in the PHP Classes ranking</a> with gratitude for the PHP community's support.<br><br>
<br><a data-href="Contributions" href="https://rafageist.com/contributions.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiFilePaper2Line" aria-label="RiFilePaper2Line" data-icon="RiFilePaper2Line" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M20 2C21.6569 2 23 3.34315 23 5V7H21V19C21 20.6569 19.6569 22 18 22H4C2.34315 22 1 20.6569 1 19V17H17V19C17 19.5128 17.386 19.9355 17.8834 19.9933L18 20C18.5128 20 18.9355 19.614 18.9933 19.1166L19 19V4H6C5.48716 4 5.06449 4.38604 5.00673 4.88338L5 5V15H3V5C3 3.34315 4.34315 2 6 2H20Z"></path></svg></span>Contributions</a>
<br><br>Explore my <a data-href="Professional Journey" href="https://rafageist.com/professional-journey.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarDays" aria-label="FasCalendarDays" data-icon="FasCalendarDays" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm64 80v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zm128 0v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16zm144-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H336zM64 400v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V400c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zm144-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V400c0-8.8-7.2-16-16-16H208zm112 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V400c0-8.8-7.2-16-16-16H336c-8.8 0-16 7.2-16 16z"></path></svg></span>Professional Journey</a>, a retrospective voyage that unfolds my trajectory in the realm of technology and programming from 1997 to the present day. <br><br>Dive into the realm of my <a data-href="Projects" href="https://rafageist.com/projects.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="SiAwsorganizations" aria-label="SiAwsorganizations" data-icon="SiAwsorganizations" aria-hidden="true" style="transform: translateY(20%);"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M24 18.714v4.8c0 .288-.192.48-.48.48h-4.8c-.288 0-.48-.192-.48-.48v-4.8c0-.288.192-.48.48-.48h1.92v-1.92h-8.16v1.92h1.92c.288 0 .48.192.48.48v4.8c0 .288-.192.48-.48.48H9.6c-.288 0-.48-.192-.48-.48v-4.8c0-.288.192-.48.48-.48h1.92v-1.92H3.36v1.92h1.92c.288 0 .48.192.48.48v4.8c0 .288-.192.48-.48.48H.48c-.288 0-.48-.192-.48-.48v-4.8c0-.288.192-.48.48-.48H2.4v-2.4c0-.288.192-.48.48-.48h8.64v-1.44h.96v1.44h8.64c.288 0 .48.192.48.48v2.4h1.92c.288 0 .48.192.48.48zm-13.92 4.32h3.84v-3.84h-3.84zm-9.12 0H4.8v-3.84H.96Zm18.24 0h3.84v-3.84H19.2ZM6.24 9.642V3.546c0-.192.096-.336.24-.432L11.76.042c.144-.048.336-.048.48 0l5.28 3.072c.144.096.24.24.24.432v6.096c0 .144-.096.288-.24.384l-5.28 3.072q-.096.048-.24.048t-.24-.048l-5.28-3.072c-.144-.096-.24-.24-.24-.384Zm10.56-.288V4.362l-4.32 2.496v4.992zm-9.6 0 4.32 2.496V6.858L7.2 4.362Zm.48-5.808L12 5.994l4.32-2.448L12 1.05Z"></path></svg></span>Projects</a>, a dynamic portfolio that encapsulates my journey through various technological endeavors. <br><br>As an avid <a data-tooltip-position="top" aria-label="https://www.chess.com/member/rafageist" rel="noopener nofollow" class="external-link" href="https://www.chess.com/member/rafageist" target="_blank">chess player</a>r, I find joy in the intricacies of each move and the strategic dance on the board. Whether you're a fellow enthusiast or just curious, feel free to join me for a game on <a data-tooltip-position="top" aria-label="https://www.chess.com/" rel="noopener nofollow" class="external-link" href="https://www.chess.com/" target="_blank">chess.com</a>. Let's make our moves and enjoy the beauty of this timeless game together!<br><br><a data-href="Resources" href="https://rafageist.com/resources.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCubes" aria-label="FasCubes" data-icon="FasCubes" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M290.8 48.6l78.4 29.7L288 109.5 206.8 78.3l78.4-29.7c1.8-.7 3.8-.7 5.7 0zM136 92.5V204.7c-1.3 .4-2.6 .8-3.9 1.3l-96 36.4C14.4 250.6 0 271.5 0 294.7V413.9c0 22.2 13.1 42.3 33.5 51.3l96 42.2c14.4 6.3 30.7 6.3 45.1 0L288 457.5l113.5 49.9c14.4 6.3 30.7 6.3 45.1 0l96-42.2c20.3-8.9 33.5-29.1 33.5-51.3V294.7c0-23.3-14.4-44.1-36.1-52.4l-96-36.4c-1.3-.5-2.6-.9-3.9-1.3V92.5c0-23.3-14.4-44.1-36.1-52.4l-96-36.4c-12.8-4.8-26.9-4.8-39.7 0l-96 36.4C150.4 48.4 136 69.3 136 92.5zM392 210.6l-82.4 31.2V152.6L392 121v89.6zM154.8 250.9l78.4 29.7L152 311.7 70.8 280.6l78.4-29.7c1.8-.7 3.8-.7 5.7 0zm18.8 204.4V354.8L256 323.2v95.9l-82.4 36.2zM421.2 250.9c1.8-.7 3.8-.7 5.7 0l78.4 29.7L424 311.7l-81.2-31.1 78.4-29.7zM523.2 421.2l-77.6 34.1V354.8L528 323.2v90.7c0 3.2-1.9 6-4.8 7.3z"></path></svg></span>Resources</a> section serves as a gateway to a wealth of knowledge and utilities that have proven valuable in my professional journey. <br><br><br>For direct communication and quick contact, feel free to reach out through:<br>
<br> Telegram: <a data-tooltip-position="top" aria-label="https://t.me/rafageist" rel="noopener nofollow" class="external-link" href="https://t.me/rafageist" target="_blank">@rafageist</a>
<br> WhatsApp: <a data-tooltip-position="top" aria-label="https://wa.me/+5978401275" rel="noopener nofollow" class="external-link" href="https://wa.me/+5978401275" target="_blank">+5978401275</a>
<br> Email: <a data-tooltip-position="top" aria-label="mailto:rafageist@divengine.com" rel="noopener nofollow" class="external-link" href="https://rafageist.com/mailto:rafageist@divengine.com" target="_blank">rafageist@divengine.com</a>
<br>Thanks for stopping by and exploring my professional space! ]]></description><link>https://rafageist.com/index.html</link><guid isPermaLink="false">index.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:40:32 GMT</pubDate><enclosure url="https://api.daily.dev/devcards/v2/YhEpwXdlkRpAA491aj7nP.png?type=wide&amp;r=zbn&amp;nocache=679f92e2cdea6" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://api.daily.dev/devcards/v2/YhEpwXdlkRpAA491aj7nP.png?type=wide&amp;r=zbn&amp;nocache=679f92e2cdea6"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Professional Journey Overview]]> | rafageist</title><description><![CDATA[ 
 <br>Explore my Professional Journey, a retrospective voyage that unfolds my trajectory in the realm of technology and programming from 1997 to the present day. <br>From my early encounters with computing on an Amstrad PCW at the age of 11 to navigating the complexities of modern development frameworks, this narrative encapsulates key milestones, lessons learned, and the continuous evolution of my skills. <br>Join me on this dynamic timeline, reflecting on the past, embracing the present, and looking forward to the future of innovation and growth.<br>
<br><a data-href="1997-2000 - Formative Coding Years" href="https://rafageist.com/professional-journey/1997-2000-formative-coding-years.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarDay" aria-label="FasCalendarDay" data-icon="FasCalendarDay" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z"></path></svg></span>1997-2000 - Formative Coding Years</a>
<br><a data-href="2001-2005 - Technological Evolution" href="https://rafageist.com/professional-journey/2001-2005-technological-evolution.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarDay" aria-label="FasCalendarDay" data-icon="FasCalendarDay" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z"></path></svg></span>2001-2005 - Technological Evolution</a>
<br><a data-href="2005-2010 - University Years" href="https://rafageist.com/professional-journey/2005-2010-university-years.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarDay" aria-label="FasCalendarDay" data-icon="FasCalendarDay" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z"></path></svg></span>2005-2010 - University Years</a>
<br><a data-href="2010-2020 - Professional Evolution" href="https://rafageist.com/professional-journey/2010-2020-professional-evolution.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarDay" aria-label="FasCalendarDay" data-icon="FasCalendarDay" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z"></path></svg></span>2010-2020 - Professional Evolution</a>
<br><a data-href="2020-today - Advancing Professional Frontiers" href="https://rafageist.com/professional-journey/2020-today-advancing-professional-frontiers.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCalendarDay" aria-label="FasCalendarDay" data-icon="FasCalendarDay" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z"></path></svg></span>2020-today - Advancing Professional Frontiers</a>
]]></description><link>https://rafageist.com/professional-journey.html</link><guid isPermaLink="false">Professional Journey.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Mon, 12 Feb 2024 03:46:18 GMT</pubDate></item><item><title><![CDATA[Projects]]> | rafageist</title><description><![CDATA[ 
 <br>Dive into the realm of my projects, a dynamic portfolio that encapsulates my journey through various technological endeavors. From past achievements to ongoing ventures and future innovations, this space showcases the diverse range of projects that have shaped my career. Whether it's crafting robust software solutions, experimenting with cutting-edge technologies, or envisioning the next big thing, each project reflects a commitment to innovation, problem-solving, and continuous improvement.<br>Explore the featured projects, each with its unique challenges and triumphs. Stay tuned for updates on current initiatives and get a glimpse into the exciting prospects that lie ahead. Join me on this exploration of creativity, craftsmanship, and the boundless possibilities that technology offers.<br>
<br><a data-href="Divengine Open Source Ecosystem" href="https://rafageist.com/projects/divengine-open-source-ecosystem.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="RiOrganizationChart" aria-label="RiOrganizationChart" data-icon="RiOrganizationChart" aria-hidden="true" style="transform: translateY(20%);"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16px" height="16px"><path d="M15 3C15.5523 3 16 3.44772 16 4V8C16 8.55228 15.5523 9 15 9H13V11H17C17.5523 11 18 11.4477 18 12V15H20C20.5523 15 21 15.4477 21 16V20C21 20.5523 20.5523 21 20 21H14C13.4477 21 13 20.5523 13 20V16C13 15.4477 13.4477 15 14 15H16V13H8V15H10C10.5523 15 11 15.4477 11 16V20C11 20.5523 10.5523 21 10 21H4C3.44772 21 3 20.5523 3 20V16C3 15.4477 3.44772 15 4 15H6V12C6 11.4477 6.44772 11 7 11H11V9H9C8.44772 9 8 8.55228 8 8V4C8 3.44772 8.44772 3 9 3H15ZM9 17H5V19H9V17ZM19 17H15V19H19V17ZM14 5H10V7H14V5Z"></path></svg></span>Divengine Open Source Ecosystem</a>
]]></description><link>https://rafageist.com/projects.html</link><guid isPermaLink="false">Projects.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Mon, 12 Feb 2024 03:46:24 GMT</pubDate></item><item><title><![CDATA[Resources]]> | rafageist</title><description><![CDATA[ 
 <br><img class="emoji" draggable="false" alt="🛠️" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f6e0.svg" height="16px" style="max-width: 100%;"> Welcome to the Resources Hub, a curated collection of tools, software, literature, and more, available for the benefit of the community. This section serves as a gateway to a wealth of knowledge and utilities that have proven valuable in my professional journey. Whether you're a fellow developer seeking powerful software, an avid reader looking for insightful literature, or someone eager to explore a trove of useful resources, you've come to the right place.<br>Browse through the carefully selected resources, each chosen for its contribution to productivity, learning, and creativity. From coding tools to recommended books, this hub is designed to empower and inspire. Feel free to explore, discover, and leverage these resources to enhance your own endeavors. Together, let's foster a culture of shared knowledge and continuous growth.<br>
<br><a data-href="Mallard Basic" href="https://rafageist.com/resources/mallard-basic.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="FasCube" aria-label="FasCube" data-icon="FasCube" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor" width="16px" height="16px"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --><path d="M234.5 5.7c13.9-5 29.1-5 43.1 0l192 68.6C495 83.4 512 107.5 512 134.6V377.4c0 27-17 51.2-42.5 60.3l-192 68.6c-13.9 5-29.1 5-43.1 0l-192-68.6C17 428.6 0 404.5 0 377.4V134.6c0-27 17-51.2 42.5-60.3l192-68.6zM256 66L82.3 128 256 190l173.7-62L256 66zm32 368.6l160-57.1v-188L288 246.6v188z"></path></svg></span>Mallard Basic</a> manual
]]></description><link>https://rafageist.com/resources.html</link><guid isPermaLink="false">Resources.md</guid><dc:creator><![CDATA[Rafa Rodriguez]]></dc:creator><pubDate>Sun, 25 Feb 2024 00:34:26 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f6e0.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f6e0.svg"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>